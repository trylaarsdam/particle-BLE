
d:/Dev/particle-BLE/target/1.5.2/argon/particle-BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020d4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003d99c  000d60f4  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000dec  2003da04  2003da04  0002da04  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d615c  000d615c  0002615c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6184  000d6184  00026184  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000adc72  00000000  00000000  00026188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c98a  00000000  00000000  000d3dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a4cb  00000000  00000000  000e0784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002318  00000000  00000000  000fac4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000041a0  00000000  00000000  000fcf67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eb90  00000000  00000000  00101107  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001df5c  00000000  00000000  0012fc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff241  00000000  00000000  0014dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c5b8  00000000  00000000  0024ce34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd88 	bl	d5b42 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fda8 	bl	d5b8e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d99c 	.word	0x2003d99c
   d4048:	000d60f4 	.word	0x000d60f4
   d404c:	2003da04 	.word	0x2003da04
   d4050:	2003da04 	.word	0x2003da04
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8c5 	bl	d51e8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d60ec 	.word	0x000d60ec
   d4080:	000d60b4 	.word	0x000d60b4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83e 	b.w	d4104 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f847 	bl	d411c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b86b 	b.w	d516c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba4d 	b.w	d4534 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba53 	b.w	d4544 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba51 	b.w	d4544 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z18setAdvertisingDatav>:
  BLE.on();
  RGB.control(true);
  setAdvertisingData();
}

void setAdvertisingData() {
   d40b4:	b500      	push	{lr}
   d40b6:	b093      	sub	sp, #76	; 0x4c
    // 16-bit: Company ID (0xffff)
    // Byte: Internal packet identifier (0x55)
    // 32-bit: Color code

    // Company ID (0xffff internal use/testing)
    buf[offset++] = 0xff;
   d40b8:	23ff      	movs	r3, #255	; 0xff
   d40ba:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[offset++] = 0xff;
   d40be:	f88d 3005 	strb.w	r3, [sp, #5]

    // Internal packet type. This is arbitrary, but provides an extra
    // check to make sure the data is my data, since we use the 0xffff company
    // code.
    buf[offset++] = 0x55;
   d40c2:	2355      	movs	r3, #85	; 0x55
   d40c4:	f88d 3006 	strb.w	r3, [sp, #6]

    // Our specific data, color code
    memcpy(&buf[offset], &myColor, 4);
   d40c8:	4b0d      	ldr	r3, [pc, #52]	; (d4100 <_Z18setAdvertisingDatav+0x4c>)
   d40ca:	6818      	ldr	r0, [r3, #0]
   d40cc:	f8cd 0007 	str.w	r0, [sp, #7]
    offset += 4;

    BleAdvertisingData advData;
   d40d0:	a809      	add	r0, sp, #36	; 0x24
   d40d2:	f000 fbde 	bl	d4892 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendCustomData(buf, offset);
   d40d6:	2300      	movs	r3, #0
   d40d8:	2207      	movs	r2, #7
   d40da:	a901      	add	r1, sp, #4
   d40dc:	a809      	add	r0, sp, #36	; 0x24
   d40de:	f000 fbf2 	bl	d48c6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>

    // Advertise every 100 milliseconds. Unit is 0.625 millisecond intervals.
    BLE.setAdvertisingInterval(100);
   d40e2:	f000 fc99 	bl	d4a18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40e6:	2164      	movs	r1, #100	; 0x64
   d40e8:	f000 fcc3 	bl	d4a72 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>

    // Continuously advertise
    BLE.advertise(&advData);
   d40ec:	f000 fc94 	bl	d4a18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40f0:	2200      	movs	r2, #0
   d40f2:	a909      	add	r1, sp, #36	; 0x24
   d40f4:	f000 fd04 	bl	d4b00 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d40f8:	b013      	add	sp, #76	; 0x4c
   d40fa:	f85d fb04 	ldr.w	pc, [sp], #4
   d40fe:	bf00      	nop
   d4100:	000d5c14 	.word	0x000d5c14

000d4104 <setup>:
void setAdvertisingData();

uint16_t lastRate = 0;
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
// setup() runs once, when the device is first turned on.
void setup() {
   d4104:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  BLE.on();
   d4106:	f000 fc87 	bl	d4a18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d410a:	f000 fca3 	bl	d4a54 <_ZNK8particle14BleLocalDevice2onEv>
  RGB.control(true);
   d410e:	2001      	movs	r0, #1
   d4110:	f000 ffdd 	bl	d50ce <_ZN8RGBClass7controlEb>
  setAdvertisingData();
}
   d4114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  BLE.on();
  RGB.control(true);
  setAdvertisingData();
   d4118:	f7ff bfcc 	b.w	d40b4 <_Z18setAdvertisingDatav>

000d411c <loop>:

    // Continuously advertise
    BLE.advertise(&advData);
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d411c:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  if (BLE.connected()) {
   d411e:	f000 fc7b 	bl	d4a18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4122:	f000 fd0a 	bl	d4b3a <_ZNK8particle14BleLocalDevice9connectedEv>
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
   d4126:	22ff      	movs	r2, #255	; 0xff
    BLE.advertise(&advData);
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  if (BLE.connected()) {
   d4128:	4601      	mov	r1, r0
   d412a:	b108      	cbz	r0, d4130 <loop+0x14>
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
   d412c:	4611      	mov	r1, r2
   d412e:	4610      	mov	r0, r2
  }
  else {
    RGB.color(0, 0, 255);
  }
   d4130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (BLE.connected()) {
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
  }
  else {
    RGB.color(0, 0, 255);
   d4134:	f000 bfdb 	b.w	d50ee <_ZN8RGBClass5colorEiii>

000d4138 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic>:
  }
   d4138:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d413a:	f000 f843 	bl	d41c4 <HAL_Pin_Map>
 * Project particle-BLE
 * Description: Particle BLE testing
 * Author: Todd Rylaarsdam
 * Date: 8/8/2020
 */
BleCharacteristic heartRateMeasurementCharacteristic;
   d413e:	4813      	ldr	r0, [pc, #76]	; (d418c <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x54>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4140:	4d13      	ldr	r5, [pc, #76]	; (d4190 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x58>)
   d4142:	f000 ff1b 	bl	d4f7c <_ZN8particle17BleCharacteristicC1Ev>
   d4146:	4a13      	ldr	r2, [pc, #76]	; (d4194 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x5c>)
   d4148:	4913      	ldr	r1, [pc, #76]	; (d4198 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x60>)
   d414a:	4810      	ldr	r0, [pc, #64]	; (d418c <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x54>)
   d414c:	f001 fb8c 	bl	d5868 <__aeabi_atexit>
   d4150:	2400      	movs	r4, #0

const size_t SCAN_RESULT_MAX = 30;

BleScanResult scanResults[SCAN_RESULT_MAX];
   d4152:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4156:	1928      	adds	r0, r5, r4
   d4158:	f000 fb1a 	bl	d4790 <_ZN8particle10BleAddressC1Ev>
   d415c:	f104 0008 	add.w	r0, r4, #8
   d4160:	4428      	add	r0, r5
   d4162:	f000 fb96 	bl	d4892 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4166:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d416a:	4428      	add	r0, r5
   d416c:	3454      	adds	r4, #84	; 0x54
   d416e:	f000 fb90 	bl	d4892 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4172:	42b4      	cmp	r4, r6
   d4174:	d1ef      	bne.n	d4156 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x1e>
BlePeerDevice peer;
   d4176:	4809      	ldr	r0, [pc, #36]	; (d419c <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x64>)
   d4178:	f000 fd5a 	bl	d4c30 <_ZN8particle13BlePeerDeviceC1Ev>
   d417c:	4a05      	ldr	r2, [pc, #20]	; (d4194 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x5c>)
   d417e:	4908      	ldr	r1, [pc, #32]	; (d41a0 <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x68>)
   d4180:	4806      	ldr	r0, [pc, #24]	; (d419c <_GLOBAL__sub_I_heartRateMeasurementCharacteristic+0x64>)
    RGB.color(255, 255, 255);
  }
  else {
    RGB.color(0, 0, 255);
  }
   d4182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleCharacteristic heartRateMeasurementCharacteristic;

const size_t SCAN_RESULT_MAX = 30;

BleScanResult scanResults[SCAN_RESULT_MAX];
BlePeerDevice peer;
   d4186:	f001 bb6f 	b.w	d5868 <__aeabi_atexit>
   d418a:	bf00      	nop
   d418c:	2003e3e8 	.word	0x2003e3e8
   d4190:	2003da10 	.word	0x2003da10
   d4194:	2003da04 	.word	0x2003da04
   d4198:	000d4b6f 	.word	0x000d4b6f
   d419c:	2003da08 	.word	0x2003da08
   d41a0:	000d4b7d 	.word	0x000d4b7d

000d41a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41a4:	b508      	push	{r3, lr}
   d41a6:	4b02      	ldr	r3, [pc, #8]	; (d41b0 <netdb_freeaddrinfo+0xc>)
   d41a8:	681b      	ldr	r3, [r3, #0]
   d41aa:	689b      	ldr	r3, [r3, #8]
   d41ac:	9301      	str	r3, [sp, #4]
   d41ae:	bd08      	pop	{r3, pc}
   d41b0:	00030268 	.word	0x00030268

000d41b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41b4:	b508      	push	{r3, lr}
   d41b6:	4b02      	ldr	r3, [pc, #8]	; (d41c0 <netdb_getaddrinfo+0xc>)
   d41b8:	681b      	ldr	r3, [r3, #0]
   d41ba:	68db      	ldr	r3, [r3, #12]
   d41bc:	9301      	str	r3, [sp, #4]
   d41be:	bd08      	pop	{r3, pc}
   d41c0:	00030268 	.word	0x00030268

000d41c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41c4:	b508      	push	{r3, lr}
   d41c6:	4b02      	ldr	r3, [pc, #8]	; (d41d0 <HAL_Pin_Map+0xc>)
   d41c8:	681b      	ldr	r3, [r3, #0]
   d41ca:	681b      	ldr	r3, [r3, #0]
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	bd08      	pop	{r3, pc}
   d41d0:	0003022c 	.word	0x0003022c

000d41d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41d4:	b508      	push	{r3, lr}
   d41d6:	4b02      	ldr	r3, [pc, #8]	; (d41e0 <HAL_RNG_GetRandomNumber+0xc>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	685b      	ldr	r3, [r3, #4]
   d41dc:	9301      	str	r3, [sp, #4]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	00030218 	.word	0x00030218

000d41e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <HAL_Delay_Microseconds+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	68db      	ldr	r3, [r3, #12]
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	00030218 	.word	0x00030218

000d41f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	695b      	ldr	r3, [r3, #20]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	00030218 	.word	0x00030218

000d4204 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <hal_ble_stack_init+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	689b      	ldr	r3, [r3, #8]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	00030278 	.word	0x00030278

000d4214 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <hal_ble_gap_set_advertising_parameters+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	00030278 	.word	0x00030278

000d4224 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <hal_ble_gap_get_advertising_parameters+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	00030278 	.word	0x00030278

000d4234 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <hal_ble_gap_set_advertising_data+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	00030278 	.word	0x00030278

000d4244 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <hal_ble_gap_set_scan_response_data+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	00030278 	.word	0x00030278

000d4254 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <hal_ble_gap_start_advertising+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	00030278 	.word	0x00030278

000d4264 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b03      	ldr	r3, [pc, #12]	; (d4274 <hal_ble_gap_disconnect+0x10>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d426e:	9301      	str	r3, [sp, #4]
   d4270:	bd08      	pop	{r3, pc}
   d4272:	0000      	.short	0x0000
   d4274:	00030278 	.word	0x00030278

000d4278 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b03      	ldr	r3, [pc, #12]	; (d4288 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4282:	9301      	str	r3, [sp, #4]
   d4284:	bd08      	pop	{r3, pc}
   d4286:	0000      	.short	0x0000
   d4288:	00030278 	.word	0x00030278

000d428c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <os_thread_is_current+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	689b      	ldr	r3, [r3, #8]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030248 	.word	0x00030248

000d429c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <os_thread_join+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	691b      	ldr	r3, [r3, #16]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030248 	.word	0x00030248

000d42ac <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <os_thread_cleanup+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	695b      	ldr	r3, [r3, #20]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030248 	.word	0x00030248

000d42bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <os_mutex_recursive_create+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030248 	.word	0x00030248

000d42cc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <os_mutex_recursive_destroy+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030248 	.word	0x00030248

000d42dc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <os_mutex_recursive_lock+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030248 	.word	0x00030248

000d42ec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <os_mutex_recursive_unlock+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030248 	.word	0x00030248

000d42fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <inet_inet_ntop+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	695b      	ldr	r3, [r3, #20]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030264 	.word	0x00030264

000d430c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_USART_Init+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	681b      	ldr	r3, [r3, #0]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003023c 	.word	0x0003023c

000d431c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_USART_Write_Data+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	68db      	ldr	r3, [r3, #12]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_USART_Available_Data+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	691b      	ldr	r3, [r3, #16]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003023c 	.word	0x0003023c

000d433c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_USART_Read_Data+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	695b      	ldr	r3, [r3, #20]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003023c 	.word	0x0003023c

000d434c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_USART_Peek_Data+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	699b      	ldr	r3, [r3, #24]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003023c 	.word	0x0003023c

000d435c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_USART_Flush_Data+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	69db      	ldr	r3, [r3, #28]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003023c 	.word	0x0003023c

000d436c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_USART_Available_Data_For_Write+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003023c 	.word	0x0003023c

000d437c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_USB_USART_Init+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	681b      	ldr	r3, [r3, #0]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003024c 	.word	0x0003024c

000d438c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_USB_USART_Available_Data+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	691b      	ldr	r3, [r3, #16]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003024c 	.word	0x0003024c

000d439c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	695b      	ldr	r3, [r3, #20]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003024c 	.word	0x0003024c

000d43ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_USB_USART_Receive_Data+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	699b      	ldr	r3, [r3, #24]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003024c 	.word	0x0003024c

000d43bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_USB_USART_Send_Data+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	69db      	ldr	r3, [r3, #28]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003024c 	.word	0x0003024c

000d43cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_USB_USART_Flush_Data+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6a1b      	ldr	r3, [r3, #32]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003024c 	.word	0x0003024c

000d43dc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <LED_SetSignalingColor+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	685b      	ldr	r3, [r3, #4]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030260 	.word	0x00030260

000d43ec <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <LED_Signaling_Start+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030260 	.word	0x00030260

000d43fc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <LED_Signaling_Stop+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030260 	.word	0x00030260

000d440c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <LED_RGB_IsOverRidden+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	699b      	ldr	r3, [r3, #24]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030260 	.word	0x00030260

000d441c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <LED_On+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	69db      	ldr	r3, [r3, #28]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030260 	.word	0x00030260

000d442c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <panic_+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030260 	.word	0x00030260

000d443c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <log_message+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030260 	.word	0x00030260

000d444c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <set_system_mode+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030220 	.word	0x00030220

000d445c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b03      	ldr	r3, [pc, #12]	; (d446c <system_ctrl_set_app_request_handler+0x10>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4466:	9301      	str	r3, [sp, #4]
   d4468:	bd08      	pop	{r3, pc}
   d446a:	0000      	.short	0x0000
   d446c:	00030220 	.word	0x00030220

000d4470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b03      	ldr	r3, [pc, #12]	; (d4480 <system_ctrl_set_result+0x10>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d447a:	9301      	str	r3, [sp, #4]
   d447c:	bd08      	pop	{r3, pc}
   d447e:	0000      	.short	0x0000
   d4480:	00030220 	.word	0x00030220

000d4484 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_connect+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	685b      	ldr	r3, [r3, #4]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_connecting+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	689b      	ldr	r3, [r3, #8]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_disconnect+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	68db      	ldr	r3, [r3, #12]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_ready+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_on+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_off+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	699b      	ldr	r3, [r3, #24]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_listen+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_listening+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a1b      	ldr	r3, [r3, #32]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_set_listen_timeout+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_get_listen_timeout+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030244 	.word	0x00030244

000d4534 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <malloc+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	681b      	ldr	r3, [r3, #0]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003021c 	.word	0x0003021c

000d4544 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <free+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	685b      	ldr	r3, [r3, #4]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003021c 	.word	0x0003021c

000d4554 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <realloc+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	689b      	ldr	r3, [r3, #8]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003021c 	.word	0x0003021c

000d4564 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4564:	2200      	movs	r2, #0
   d4566:	4611      	mov	r1, r2
   d4568:	6840      	ldr	r0, [r0, #4]
   d456a:	f7ff bfc3 	b.w	d44f4 <network_listening>

000d456e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d456e:	2200      	movs	r2, #0
   d4570:	4611      	mov	r1, r2
   d4572:	6840      	ldr	r0, [r0, #4]
   d4574:	f7ff bfce 	b.w	d4514 <network_get_listen_timeout>

000d4578 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4578:	2200      	movs	r2, #0
   d457a:	6840      	ldr	r0, [r0, #4]
   d457c:	f7ff bfc2 	b.w	d4504 <network_set_listen_timeout>

000d4580 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4580:	2200      	movs	r2, #0
   d4582:	f081 0101 	eor.w	r1, r1, #1
   d4586:	6840      	ldr	r0, [r0, #4]
   d4588:	f7ff bfac 	b.w	d44e4 <network_listen>

000d458c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d458c:	2300      	movs	r3, #0
   d458e:	461a      	mov	r2, r3
   d4590:	4619      	mov	r1, r3
   d4592:	6840      	ldr	r0, [r0, #4]
   d4594:	f7ff bf9e 	b.w	d44d4 <network_off>

000d4598 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4598:	2300      	movs	r3, #0
   d459a:	461a      	mov	r2, r3
   d459c:	4619      	mov	r1, r3
   d459e:	6840      	ldr	r0, [r0, #4]
   d45a0:	f7ff bf90 	b.w	d44c4 <network_on>

000d45a4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45a4:	2200      	movs	r2, #0
   d45a6:	4611      	mov	r1, r2
   d45a8:	6840      	ldr	r0, [r0, #4]
   d45aa:	f7ff bf83 	b.w	d44b4 <network_ready>

000d45ae <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45ae:	2200      	movs	r2, #0
   d45b0:	4611      	mov	r1, r2
   d45b2:	6840      	ldr	r0, [r0, #4]
   d45b4:	f7ff bf6e 	b.w	d4494 <network_connecting>

000d45b8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45b8:	2200      	movs	r2, #0
   d45ba:	2102      	movs	r1, #2
   d45bc:	6840      	ldr	r0, [r0, #4]
   d45be:	f7ff bf71 	b.w	d44a4 <network_disconnect>

000d45c2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45c2:	2300      	movs	r3, #0
   d45c4:	461a      	mov	r2, r3
   d45c6:	6840      	ldr	r0, [r0, #4]
   d45c8:	f7ff bf5c 	b.w	d4484 <network_connect>

000d45cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45cc:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45ce:	2203      	movs	r2, #3
   d45d0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45d2:	4a02      	ldr	r2, [pc, #8]	; (d45dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45d4:	601a      	str	r2, [r3, #0]
   d45d6:	4770      	bx	lr
   d45d8:	2003e3f0 	.word	0x2003e3f0
   d45dc:	000d5c20 	.word	0x000d5c20

000d45e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d45e0:	b510      	push	{r4, lr}
   d45e2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d45e4:	6800      	ldr	r0, [r0, #0]
   d45e6:	b118      	cbz	r0, d45f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d45e8:	f7ff ffac 	bl	d4544 <free>
            wakeupSource_ = nullptr;
   d45ec:	2300      	movs	r3, #0
   d45ee:	6023      	str	r3, [r4, #0]
   d45f0:	bd10      	pop	{r4, pc}

000d45f2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d45f2:	b510      	push	{r4, lr}
   d45f4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d45f6:	f7ff fff3 	bl	d45e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d45fa:	4620      	mov	r0, r4
   d45fc:	bd10      	pop	{r4, pc}
	...

000d4600 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4600:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4602:	4c09      	ldr	r4, [pc, #36]	; (d4628 <_GLOBAL__sub_I_System+0x28>)
   d4604:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4606:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d460a:	6020      	str	r0, [r4, #0]
   d460c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d460e:	71a0      	strb	r0, [r4, #6]
   d4610:	8120      	strh	r0, [r4, #8]
   d4612:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4614:	f7ff ff1a 	bl	d444c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4618:	4620      	mov	r0, r4
   d461a:	4a04      	ldr	r2, [pc, #16]	; (d462c <_GLOBAL__sub_I_System+0x2c>)
   d461c:	4904      	ldr	r1, [pc, #16]	; (d4630 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d461e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4622:	f001 b921 	b.w	d5868 <__aeabi_atexit>
   d4626:	bf00      	nop
   d4628:	2003e3f8 	.word	0x2003e3f8
   d462c:	2003da04 	.word	0x2003da04
   d4630:	000d45f3 	.word	0x000d45f3

000d4634 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4634:	b510      	push	{r4, lr}
   d4636:	4604      	mov	r4, r0
{
	free(buffer);
   d4638:	6800      	ldr	r0, [r0, #0]
   d463a:	f7ff ff83 	bl	d4544 <free>
}
   d463e:	4620      	mov	r0, r4
   d4640:	bd10      	pop	{r4, pc}

000d4642 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4642:	b510      	push	{r4, lr}
   d4644:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4646:	6800      	ldr	r0, [r0, #0]
   d4648:	b108      	cbz	r0, d464e <_ZN6String10invalidateEv+0xc>
   d464a:	f7ff ff7b 	bl	d4544 <free>
	buffer = NULL;
   d464e:	2300      	movs	r3, #0
   d4650:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4652:	60a3      	str	r3, [r4, #8]
   d4654:	6063      	str	r3, [r4, #4]
   d4656:	bd10      	pop	{r4, pc}

000d4658 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4658:	b538      	push	{r3, r4, r5, lr}
   d465a:	4604      	mov	r4, r0
   d465c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d465e:	6800      	ldr	r0, [r0, #0]
   d4660:	3101      	adds	r1, #1
   d4662:	f7ff ff77 	bl	d4554 <realloc>
	if (newbuffer) {
   d4666:	b110      	cbz	r0, d466e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4668:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d466c:	2001      	movs	r0, #1
	}
	return 0;
}
   d466e:	bd38      	pop	{r3, r4, r5, pc}

000d4670 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4670:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4672:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4674:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4676:	b113      	cbz	r3, d467e <_ZN6String7reserveEj+0xe>
   d4678:	6843      	ldr	r3, [r0, #4]
   d467a:	428b      	cmp	r3, r1
   d467c:	d207      	bcs.n	d468e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff ffea 	bl	d4658 <_ZN6String12changeBufferEj>
   d4684:	b120      	cbz	r0, d4690 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4686:	68a3      	ldr	r3, [r4, #8]
   d4688:	b90b      	cbnz	r3, d468e <_ZN6String7reserveEj+0x1e>
   d468a:	6822      	ldr	r2, [r4, #0]
   d468c:	7013      	strb	r3, [r2, #0]
   d468e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4690:	bd10      	pop	{r4, pc}

000d4692 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4692:	b570      	push	{r4, r5, r6, lr}
   d4694:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4696:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4698:	4604      	mov	r4, r0
   d469a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d469c:	f7ff ffe8 	bl	d4670 <_ZN6String7reserveEj>
   d46a0:	b918      	cbnz	r0, d46aa <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d46a2:	4620      	mov	r0, r4
   d46a4:	f7ff ffcd 	bl	d4642 <_ZN6String10invalidateEv>
		return *this;
   d46a8:	e009      	b.n	d46be <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d46aa:	462a      	mov	r2, r5
   d46ac:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d46ae:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d46b0:	6820      	ldr	r0, [r4, #0]
   d46b2:	f001 fa46 	bl	d5b42 <memcpy>
	buffer[len] = 0;
   d46b6:	6822      	ldr	r2, [r4, #0]
   d46b8:	68a3      	ldr	r3, [r4, #8]
   d46ba:	2100      	movs	r1, #0
   d46bc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d46be:	4620      	mov	r0, r4
   d46c0:	bd70      	pop	{r4, r5, r6, pc}

000d46c2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d46c2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46c4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d46c6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46c8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d46ca:	6043      	str	r3, [r0, #4]
	len = 0;
   d46cc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d46ce:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d46d0:	460d      	mov	r5, r1
   d46d2:	b139      	cbz	r1, d46e4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d46d4:	4608      	mov	r0, r1
   d46d6:	f001 fa8b 	bl	d5bf0 <strlen>
   d46da:	4629      	mov	r1, r5
   d46dc:	4602      	mov	r2, r0
   d46de:	4620      	mov	r0, r4
   d46e0:	f7ff ffd7 	bl	d4692 <_ZN6String4copyEPKcj>
}
   d46e4:	4620      	mov	r0, r4
   d46e6:	bd38      	pop	{r3, r4, r5, pc}

000d46e8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d46e8:	4770      	bx	lr

000d46ea <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d46ea:	2000      	movs	r0, #0
   d46ec:	4770      	bx	lr

000d46ee <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d46ee:	4770      	bx	lr

000d46f0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d46f0:	2000      	movs	r0, #0
   d46f2:	4770      	bx	lr

000d46f4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d46f4:	b510      	push	{r4, lr}
   d46f6:	2114      	movs	r1, #20
   d46f8:	4604      	mov	r4, r0
   d46fa:	f001 f8ba 	bl	d5872 <_ZdlPvj>
   d46fe:	4620      	mov	r0, r4
   d4700:	bd10      	pop	{r4, pc}

000d4702 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4702:	b510      	push	{r4, lr}
   d4704:	2114      	movs	r1, #20
   d4706:	4604      	mov	r4, r0
   d4708:	f001 f8b3 	bl	d5872 <_ZdlPvj>
   d470c:	4620      	mov	r0, r4
   d470e:	bd10      	pop	{r4, pc}

000d4710 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4710:	f7ff bcc3 	b.w	d409a <_ZdlPv>

000d4714 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4714:	f7ff bcc1 	b.w	d409a <_ZdlPv>

000d4718 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4718:	b510      	push	{r4, lr}
   d471a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d471c:	6800      	ldr	r0, [r0, #0]
   d471e:	b108      	cbz	r0, d4724 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4720:	f7ff fdd4 	bl	d42cc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4724:	4620      	mov	r0, r4
   d4726:	bd10      	pop	{r4, pc}

000d4728 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4728:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d472a:	200a      	movs	r0, #10
   d472c:	4a02      	ldr	r2, [pc, #8]	; (d4738 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d472e:	2100      	movs	r1, #0
   d4730:	f7ff fe7c 	bl	d442c <panic_>
    }
}
   d4734:	bd08      	pop	{r3, pc}
   d4736:	bf00      	nop
   d4738:	000d41e5 	.word	0x000d41e5

000d473c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d473c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d473e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4740:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4742:	689b      	ldr	r3, [r3, #8]
   d4744:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4746:	68a3      	ldr	r3, [r4, #8]
   d4748:	3b01      	subs	r3, #1
   d474a:	60a3      	str	r3, [r4, #8]
   d474c:	b92b      	cbnz	r3, d475a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d474e:	6823      	ldr	r3, [r4, #0]
   d4750:	4620      	mov	r0, r4
   d4752:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4758:	4718      	bx	r3
   d475a:	bd10      	pop	{r4, pc}

000d475c <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d475c:	b510      	push	{r4, lr}
            locked_(false) {
   d475e:	2300      	movs	r3, #0
   d4760:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4762:	4b04      	ldr	r3, [pc, #16]	; (d4774 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4764:	4604      	mov	r4, r0
   d4766:	6818      	ldr	r0, [r3, #0]
   d4768:	f7ff fdb8 	bl	d42dc <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d476c:	2301      	movs	r3, #1
   d476e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4770:	4620      	mov	r0, r4
   d4772:	bd10      	pop	{r4, pc}
   d4774:	2003e40c 	.word	0x2003e40c

000d4778 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4778:	b510      	push	{r4, lr}
        if (locked_) {
   d477a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d477c:	4604      	mov	r4, r0
        if (locked_) {
   d477e:	b11b      	cbz	r3, d4788 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4780:	4b02      	ldr	r3, [pc, #8]	; (d478c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4782:	6818      	ldr	r0, [r3, #0]
   d4784:	f7ff fdb2 	bl	d42ec <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4788:	4620      	mov	r0, r4
   d478a:	bd10      	pop	{r4, pc}
   d478c:	2003e40c 	.word	0x2003e40c

000d4790 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4790:	2200      	movs	r2, #0
   d4792:	6002      	str	r2, [r0, #0]
   d4794:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d4796:	4770      	bx	lr

000d4798 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4798:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d479a:	7982      	ldrb	r2, [r0, #6]
   d479c:	798b      	ldrb	r3, [r1, #6]
   d479e:	429a      	cmp	r2, r3
   d47a0:	d106      	bne.n	d47b0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d47a2:	2206      	movs	r2, #6
   d47a4:	f001 f9be 	bl	d5b24 <memcmp>
   d47a8:	fab0 f080 	clz	r0, r0
   d47ac:	0940      	lsrs	r0, r0, #5
   d47ae:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d47b0:	2000      	movs	r0, #0
}
   d47b2:	bd08      	pop	{r3, pc}

000d47b4 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d47b4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d47b6:	2301      	movs	r3, #1
   d47b8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d47ba:	4b05      	ldr	r3, [pc, #20]	; (d47d0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d47bc:	4602      	mov	r2, r0
   d47be:	f103 0110 	add.w	r1, r3, #16
   d47c2:	f853 4b04 	ldr.w	r4, [r3], #4
   d47c6:	f842 4b04 	str.w	r4, [r2], #4
   d47ca:	428b      	cmp	r3, r1
   d47cc:	d1f9      	bne.n	d47c2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d47ce:	bd10      	pop	{r4, pc}
   d47d0:	000d5e24 	.word	0x000d5e24

000d47d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d47d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d47d6:	b18b      	cbz	r3, d47fc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d47d8:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d47da:	1ce5      	adds	r5, r4, #3
   d47dc:	428d      	cmp	r5, r1
   d47de:	d80f      	bhi.n	d4800 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d47e0:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d47e2:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d47e4:	5d87      	ldrb	r7, [r0, r6]
   d47e6:	4297      	cmp	r7, r2
   d47e8:	d105      	bne.n	d47f6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d47ea:	442e      	add	r6, r5
   d47ec:	42b1      	cmp	r1, r6
   d47ee:	d307      	bcc.n	d4800 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d47f0:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d47f2:	1c68      	adds	r0, r5, #1
                return adsLen;
   d47f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d47f6:	3501      	adds	r5, #1
   d47f8:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d47fa:	e7ee      	b.n	d47da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d47fc:	4618      	mov	r0, r3
   d47fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4800:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4802:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4804 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4808:	4604      	mov	r4, r0
   d480a:	460e      	mov	r6, r1
   d480c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d480e:	4617      	mov	r7, r2
   d4810:	2a00      	cmp	r2, #0
   d4812:	d03a      	beq.n	d488a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4814:	460a      	mov	r2, r1
   d4816:	ab01      	add	r3, sp, #4
   d4818:	6a01      	ldr	r1, [r0, #32]
   d481a:	f7ff ffdb 	bl	d47d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d481e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4822:	6a22      	ldr	r2, [r4, #32]
   d4824:	bb03      	cbnz	r3, d4868 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4826:	b1f8      	cbz	r0, d4868 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4828:	1c96      	adds	r6, r2, #2
   d482a:	442e      	add	r6, r5
   d482c:	1a36      	subs	r6, r6, r0
   d482e:	2e1f      	cmp	r6, #31
   d4830:	d82b      	bhi.n	d488a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4832:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4836:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d483a:	ebc8 0202 	rsb	r2, r8, r2
   d483e:	1a12      	subs	r2, r2, r0
   d4840:	eb00 0108 	add.w	r1, r0, r8
   d4844:	eb05 0009 	add.w	r0, r5, r9
   d4848:	b292      	uxth	r2, r2
   d484a:	4421      	add	r1, r4
   d484c:	4420      	add	r0, r4
   d484e:	f001 f983 	bl	d5b58 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4852:	1c6b      	adds	r3, r5, #1
   d4854:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4858:	462a      	mov	r2, r5
   d485a:	4639      	mov	r1, r7
   d485c:	eb04 0009 	add.w	r0, r4, r9
   d4860:	f001 f96f 	bl	d5b42 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4864:	6226      	str	r6, [r4, #32]
   d4866:	e010      	b.n	d488a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4868:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d486a:	182b      	adds	r3, r5, r0
   d486c:	2b1f      	cmp	r3, #31
   d486e:	d80c      	bhi.n	d488a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4870:	1c6b      	adds	r3, r5, #1
   d4872:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4874:	4422      	add	r2, r4
   d4876:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4878:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d487a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d487c:	4420      	add	r0, r4
   d487e:	462a      	mov	r2, r5
   d4880:	f001 f95f 	bl	d5b42 <memcpy>
        selfLen_ += len;
   d4884:	6a22      	ldr	r2, [r4, #32]
   d4886:	442a      	add	r2, r5
   d4888:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d488a:	6a20      	ldr	r0, [r4, #32]
}
   d488c:	b003      	add	sp, #12
   d488e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4892 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4894:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4896:	4603      	mov	r3, r0
   d4898:	f100 021f 	add.w	r2, r0, #31
   d489c:	2000      	movs	r0, #0
   d489e:	f803 0b01 	strb.w	r0, [r3], #1
   d48a2:	4293      	cmp	r3, r2
   d48a4:	f04f 0100 	mov.w	r1, #0
   d48a8:	d1f9      	bne.n	d489e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d48aa:	aa04      	add	r2, sp, #16
   d48ac:	2306      	movs	r3, #6
   d48ae:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d48b2:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d48b4:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d48b6:	9100      	str	r1, [sp, #0]
   d48b8:	4620      	mov	r0, r4
   d48ba:	4619      	mov	r1, r3
   d48bc:	f7ff ffa2 	bl	d4804 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d48c0:	4620      	mov	r0, r4
   d48c2:	b004      	add	sp, #16
   d48c4:	bd10      	pop	{r4, pc}

000d48c6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d48c6:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d48c8:	9300      	str	r3, [sp, #0]
   d48ca:	4613      	mov	r3, r2
   d48cc:	460a      	mov	r2, r1
   d48ce:	21ff      	movs	r1, #255	; 0xff
   d48d0:	f7ff ff98 	bl	d4804 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d48d4:	b003      	add	sp, #12
   d48d6:	f85d fb04 	ldr.w	pc, [sp], #4

000d48da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48da:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48dc:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48de:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48e0:	ab01      	add	r3, sp, #4
   d48e2:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48e4:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48e6:	f7ff ff75 	bl	d47d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d48ea:	4605      	mov	r5, r0
   d48ec:	b178      	cbz	r0, d490e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d48ee:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d48f0:	6a22      	ldr	r2, [r4, #32]
   d48f2:	1829      	adds	r1, r5, r0
   d48f4:	1a12      	subs	r2, r2, r0
   d48f6:	1b52      	subs	r2, r2, r5
   d48f8:	4421      	add	r1, r4
   d48fa:	4420      	add	r0, r4
   d48fc:	f001 f921 	bl	d5b42 <memcpy>
        selfLen_ -= len;
   d4900:	6a23      	ldr	r3, [r4, #32]
   d4902:	1b5d      	subs	r5, r3, r5
   d4904:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4906:	4631      	mov	r1, r6
   d4908:	4620      	mov	r0, r4
   d490a:	f7ff ffe6 	bl	d48da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d490e:	b002      	add	sp, #8
   d4910:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4914 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4914:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4916:	2500      	movs	r5, #0
   d4918:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d491c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d491e:	8043      	strh	r3, [r0, #2]
   d4920:	220e      	movs	r2, #14
   d4922:	4629      	mov	r1, r5
   d4924:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4926:	7105      	strb	r5, [r0, #4]
   d4928:	3006      	adds	r0, #6
   d492a:	f001 f930 	bl	d5b8e <memset>
   d492e:	f104 0014 	add.w	r0, r4, #20
   d4932:	f7ff ff3f 	bl	d47b4 <_ZN8particle7BleUuidC1Ev>
   d4936:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d493a:	f7ff ff3b 	bl	d47b4 <_ZN8particle7BleUuidC1Ev>
   d493e:	4904      	ldr	r1, [pc, #16]	; (d4950 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4940:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4944:	f7ff febd 	bl	d46c2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4948:	64e5      	str	r5, [r4, #76]	; 0x4c
   d494a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d494c:	4620      	mov	r0, r4
   d494e:	bd38      	pop	{r3, r4, r5, pc}
   d4950:	000d5edb 	.word	0x000d5edb

000d4954 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4954:	b510      	push	{r4, lr}
   d4956:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4958:	69c2      	ldr	r2, [r0, #28]
   d495a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d495e:	4293      	cmp	r3, r2
   d4960:	4618      	mov	r0, r3
   d4962:	d006      	beq.n	d4972 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4964:	6804      	ldr	r4, [r0, #0]
   d4966:	8824      	ldrh	r4, [r4, #0]
   d4968:	428c      	cmp	r4, r1
   d496a:	f103 0308 	add.w	r3, r3, #8
   d496e:	d1f6      	bne.n	d495e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4970:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4972:	2000      	movs	r0, #0
    }
   d4974:	bd10      	pop	{r4, pc}

000d4976 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4976:	b510      	push	{r4, lr}
    return impl()->address();
   d4978:	680a      	ldr	r2, [r1, #0]
   d497a:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d497e:	6003      	str	r3, [r0, #0]
   d4980:	6853      	ldr	r3, [r2, #4]
   d4982:	6043      	str	r3, [r0, #4]
}
   d4984:	bd10      	pop	{r4, pc}

000d4986 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4986:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4988:	6802      	ldr	r2, [r0, #0]
   d498a:	680b      	ldr	r3, [r1, #0]
   d498c:	8812      	ldrh	r2, [r2, #0]
   d498e:	881b      	ldrh	r3, [r3, #0]
   d4990:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4992:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4994:	d10c      	bne.n	d49b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4996:	4601      	mov	r1, r0
   d4998:	4668      	mov	r0, sp
   d499a:	f7ff ffec 	bl	d4976 <_ZNK8particle13BlePeerDevice7addressEv>
   d499e:	4621      	mov	r1, r4
   d49a0:	a802      	add	r0, sp, #8
   d49a2:	f7ff ffe8 	bl	d4976 <_ZNK8particle13BlePeerDevice7addressEv>
   d49a6:	a902      	add	r1, sp, #8
   d49a8:	4668      	mov	r0, sp
   d49aa:	f7ff fef5 	bl	d4798 <_ZNK8particle10BleAddresseqERKS0_>
   d49ae:	b900      	cbnz	r0, d49b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d49b0:	2000      	movs	r0, #0
}
   d49b2:	b004      	add	sp, #16
   d49b4:	bd10      	pop	{r4, pc}
	...

000d49b8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d49b8:	b510      	push	{r4, lr}
   d49ba:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d49bc:	2034      	movs	r0, #52	; 0x34
   d49be:	f7ff fb6a 	bl	d4096 <_Znwj>
   d49c2:	4601      	mov	r1, r0
   d49c4:	b168      	cbz	r0, d49e2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d49c6:	2300      	movs	r3, #0
   d49c8:	6003      	str	r3, [r0, #0]
   d49ca:	6043      	str	r3, [r0, #4]
   d49cc:	6083      	str	r3, [r0, #8]
   d49ce:	60c3      	str	r3, [r0, #12]
   d49d0:	6103      	str	r3, [r0, #16]
   d49d2:	6143      	str	r3, [r0, #20]
   d49d4:	6183      	str	r3, [r0, #24]
   d49d6:	61c3      	str	r3, [r0, #28]
   d49d8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d49da:	6243      	str	r3, [r0, #36]	; 0x24
   d49dc:	6283      	str	r3, [r0, #40]	; 0x28
   d49de:	62c3      	str	r3, [r0, #44]	; 0x2c
   d49e0:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d49e2:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d49e4:	b919      	cbnz	r1, d49ee <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d49e6:	4a0a      	ldr	r2, [pc, #40]	; (d4a10 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d49e8:	200a      	movs	r0, #10
   d49ea:	f7ff fd1f 	bl	d442c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d49ee:	2000      	movs	r0, #0
   d49f0:	f7ff fc08 	bl	d4204 <hal_ble_stack_init>
   d49f4:	b120      	cbz	r0, d4a00 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d49f6:	4a06      	ldr	r2, [pc, #24]	; (d4a10 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d49f8:	2100      	movs	r1, #0
   d49fa:	200a      	movs	r0, #10
   d49fc:	f7ff fd16 	bl	d442c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4a00:	2200      	movs	r2, #0
   d4a02:	6821      	ldr	r1, [r4, #0]
   d4a04:	4803      	ldr	r0, [pc, #12]	; (d4a14 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4a06:	f7ff fc37 	bl	d4278 <hal_ble_set_callback_on_periph_link_events>
}
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	bd10      	pop	{r4, pc}
   d4a0e:	bf00      	nop
   d4a10:	000d41e5 	.word	0x000d41e5
   d4a14:	000d4ddd 	.word	0x000d4ddd

000d4a18 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4a18:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4a1a:	4c0a      	ldr	r4, [pc, #40]	; (d4a44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4a1c:	6823      	ldr	r3, [r4, #0]
   d4a1e:	07db      	lsls	r3, r3, #31
   d4a20:	d40e      	bmi.n	d4a40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff fb3d 	bl	d40a2 <__cxa_guard_acquire>
   d4a28:	b150      	cbz	r0, d4a40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4a2a:	4807      	ldr	r0, [pc, #28]	; (d4a48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4a2c:	f7ff ffc4 	bl	d49b8 <_ZN8particle14BleLocalDeviceC1Ev>
   d4a30:	4620      	mov	r0, r4
   d4a32:	f7ff fb3b 	bl	d40ac <__cxa_guard_release>
   d4a36:	4a05      	ldr	r2, [pc, #20]	; (d4a4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4a38:	4905      	ldr	r1, [pc, #20]	; (d4a50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4a3a:	4803      	ldr	r0, [pc, #12]	; (d4a48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4a3c:	f000 ff14 	bl	d5868 <__aeabi_atexit>
    return instance;
}
   d4a40:	4801      	ldr	r0, [pc, #4]	; (d4a48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4a42:	bd10      	pop	{r4, pc}
   d4a44:	2003e408 	.word	0x2003e408
   d4a48:	2003e404 	.word	0x2003e404
   d4a4c:	2003da04 	.word	0x2003da04
   d4a50:	000d4bf1 	.word	0x000d4bf1

000d4a54 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d4a54:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4a56:	a801      	add	r0, sp, #4
   d4a58:	f7ff fe80 	bl	d475c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d4a5c:	2000      	movs	r0, #0
   d4a5e:	f7ff fbd1 	bl	d4204 <hal_ble_stack_init>
   d4a62:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d4a64:	a801      	add	r0, sp, #4
   d4a66:	f7ff fe87 	bl	d4778 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d4a6a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d4a6e:	b002      	add	sp, #8
   d4a70:	bd10      	pop	{r4, pc}

000d4a72 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d4a72:	b530      	push	{r4, r5, lr}
   d4a74:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4a76:	2400      	movs	r4, #0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d4a78:	4668      	mov	r0, sp

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d4a7a:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4a7c:	f7ff fe6e 	bl	d475c <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4a80:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4a82:	4621      	mov	r1, r4
   d4a84:	a801      	add	r0, sp, #4
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4a86:	9401      	str	r4, [sp, #4]
   d4a88:	9402      	str	r4, [sp, #8]
   d4a8a:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4a8c:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4a90:	f7ff fbc8 	bl	d4224 <hal_ble_gap_get_advertising_parameters>
   d4a94:	2800      	cmp	r0, #0
   d4a96:	db05      	blt.n	d4aa4 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x32>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4a98:	4621      	mov	r1, r4
   d4a9a:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
   d4a9c:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4aa0:	f7ff fbb8 	bl	d4214 <hal_ble_gap_set_advertising_parameters>
   d4aa4:	4604      	mov	r4, r0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d4aa6:	4668      	mov	r0, sp
   d4aa8:	f7ff fe66 	bl	d4778 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4aac:	4620      	mov	r0, r4
   d4aae:	b005      	add	sp, #20
   d4ab0:	bd30      	pop	{r4, r5, pc}

000d4ab2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4ab2:	4608      	mov	r0, r1
   d4ab4:	b909      	cbnz	r1, d4aba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4ab6:	460a      	mov	r2, r1
   d4ab8:	e001      	b.n	d4abe <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4aba:	6a09      	ldr	r1, [r1, #32]
   d4abc:	2200      	movs	r2, #0
   d4abe:	f7ff bbb9 	b.w	d4234 <hal_ble_gap_set_advertising_data>

000d4ac2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4ac2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4ac4:	460c      	mov	r4, r1
   d4ac6:	b911      	cbnz	r1, d4ace <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4ac8:	460a      	mov	r2, r1
   d4aca:	4608      	mov	r0, r1
   d4acc:	e006      	b.n	d4adc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4ace:	2101      	movs	r1, #1
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	f7ff ff02 	bl	d48da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4ad6:	6a21      	ldr	r1, [r4, #32]
   d4ad8:	2200      	movs	r2, #0
   d4ada:	4620      	mov	r0, r4
    }
}
   d4adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4ae0:	f7ff bbb0 	b.w	d4244 <hal_ble_gap_set_scan_response_data>

000d4ae4 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d4ae4:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4ae6:	a801      	add	r0, sp, #4
   d4ae8:	f7ff fe38 	bl	d475c <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d4aec:	2000      	movs	r0, #0
   d4aee:	f7ff fbb1 	bl	d4254 <hal_ble_gap_start_advertising>
   d4af2:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d4af4:	a801      	add	r0, sp, #4
   d4af6:	f7ff fe3f 	bl	d4778 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4afa:	4620      	mov	r0, r4
   d4afc:	b002      	add	sp, #8
   d4afe:	bd10      	pop	{r4, pc}

000d4b00 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4b02:	4605      	mov	r5, r0
   d4b04:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4b06:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4b08:	4616      	mov	r6, r2
    WiringBleLock lk;
   d4b0a:	f7ff fe27 	bl	d475c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d4b0e:	4621      	mov	r1, r4
   d4b10:	4628      	mov	r0, r5
   d4b12:	f7ff ffce 	bl	d4ab2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4b16:	2800      	cmp	r0, #0
   d4b18:	db08      	blt.n	d4b2c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d4b1a:	4631      	mov	r1, r6
   d4b1c:	4628      	mov	r0, r5
   d4b1e:	f7ff ffd0 	bl	d4ac2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d4b22:	2800      	cmp	r0, #0
   d4b24:	db02      	blt.n	d4b2c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d4b26:	4628      	mov	r0, r5
   d4b28:	f7ff ffdc 	bl	d4ae4 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d4b2c:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d4b2e:	a801      	add	r0, sp, #4
   d4b30:	f7ff fe22 	bl	d4778 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d4b34:	4620      	mov	r0, r4
   d4b36:	b002      	add	sp, #8
   d4b38:	bd70      	pop	{r4, r5, r6, pc}

000d4b3a <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d4b3a:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d4b3c:	69d8      	ldr	r0, [r3, #28]
}
   d4b3e:	2800      	cmp	r0, #0
   d4b40:	bfd4      	ite	le
   d4b42:	2000      	movle	r0, #0
   d4b44:	2001      	movgt	r0, #1
   d4b46:	4770      	bx	lr

000d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4b48:	680b      	ldr	r3, [r1, #0]
   d4b4a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b4c:	b113      	cbz	r3, d4b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4b4e:	685a      	ldr	r2, [r3, #4]
   d4b50:	3201      	adds	r2, #1
   d4b52:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4b54:	4770      	bx	lr

000d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b56:	b510      	push	{r4, lr}
   d4b58:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4b5a:	6800      	ldr	r0, [r0, #0]
   d4b5c:	b128      	cbz	r0, d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4b5e:	6843      	ldr	r3, [r0, #4]
   d4b60:	3b01      	subs	r3, #1
   d4b62:	6043      	str	r3, [r0, #4]
   d4b64:	b90b      	cbnz	r3, d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4b66:	f7ff fde9 	bl	d473c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d4b6e:	b510      	push	{r4, lr}
   d4b70:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b72:	3004      	adds	r0, #4
   d4b74:	f7ff ffef 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	4604      	mov	r4, r0
   d4b80:	3004      	adds	r0, #4
   d4b82:	f7ff ffe8 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d4b86:	4620      	mov	r0, r4
   d4b88:	bd10      	pop	{r4, pc}

000d4b8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4b8a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4b8c:	6804      	ldr	r4, [r0, #0]
   d4b8e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4b90:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4b92:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4b96:	42a6      	cmp	r6, r4
   d4b98:	d004      	beq.n	d4ba4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4b9a:	1d20      	adds	r0, r4, #4
   d4b9c:	f7ff ffdb 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ba0:	3408      	adds	r4, #8
   d4ba2:	e7f8      	b.n	d4b96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4ba4:	6828      	ldr	r0, [r5, #0]
   d4ba6:	f7ff fccd 	bl	d4544 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4baa:	4628      	mov	r0, r5
   d4bac:	bd70      	pop	{r4, r5, r6, pc}

000d4bae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4bae:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4bb0:	6804      	ldr	r4, [r0, #0]
   d4bb2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4bb4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4bb6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4bba:	42a6      	cmp	r6, r4
   d4bbc:	d004      	beq.n	d4bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d4bbe:	1d20      	adds	r0, r4, #4
   d4bc0:	f7ff ffc9 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc4:	3408      	adds	r4, #8
   d4bc6:	e7f8      	b.n	d4bba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4bc8:	6828      	ldr	r0, [r5, #0]
   d4bca:	f7ff fcbb 	bl	d4544 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4bce:	4628      	mov	r0, r5
   d4bd0:	bd70      	pop	{r4, r5, r6, pc}

000d4bd2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4bd2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4bd4:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d4bd6:	f104 0018 	add.w	r0, r4, #24
   d4bda:	f7ff ffe8 	bl	d4bae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4bde:	f104 000c 	add.w	r0, r4, #12
   d4be2:	f7ff ffd2 	bl	d4b8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d4be6:	4620      	mov	r0, r4
   d4be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4bec:	f7ff ba55 	b.w	d409a <_ZdlPv>

000d4bf0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bf2:	6804      	ldr	r4, [r0, #0]
   d4bf4:	4607      	mov	r7, r0
   d4bf6:	b1c4      	cbz	r4, d4c2a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d4bf8:	69a5      	ldr	r5, [r4, #24]
   d4bfa:	69e3      	ldr	r3, [r4, #28]
   d4bfc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4c00:	42ae      	cmp	r6, r5
   d4c02:	d004      	beq.n	d4c0e <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c04:	1d28      	adds	r0, r5, #4
   d4c06:	f7ff ffa6 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c0a:	3508      	adds	r5, #8
   d4c0c:	e7f8      	b.n	d4c00 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4c0e:	69a0      	ldr	r0, [r4, #24]
   d4c10:	f7ff fc98 	bl	d4544 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d4c14:	f104 000c 	add.w	r0, r4, #12
   d4c18:	f7ff ffc9 	bl	d4bae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f7ff ffb4 	bl	d4b8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c22:	2134      	movs	r1, #52	; 0x34
   d4c24:	4620      	mov	r0, r4
   d4c26:	f000 fe24 	bl	d5872 <_ZdlPvj>
   d4c2a:	4638      	mov	r0, r7
   d4c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4c30 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4c32:	2500      	movs	r5, #0
   d4c34:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4c36:	6045      	str	r5, [r0, #4]
   d4c38:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4c3a:	2024      	movs	r0, #36	; 0x24
   d4c3c:	f7ff fa2b 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4c40:	4604      	mov	r4, r0
   d4c42:	b178      	cbz	r0, d4c64 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4c44:	4603      	mov	r3, r0
   d4c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4c4a:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4c4e:	f8c0 5002 	str.w	r5, [r0, #2]
   d4c52:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4c54:	7285      	strb	r5, [r0, #10]
   d4c56:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4c58:	60c5      	str	r5, [r0, #12]
   d4c5a:	6105      	str	r5, [r0, #16]
   d4c5c:	6145      	str	r5, [r0, #20]
   d4c5e:	6185      	str	r5, [r0, #24]
   d4c60:	61c5      	str	r5, [r0, #28]
   d4c62:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4c64:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4c66:	2014      	movs	r0, #20
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	f7ff fa14 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4c6e:	4603      	mov	r3, r0
   d4c70:	b128      	cbz	r0, d4c7e <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4c72:	2201      	movs	r2, #1
   d4c74:	6042      	str	r2, [r0, #4]
   d4c76:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4c78:	4a08      	ldr	r2, [pc, #32]	; (d4c9c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d4c7a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4c7c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4c7e:	a802      	add	r0, sp, #8
   d4c80:	6872      	ldr	r2, [r6, #4]
   d4c82:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d4c86:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4c88:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4c8a:	f7ff ff64 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d4c8e:	6833      	ldr	r3, [r6, #0]
   d4c90:	b90b      	cbnz	r3, d4c96 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d4c92:	f7ff fd49 	bl	d4728 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d4c96:	4630      	mov	r0, r6
   d4c98:	b002      	add	sp, #8
   d4c9a:	bd70      	pop	{r4, r5, r6, pc}
   d4c9c:	000d5c70 	.word	0x000d5c70

000d4ca0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4ca0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4ca2:	b570      	push	{r4, r5, r6, lr}
   d4ca4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4ca6:	d91a      	bls.n	d4cde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d4ca8:	4290      	cmp	r0, r2
   d4caa:	d219      	bcs.n	d4ce0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d4cac:	f1a1 0608 	sub.w	r6, r1, #8
   d4cb0:	1a51      	subs	r1, r2, r1
   d4cb2:	3904      	subs	r1, #4
   d4cb4:	1f15      	subs	r5, r2, #4
   d4cb6:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d4cb8:	1f2b      	subs	r3, r5, #4
   d4cba:	429e      	cmp	r6, r3
   d4cbc:	d025      	beq.n	d4d0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d4cbe:	2c04      	cmp	r4, #4
   d4cc0:	d007      	beq.n	d4cd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cc2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d4cc6:	f844 3c04 	str.w	r3, [r4, #-4]
   d4cca:	4629      	mov	r1, r5
   d4ccc:	4620      	mov	r0, r4
   d4cce:	f7ff ff3b 	bl	d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cd2:	4628      	mov	r0, r5
   d4cd4:	f7ff ff3f 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cd8:	3d08      	subs	r5, #8
   d4cda:	3c08      	subs	r4, #8
   d4cdc:	e7ec      	b.n	d4cb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d4cde:	d014      	beq.n	d4d0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d4ce0:	1d0c      	adds	r4, r1, #4
   d4ce2:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d4ce4:	1f23      	subs	r3, r4, #4
   d4ce6:	429d      	cmp	r5, r3
   d4ce8:	d00f      	beq.n	d4d0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d4cea:	2e04      	cmp	r6, #4
   d4cec:	d007      	beq.n	d4cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d4cf2:	f846 3c04 	str.w	r3, [r6, #-4]
   d4cf6:	4621      	mov	r1, r4
   d4cf8:	4630      	mov	r0, r6
   d4cfa:	f7ff ff25 	bl	d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff29 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d04:	3408      	adds	r4, #8
   d4d06:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4d08:	e7ec      	b.n	d4ce4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d4d0a:	bd70      	pop	{r4, r5, r6, pc}

000d4d0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d4d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d4d10:	6804      	ldr	r4, [r0, #0]
   d4d12:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d4d14:	4605      	mov	r5, r0
   d4d16:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d4d18:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4d1c:	42a7      	cmp	r7, r4
   d4d1e:	d018      	beq.n	d4d52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d4d20:	4641      	mov	r1, r8
   d4d22:	4620      	mov	r0, r4
   d4d24:	f7ff fe2f 	bl	d4986 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d4d28:	4606      	mov	r6, r0
   d4d2a:	b908      	cbnz	r0, d4d30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4d2c:	3408      	adds	r4, #8
   d4d2e:	e7f5      	b.n	d4d1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4d30:	b18c      	cbz	r4, d4d56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d4d32:	1d20      	adds	r0, r4, #4
   d4d34:	f7ff ff0f 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4d38:	682b      	ldr	r3, [r5, #0]
   d4d3a:	686a      	ldr	r2, [r5, #4]
   d4d3c:	f104 0108 	add.w	r1, r4, #8
   d4d40:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4d44:	4620      	mov	r0, r4
   d4d46:	f7ff ffab 	bl	d4ca0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4d4a:	686b      	ldr	r3, [r5, #4]
   d4d4c:	3b01      	subs	r3, #1
   d4d4e:	606b      	str	r3, [r5, #4]
    return true;
   d4d50:	e002      	b.n	d4d58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d4d52:	2600      	movs	r6, #0
   d4d54:	e000      	b.n	d4d58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d4d56:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d4d58:	4630      	mov	r0, r6
   d4d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4d60:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d62:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d4d66:	6847      	ldr	r7, [r0, #4]
   d4d68:	9300      	str	r3, [sp, #0]
   d4d6a:	a801      	add	r0, sp, #4
   d4d6c:	f7ff feec 	bl	d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4d70:	6866      	ldr	r6, [r4, #4]
   d4d72:	68a3      	ldr	r3, [r4, #8]
   d4d74:	429e      	cmp	r6, r3
   d4d76:	db14      	blt.n	d4da2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d4d78:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4d7a:	2e00      	cmp	r6, #0
   d4d7c:	dd0b      	ble.n	d4d96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4d7e:	00f0      	lsls	r0, r6, #3
   d4d80:	f7ff fbd8 	bl	d4534 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4d84:	4605      	mov	r5, r0
   d4d86:	b318      	cbz	r0, d4dd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d4d88:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4d8c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4d90:	f7ff ff86 	bl	d4ca0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4d94:	e000      	b.n	d4d98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4d96:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4d98:	6820      	ldr	r0, [r4, #0]
   d4d9a:	f7ff fbd3 	bl	d4544 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4d9e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4da0:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4da2:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4da4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4da6:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d4daa:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d4dae:	4629      	mov	r1, r5
   d4db0:	f105 0008 	add.w	r0, r5, #8
   d4db4:	f7ff ff74 	bl	d4ca0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4db8:	b135      	cbz	r5, d4dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d4dba:	9b00      	ldr	r3, [sp, #0]
   d4dbc:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d4dc0:	a901      	add	r1, sp, #4
   d4dc2:	1d28      	adds	r0, r5, #4
   d4dc4:	f7ff fec0 	bl	d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d4dc8:	6863      	ldr	r3, [r4, #4]
   d4dca:	3301      	adds	r3, #1
   d4dcc:	6063      	str	r3, [r4, #4]
   d4dce:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dd0:	a801      	add	r0, sp, #4
   d4dd2:	f7ff fec0 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4dd6:	4628      	mov	r0, r5
   d4dd8:	b003      	add	sp, #12
   d4dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ddc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4de0:	4604      	mov	r4, r0
   d4de2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4de4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4de6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4de8:	f7ff fcb8 	bl	d475c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d4dec:	6823      	ldr	r3, [r4, #0]
   d4dee:	2b03      	cmp	r3, #3
   d4df0:	d002      	beq.n	d4df8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d4df2:	2b04      	cmp	r3, #4
   d4df4:	d042      	beq.n	d4e7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d4df6:	e087      	b.n	d4f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d4df8:	a804      	add	r0, sp, #16
   d4dfa:	f7ff ff19 	bl	d4c30 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d4dfe:	9b04      	ldr	r3, [sp, #16]
   d4e00:	8922      	ldrh	r2, [r4, #8]
   d4e02:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4e04:	6862      	ldr	r2, [r4, #4]
   d4e06:	9904      	ldr	r1, [sp, #16]
   d4e08:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d4e0c:	f8c1 3002 	str.w	r3, [r1, #2]
   d4e10:	6853      	ldr	r3, [r2, #4]
   d4e12:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e16:	a807      	add	r0, sp, #28
   d4e18:	9b04      	ldr	r3, [sp, #16]
   d4e1a:	9306      	str	r3, [sp, #24]
   d4e1c:	a905      	add	r1, sp, #20
   d4e1e:	f7ff fe93 	bl	d4b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d4e22:	a906      	add	r1, sp, #24
   d4e24:	f105 0018 	add.w	r0, r5, #24
   d4e28:	f7ff ff99 	bl	d4d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d4e2c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e2e:	a807      	add	r0, sp, #28
   d4e30:	f7ff fe91 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e34:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d4e36:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d4e38:	b974      	cbnz	r4, d4e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d4e3a:	4b36      	ldr	r3, [pc, #216]	; (d4f14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d4e3c:	9300      	str	r3, [sp, #0]
   d4e3e:	aa06      	add	r2, sp, #24
   d4e40:	4623      	mov	r3, r4
   d4e42:	4935      	ldr	r1, [pc, #212]	; (d4f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4e44:	9407      	str	r4, [sp, #28]
   d4e46:	2032      	movs	r0, #50	; 0x32
   d4e48:	f7ff faf8 	bl	d443c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d4e4c:	9b04      	ldr	r3, [sp, #16]
   d4e4e:	4621      	mov	r1, r4
   d4e50:	8818      	ldrh	r0, [r3, #0]
   d4e52:	f7ff fa07 	bl	d4264 <hal_ble_gap_disconnect>
   d4e56:	e00d      	b.n	d4e74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d4e58:	4a30      	ldr	r2, [pc, #192]	; (d4f1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d4e5a:	9200      	str	r2, [sp, #0]
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	aa06      	add	r2, sp, #24
   d4e60:	492d      	ldr	r1, [pc, #180]	; (d4f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4e62:	9307      	str	r3, [sp, #28]
   d4e64:	2001      	movs	r0, #1
   d4e66:	f7ff fae9 	bl	d443c <log_message>
                if (impl->connectedCb_) {
   d4e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d4e6c:	b113      	cbz	r3, d4e74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d4e6e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d4e70:	a804      	add	r0, sp, #16
   d4e72:	4798      	blx	r3
   d4e74:	a805      	add	r0, sp, #20
   d4e76:	f7ff fe6e 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e7a:	e045      	b.n	d4f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d4e7c:	8921      	ldrh	r1, [r4, #8]
   d4e7e:	4628      	mov	r0, r5
   d4e80:	f7ff fd68 	bl	d4954 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d4e84:	4607      	mov	r7, r0
   d4e86:	2800      	cmp	r0, #0
   d4e88:	d03e      	beq.n	d4f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d4e8a:	6804      	ldr	r4, [r0, #0]
   d4e8c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4e8e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d4e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e94:	8022      	strh	r2, [r4, #0]
   d4e96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d4e9a:	4299      	cmp	r1, r3
   d4e9c:	d003      	beq.n	d4ea6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d4e9e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d4ea2:	8042      	strh	r2, [r0, #2]
   d4ea4:	e7f9      	b.n	d4e9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d4ea6:	68e6      	ldr	r6, [r4, #12]
   d4ea8:	6923      	ldr	r3, [r4, #16]
   d4eaa:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4eae:	45b0      	cmp	r8, r6
   d4eb0:	d004      	beq.n	d4ebc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d4eb2:	1d30      	adds	r0, r6, #4
   d4eb4:	f7ff fe4f 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eb8:	3608      	adds	r6, #8
   d4eba:	e7f8      	b.n	d4eae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d4ec0:	69a6      	ldr	r6, [r4, #24]
   d4ec2:	69e3      	ldr	r3, [r4, #28]
   d4ec4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4ec8:	45b0      	cmp	r8, r6
   d4eca:	d004      	beq.n	d4ed6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d4ecc:	1d30      	adds	r0, r6, #4
   d4ece:	f7ff fe42 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ed2:	3608      	adds	r6, #8
   d4ed4:	e7f8      	b.n	d4ec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4ed6:	2300      	movs	r3, #0
   d4ed8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d4eda:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d4edc:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d4ede:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d4ee0:	b113      	cbz	r3, d4ee8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d4ee2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d4ee4:	4638      	mov	r0, r7
   d4ee6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d4ee8:	2320      	movs	r3, #32
   d4eea:	4a0d      	ldr	r2, [pc, #52]	; (d4f20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d4eec:	9306      	str	r3, [sp, #24]
   d4eee:	9200      	str	r2, [sp, #0]
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	4909      	ldr	r1, [pc, #36]	; (d4f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d4ef4:	9307      	str	r3, [sp, #28]
   d4ef6:	2001      	movs	r0, #1
   d4ef8:	aa06      	add	r2, sp, #24
   d4efa:	f7ff fa9f 	bl	d443c <log_message>
                    impl->peers_.removeOne(*peer);
   d4efe:	4639      	mov	r1, r7
   d4f00:	f105 0018 	add.w	r0, r5, #24
   d4f04:	f7ff ff02 	bl	d4d0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4f08:	a803      	add	r0, sp, #12
   d4f0a:	f7ff fc35 	bl	d4778 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d4f0e:	b00e      	add	sp, #56	; 0x38
   d4f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f14:	000d5ce6 	.word	0x000d5ce6
   d4f18:	000d5c84 	.word	0x000d5c84
   d4f1c:	000d5d0c 	.word	0x000d5d0c
   d4f20:	000d5d29 	.word	0x000d5d29

000d4f24 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d4f24:	b510      	push	{r4, lr}
   d4f26:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d4f28:	6840      	ldr	r0, [r0, #4]
   d4f2a:	b108      	cbz	r0, d4f30 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4f2c:	f7ff f8b5 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d4f30:	4620      	mov	r0, r4
   d4f32:	bd10      	pop	{r4, pc}

000d4f34 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4f34:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4f36:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d4f38:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d4f3a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d4f3e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d4f42:	f7ff fb77 	bl	d4634 <_ZN6StringD1Ev>
   d4f46:	4668      	mov	r0, sp
   d4f48:	f7ff ffec 	bl	d4f24 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4f4c:	b003      	add	sp, #12
   d4f4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4f54:	b538      	push	{r3, r4, r5, lr}
   d4f56:	2300      	movs	r3, #0
   d4f58:	4604      	mov	r4, r0
   d4f5a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4f5c:	2014      	movs	r0, #20
   d4f5e:	460d      	mov	r5, r1
   d4f60:	f7ff f899 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4f64:	b128      	cbz	r0, d4f72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4f66:	2301      	movs	r3, #1
   d4f68:	6043      	str	r3, [r0, #4]
   d4f6a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4f6c:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d4f6e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4f70:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d4f72:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d4f74:	4620      	mov	r0, r4
   d4f76:	bd38      	pop	{r3, r4, r5, pc}
   d4f78:	000d5c54 	.word	0x000d5c54

000d4f7c <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d4f7c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4f7e:	2500      	movs	r5, #0
   d4f80:	b086      	sub	sp, #24
   d4f82:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4f84:	6045      	str	r5, [r0, #4]
   d4f86:	4604      	mov	r4, r0
   d4f88:	2054      	movs	r0, #84	; 0x54
   d4f8a:	f7ff f884 	bl	d4096 <_Znwj>
   d4f8e:	f8cd d010 	str.w	sp, [sp, #16]
   d4f92:	4606      	mov	r6, r0
   d4f94:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4f96:	b108      	cbz	r0, d4f9c <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d4f98:	f7ff fcbc 	bl	d4914 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4f9c:	4631      	mov	r1, r6
   d4f9e:	ab01      	add	r3, sp, #4
   d4fa0:	aa02      	add	r2, sp, #8
   d4fa2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d4fa4:	9505      	str	r5, [sp, #20]
   d4fa6:	f7ff ffd5 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4faa:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d4fac:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4fae:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4fb0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4fb2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4fb4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4fb6:	f7ff fdce 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d4fba:	a804      	add	r0, sp, #16
   d4fbc:	f7ff ffb2 	bl	d4f24 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d4fc0:	6823      	ldr	r3, [r4, #0]
   d4fc2:	b90b      	cbnz	r3, d4fc8 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d4fc4:	f7ff fbb0 	bl	d4728 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d4fc8:	4620      	mov	r0, r4
   d4fca:	b006      	add	sp, #24
   d4fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4fd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4fd0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fd2:	4c06      	ldr	r4, [pc, #24]	; (d4fec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4fd4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4fd6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fd8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4fda:	f7ff f96f 	bl	d42bc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fde:	4620      	mov	r0, r4
   d4fe0:	4a03      	ldr	r2, [pc, #12]	; (d4ff0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4fe2:	4904      	ldr	r1, [pc, #16]	; (d4ff4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fe8:	f000 bc3e 	b.w	d5868 <__aeabi_atexit>
   d4fec:	2003e40c 	.word	0x2003e40c
   d4ff0:	2003da04 	.word	0x2003da04
   d4ff4:	000d4719 	.word	0x000d4719

000d4ff8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ffa:	4606      	mov	r6, r0
   d4ffc:	460d      	mov	r5, r1
   d4ffe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5000:	2400      	movs	r4, #0
  while (size--) {
   d5002:	42bd      	cmp	r5, r7
   d5004:	d00c      	beq.n	d5020 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5006:	6833      	ldr	r3, [r6, #0]
   d5008:	f815 1b01 	ldrb.w	r1, [r5], #1
   d500c:	689b      	ldr	r3, [r3, #8]
   d500e:	4630      	mov	r0, r6
   d5010:	4798      	blx	r3
     if (chunk>=0)
   d5012:	2800      	cmp	r0, #0
   d5014:	db01      	blt.n	d501a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5016:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5018:	e7f3      	b.n	d5002 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d501a:	2c00      	cmp	r4, #0
   d501c:	bf08      	it	eq
   d501e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5020:	4620      	mov	r0, r4
   d5022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5024 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5024:	b570      	push	{r4, r5, r6, lr}
   d5026:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5028:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d502a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d502c:	b149      	cbz	r1, d5042 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d502e:	f000 fddf 	bl	d5bf0 <strlen>
   d5032:	682b      	ldr	r3, [r5, #0]
   d5034:	4602      	mov	r2, r0
   d5036:	4621      	mov	r1, r4
   d5038:	4628      	mov	r0, r5
   d503a:	68db      	ldr	r3, [r3, #12]
    }
   d503c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5040:	4718      	bx	r3
    }
   d5042:	bd70      	pop	{r4, r5, r6, pc}

000d5044 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5044:	6803      	ldr	r3, [r0, #0]
   d5046:	689b      	ldr	r3, [r3, #8]
   d5048:	4718      	bx	r3

000d504a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d504a:	b530      	push	{r4, r5, lr}
   d504c:	b08b      	sub	sp, #44	; 0x2c
   d504e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5050:	2100      	movs	r1, #0
   d5052:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5056:	2a01      	cmp	r2, #1
   d5058:	bf98      	it	ls
   d505a:	220a      	movls	r2, #10
   d505c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5060:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5064:	fb05 3312 	mls	r3, r5, r2, r3
   d5068:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d506c:	2b09      	cmp	r3, #9
   d506e:	bf94      	ite	ls
   d5070:	3330      	addls	r3, #48	; 0x30
   d5072:	3337      	addhi	r3, #55	; 0x37
   d5074:	b2db      	uxtb	r3, r3
   d5076:	4621      	mov	r1, r4
   d5078:	f804 3901 	strb.w	r3, [r4], #-1
   d507c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d507e:	2d00      	cmp	r5, #0
   d5080:	d1ee      	bne.n	d5060 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5082:	f7ff ffcf 	bl	d5024 <_ZN5Print5writeEPKc>
}
   d5086:	b00b      	add	sp, #44	; 0x2c
   d5088:	bd30      	pop	{r4, r5, pc}
	...

000d508c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d508c:	4b01      	ldr	r3, [pc, #4]	; (d5094 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d508e:	4a02      	ldr	r2, [pc, #8]	; (d5098 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5090:	601a      	str	r2, [r3, #0]
   d5092:	4770      	bx	lr
   d5094:	2003e410 	.word	0x2003e410
   d5098:	000d5ea7 	.word	0x000d5ea7

000d509c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d509c:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d509e:	681a      	ldr	r2, [r3, #0]
   d50a0:	4b02      	ldr	r3, [pc, #8]	; (d50ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d50a2:	601a      	str	r2, [r3, #0]
   d50a4:	4770      	bx	lr
   d50a6:	bf00      	nop
   d50a8:	2003d99c 	.word	0x2003d99c
   d50ac:	2003e414 	.word	0x2003e414

000d50b0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d50b2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50b4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d50b6:	b113      	cbz	r3, d50be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50b8:	2203      	movs	r2, #3
   d50ba:	4601      	mov	r1, r0
   d50bc:	4798      	blx	r3
    }
   d50be:	4620      	mov	r0, r4
   d50c0:	bd10      	pop	{r4, pc}

000d50c2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50c2:	b510      	push	{r4, lr}
   d50c4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50c6:	f7ff fff3 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
   d50ca:	4620      	mov	r0, r4
   d50cc:	bd10      	pop	{r4, pc}

000d50ce <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d50ce:	b510      	push	{r4, lr}
   d50d0:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d50d2:	f7ff f99b 	bl	d440c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d50d6:	4284      	cmp	r4, r0
   d50d8:	d008      	beq.n	d50ec <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d50da:	b11c      	cbz	r4, d50e4 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d50dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d50e0:	f7ff b984 	b.w	d43ec <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d50e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d50e8:	f7ff b988 	b.w	d43fc <LED_Signaling_Stop>
   d50ec:	bd10      	pop	{r4, pc}

000d50ee <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d50ee:	b570      	push	{r4, r5, r6, lr}
   d50f0:	4605      	mov	r5, r0
   d50f2:	460e      	mov	r6, r1
   d50f4:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d50f6:	f7ff f989 	bl	d440c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d50fa:	b150      	cbz	r0, d5112 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d50fc:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5100:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5104:	f7ff f96a 	bl	d43dc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d5108:	20e7      	movs	r0, #231	; 0xe7
}
   d510a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d510e:	f7ff b985 	b.w	d441c <LED_On>
   d5112:	bd70      	pop	{r4, r5, r6, pc}

000d5114 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5114:	4803      	ldr	r0, [pc, #12]	; (d5124 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5116:	4a04      	ldr	r2, [pc, #16]	; (d5128 <_GLOBAL__sub_I_RGB+0x14>)
   d5118:	4904      	ldr	r1, [pc, #16]	; (d512c <_GLOBAL__sub_I_RGB+0x18>)
   d511a:	2300      	movs	r3, #0
   d511c:	6083      	str	r3, [r0, #8]
   d511e:	f000 bba3 	b.w	d5868 <__aeabi_atexit>
   d5122:	bf00      	nop
   d5124:	2003e418 	.word	0x2003e418
   d5128:	2003da04 	.word	0x2003da04
   d512c:	000d50c3 	.word	0x000d50c3

000d5130 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5130:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5132:	4b0c      	ldr	r3, [pc, #48]	; (d5164 <serialEventRun+0x34>)
   d5134:	b133      	cbz	r3, d5144 <serialEventRun+0x14>
   d5136:	f000 f953 	bl	d53e0 <_Z16_fetch_usbserialv>
   d513a:	6803      	ldr	r3, [r0, #0]
   d513c:	691b      	ldr	r3, [r3, #16]
   d513e:	4798      	blx	r3
   d5140:	2800      	cmp	r0, #0
   d5142:	dc09      	bgt.n	d5158 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5144:	4b08      	ldr	r3, [pc, #32]	; (d5168 <serialEventRun+0x38>)
   d5146:	b163      	cbz	r3, d5162 <serialEventRun+0x32>
   d5148:	f000 f9c8 	bl	d54dc <_Z22__fetch_global_Serial1v>
   d514c:	6803      	ldr	r3, [r0, #0]
   d514e:	691b      	ldr	r3, [r3, #16]
   d5150:	4798      	blx	r3
   d5152:	2800      	cmp	r0, #0
   d5154:	dc03      	bgt.n	d515e <serialEventRun+0x2e>
   d5156:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5158:	f3af 8000 	nop.w
   d515c:	e7f2      	b.n	d5144 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d515e:	f3af 8000 	nop.w
   d5162:	bd08      	pop	{r3, pc}
	...

000d516c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d516c:	b508      	push	{r3, lr}
	serialEventRun();
   d516e:	f7ff ffdf 	bl	d5130 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5172:	f7ff f83f 	bl	d41f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5176:	4b01      	ldr	r3, [pc, #4]	; (d517c <_post_loop+0x10>)
   d5178:	6018      	str	r0, [r3, #0]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	2003e74c 	.word	0x2003e74c

000d5180 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5180:	4802      	ldr	r0, [pc, #8]	; (d518c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5182:	4a03      	ldr	r2, [pc, #12]	; (d5190 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5184:	4903      	ldr	r1, [pc, #12]	; (d5194 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5186:	1a12      	subs	r2, r2, r0
   d5188:	f000 bcdb 	b.w	d5b42 <memcpy>
   d518c:	2003f400 	.word	0x2003f400
   d5190:	2003f404 	.word	0x2003f404
   d5194:	000d60f0 	.word	0x000d60f0

000d5198 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5198:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d519a:	2300      	movs	r3, #0
   d519c:	9300      	str	r3, [sp, #0]
   d519e:	461a      	mov	r2, r3
   d51a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51a4:	f7ff f964 	bl	d4470 <system_ctrl_set_result>
}
   d51a8:	b003      	add	sp, #12
   d51aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d51b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d51b2:	8843      	ldrh	r3, [r0, #2]
   d51b4:	2b0a      	cmp	r3, #10
   d51b6:	d008      	beq.n	d51ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51b8:	2b50      	cmp	r3, #80	; 0x50
   d51ba:	d109      	bne.n	d51d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d51bc:	4b09      	ldr	r3, [pc, #36]	; (d51e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51be:	681b      	ldr	r3, [r3, #0]
   d51c0:	b13b      	cbz	r3, d51d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d51c2:	b003      	add	sp, #12
   d51c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d51c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d51ca:	f7ff ffe5 	bl	d5198 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d51ce:	e006      	b.n	d51de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51d0:	2300      	movs	r3, #0
   d51d2:	9300      	str	r3, [sp, #0]
   d51d4:	461a      	mov	r2, r3
   d51d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51da:	f7ff f949 	bl	d4470 <system_ctrl_set_result>
        break;
    }
}
   d51de:	b003      	add	sp, #12
   d51e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d51e4:	2003e428 	.word	0x2003e428

000d51e8 <module_user_init_hook>:

void module_user_init_hook()
{
   d51e8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d51ea:	4c10      	ldr	r4, [pc, #64]	; (d522c <module_user_init_hook+0x44>)
   d51ec:	4d10      	ldr	r5, [pc, #64]	; (d5230 <module_user_init_hook+0x48>)
   d51ee:	6823      	ldr	r3, [r4, #0]
   d51f0:	42ab      	cmp	r3, r5
   d51f2:	4b10      	ldr	r3, [pc, #64]	; (d5234 <module_user_init_hook+0x4c>)
   d51f4:	bf0c      	ite	eq
   d51f6:	2201      	moveq	r2, #1
   d51f8:	2200      	movne	r2, #0
   d51fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d51fc:	d002      	beq.n	d5204 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d51fe:	f7ff ffbf 	bl	d5180 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5202:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5204:	f7fe ffe6 	bl	d41d4 <HAL_RNG_GetRandomNumber>
   d5208:	4604      	mov	r4, r0
    srand(seed);
   d520a:	f000 fcc9 	bl	d5ba0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d520e:	4b0a      	ldr	r3, [pc, #40]	; (d5238 <module_user_init_hook+0x50>)
   d5210:	b113      	cbz	r3, d5218 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5212:	4620      	mov	r0, r4
   d5214:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5218:	2100      	movs	r1, #0
   d521a:	4807      	ldr	r0, [pc, #28]	; (d5238 <module_user_init_hook+0x50>)
   d521c:	f7ff f982 	bl	d4524 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5220:	2100      	movs	r1, #0
   d5222:	4806      	ldr	r0, [pc, #24]	; (d523c <module_user_init_hook+0x54>)
}
   d5224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5228:	f7ff b918 	b.w	d445c <system_ctrl_set_app_request_handler>
   d522c:	2003f400 	.word	0x2003f400
   d5230:	9a271c1e 	.word	0x9a271c1e
   d5234:	2003e42c 	.word	0x2003e42c
   d5238:	00000000 	.word	0x00000000
   d523c:	000d51b1 	.word	0x000d51b1

000d5240 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5240:	4770      	bx	lr

000d5242 <_ZN9IPAddressD0Ev>:
   d5242:	b510      	push	{r4, lr}
   d5244:	2118      	movs	r1, #24
   d5246:	4604      	mov	r4, r0
   d5248:	f000 fb13 	bl	d5872 <_ZdlPvj>
   d524c:	4620      	mov	r0, r4
   d524e:	bd10      	pop	{r4, pc}

000d5250 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5250:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5252:	7d03      	ldrb	r3, [r0, #20]
   d5254:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5256:	b08d      	sub	sp, #52	; 0x34
   d5258:	460e      	mov	r6, r1
   d525a:	f100 0704 	add.w	r7, r0, #4
   d525e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5262:	d002      	beq.n	d526a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5264:	f100 0508 	add.w	r5, r0, #8
   d5268:	e018      	b.n	d529c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d526a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d526c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d526e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5272:	232f      	movs	r3, #47	; 0x2f
   d5274:	462a      	mov	r2, r5
   d5276:	200a      	movs	r0, #10
   d5278:	f7ff f840 	bl	d42fc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d527c:	4628      	mov	r0, r5
   d527e:	f000 fcb7 	bl	d5bf0 <strlen>
   d5282:	6833      	ldr	r3, [r6, #0]
   d5284:	4602      	mov	r2, r0
   d5286:	68db      	ldr	r3, [r3, #12]
   d5288:	4629      	mov	r1, r5
   d528a:	4630      	mov	r0, r6
   d528c:	4798      	blx	r3
   d528e:	e00f      	b.n	d52b0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5290:	b124      	cbz	r4, d529c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5292:	212e      	movs	r1, #46	; 0x2e
   d5294:	4630      	mov	r0, r6
   d5296:	f7ff fed5 	bl	d5044 <_ZN5Print5printEc>
   d529a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d529c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d52a0:	220a      	movs	r2, #10
   d52a2:	4630      	mov	r0, r6
   d52a4:	f7ff fed1 	bl	d504a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52a8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52aa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52ac:	d1f0      	bne.n	d5290 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52ae:	4620      	mov	r0, r4
    }
    return n;
}
   d52b0:	b00d      	add	sp, #52	; 0x34
   d52b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52b4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d52b4:	b510      	push	{r4, lr}
   d52b6:	4b05      	ldr	r3, [pc, #20]	; (d52cc <_ZN9IPAddressC1Ev+0x18>)
   d52b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d52ba:	2211      	movs	r2, #17
   d52bc:	f840 3b04 	str.w	r3, [r0], #4
   d52c0:	2100      	movs	r1, #0
   d52c2:	f000 fc64 	bl	d5b8e <memset>
{
    clear();
}
   d52c6:	4620      	mov	r0, r4
   d52c8:	bd10      	pop	{r4, pc}
   d52ca:	bf00      	nop
   d52cc:	000d5f48 	.word	0x000d5f48

000d52d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d52d0:	4603      	mov	r3, r0
   d52d2:	4a07      	ldr	r2, [pc, #28]	; (d52f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52d4:	b510      	push	{r4, lr}
   d52d6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52da:	f101 0210 	add.w	r2, r1, #16
   d52de:	f851 4b04 	ldr.w	r4, [r1], #4
   d52e2:	f843 4b04 	str.w	r4, [r3], #4
   d52e6:	4291      	cmp	r1, r2
   d52e8:	d1f9      	bne.n	d52de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52ea:	780a      	ldrb	r2, [r1, #0]
   d52ec:	701a      	strb	r2, [r3, #0]
}
   d52ee:	bd10      	pop	{r4, pc}
   d52f0:	000d5f48 	.word	0x000d5f48

000d52f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5302:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5306:	2304      	movs	r3, #4
   d5308:	6041      	str	r1, [r0, #4]
   d530a:	7503      	strb	r3, [r0, #20]
   d530c:	bd10      	pop	{r4, pc}

000d530e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d530e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5310:	780d      	ldrb	r5, [r1, #0]
   d5312:	788b      	ldrb	r3, [r1, #2]
   d5314:	784a      	ldrb	r2, [r1, #1]
   d5316:	78c9      	ldrb	r1, [r1, #3]
   d5318:	9100      	str	r1, [sp, #0]
   d531a:	4629      	mov	r1, r5
   d531c:	f7ff ffea 	bl	d52f4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5320:	b003      	add	sp, #12
   d5322:	bd30      	pop	{r4, r5, pc}

000d5324 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5324:	7441      	strb	r1, [r0, #17]
   d5326:	4770      	bx	lr

000d5328 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5328:	4770      	bx	lr

000d532a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d532a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d532c:	2100      	movs	r1, #0
   d532e:	7c00      	ldrb	r0, [r0, #16]
   d5330:	f7ff f83c 	bl	d43ac <HAL_USB_USART_Receive_Data>
}
   d5334:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5338:	bf28      	it	cs
   d533a:	f04f 30ff 	movcs.w	r0, #4294967295
   d533e:	bd08      	pop	{r3, pc}

000d5340 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5340:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5342:	2101      	movs	r1, #1
   d5344:	7c00      	ldrb	r0, [r0, #16]
   d5346:	f7ff f831 	bl	d43ac <HAL_USB_USART_Receive_Data>
}
   d534a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d534e:	bf28      	it	cs
   d5350:	f04f 30ff 	movcs.w	r0, #4294967295
   d5354:	bd08      	pop	{r3, pc}

000d5356 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5356:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5358:	7c00      	ldrb	r0, [r0, #16]
   d535a:	f7ff f81f 	bl	d439c <HAL_USB_USART_Available_Data_For_Write>
}
   d535e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5362:	bd08      	pop	{r3, pc}

000d5364 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5364:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5366:	7c00      	ldrb	r0, [r0, #16]
   d5368:	f7ff f810 	bl	d438c <HAL_USB_USART_Available_Data>
}
   d536c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5370:	bd08      	pop	{r3, pc}

000d5372 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5372:	7c00      	ldrb	r0, [r0, #16]
   d5374:	f7ff b82a 	b.w	d43cc <HAL_USB_USART_Flush_Data>

000d5378 <_ZN9USBSerialD0Ev>:
   d5378:	b510      	push	{r4, lr}
   d537a:	2114      	movs	r1, #20
   d537c:	4604      	mov	r4, r0
   d537e:	f000 fa78 	bl	d5872 <_ZdlPvj>
   d5382:	4620      	mov	r0, r4
   d5384:	bd10      	pop	{r4, pc}

000d5386 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5386:	b538      	push	{r3, r4, r5, lr}
   d5388:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d538a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d538c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d538e:	f7ff f805 	bl	d439c <HAL_USB_USART_Available_Data_For_Write>
   d5392:	2800      	cmp	r0, #0
   d5394:	dc01      	bgt.n	d539a <_ZN9USBSerial5writeEh+0x14>
   d5396:	7c60      	ldrb	r0, [r4, #17]
   d5398:	b128      	cbz	r0, d53a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d539a:	4629      	mov	r1, r5
   d539c:	7c20      	ldrb	r0, [r4, #16]
   d539e:	f7ff f80d 	bl	d43bc <HAL_USB_USART_Send_Data>
   d53a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d53a6:	bd38      	pop	{r3, r4, r5, pc}

000d53a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53a8:	b510      	push	{r4, lr}
   d53aa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53ac:	2300      	movs	r3, #0
   d53ae:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d53b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53b4:	60a3      	str	r3, [r4, #8]
   d53b6:	4b05      	ldr	r3, [pc, #20]	; (d53cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d53b8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d53ba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53bc:	4608      	mov	r0, r1
{
  _serial = serial;
   d53be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d53c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d53c2:	4611      	mov	r1, r2
   d53c4:	f7fe ffda 	bl	d437c <HAL_USB_USART_Init>
}
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd10      	pop	{r4, pc}
   d53cc:	000d5f5c 	.word	0x000d5f5c

000d53d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53d2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53d6:	2100      	movs	r1, #0
   d53d8:	f000 fbd9 	bl	d5b8e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53e2:	4d0e      	ldr	r5, [pc, #56]	; (d541c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53e6:	a801      	add	r0, sp, #4
   d53e8:	f7ff fff2 	bl	d53d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53ec:	6829      	ldr	r1, [r5, #0]
   d53ee:	f011 0401 	ands.w	r4, r1, #1
   d53f2:	d110      	bne.n	d5416 <_Z16_fetch_usbserialv+0x36>
   d53f4:	4628      	mov	r0, r5
   d53f6:	f7fe fe54 	bl	d40a2 <__cxa_guard_acquire>
   d53fa:	b160      	cbz	r0, d5416 <_Z16_fetch_usbserialv+0x36>
   d53fc:	aa01      	add	r2, sp, #4
   d53fe:	4621      	mov	r1, r4
   d5400:	4807      	ldr	r0, [pc, #28]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5402:	f7ff ffd1 	bl	d53a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5406:	4628      	mov	r0, r5
   d5408:	f7fe fe50 	bl	d40ac <__cxa_guard_release>
   d540c:	4a05      	ldr	r2, [pc, #20]	; (d5424 <_Z16_fetch_usbserialv+0x44>)
   d540e:	4906      	ldr	r1, [pc, #24]	; (d5428 <_Z16_fetch_usbserialv+0x48>)
   d5410:	4803      	ldr	r0, [pc, #12]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5412:	f000 fa29 	bl	d5868 <__aeabi_atexit>
	return _usbserial;
}
   d5416:	4802      	ldr	r0, [pc, #8]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5418:	b007      	add	sp, #28
   d541a:	bd30      	pop	{r4, r5, pc}
   d541c:	2003e430 	.word	0x2003e430
   d5420:	2003e434 	.word	0x2003e434
   d5424:	2003da04 	.word	0x2003da04
   d5428:	000d5329 	.word	0x000d5329

000d542c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d542c:	4770      	bx	lr

000d542e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d542e:	7441      	strb	r1, [r0, #17]
   d5430:	4770      	bx	lr

000d5432 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5432:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7fe ff99 	bl	d436c <HAL_USART_Available_Data_For_Write>
}
   d543a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d543e:	bd08      	pop	{r3, pc}

000d5440 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5440:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5442:	7c00      	ldrb	r0, [r0, #16]
   d5444:	f7fe ff72 	bl	d432c <HAL_USART_Available_Data>
}
   d5448:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d544c:	bd08      	pop	{r3, pc}

000d544e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d544e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5450:	7c00      	ldrb	r0, [r0, #16]
   d5452:	f7fe ff7b 	bl	d434c <HAL_USART_Peek_Data>
}
   d5456:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d545a:	bf28      	it	cs
   d545c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5460:	bd08      	pop	{r3, pc}

000d5462 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5462:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5464:	7c00      	ldrb	r0, [r0, #16]
   d5466:	f7fe ff69 	bl	d433c <HAL_USART_Read_Data>
}
   d546a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d546e:	bf28      	it	cs
   d5470:	f04f 30ff 	movcs.w	r0, #4294967295
   d5474:	bd08      	pop	{r3, pc}

000d5476 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	f7fe bf70 	b.w	d435c <HAL_USART_Flush_Data>

000d547c <_ZN11USARTSerialD0Ev>:
   d547c:	b510      	push	{r4, lr}
   d547e:	2114      	movs	r1, #20
   d5480:	4604      	mov	r4, r0
   d5482:	f000 f9f6 	bl	d5872 <_ZdlPvj>
   d5486:	4620      	mov	r0, r4
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d548a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d548c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d548e:	4604      	mov	r4, r0
   d5490:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5492:	b925      	cbnz	r5, d549e <_ZN11USARTSerial5writeEh+0x14>
   d5494:	7c00      	ldrb	r0, [r0, #16]
   d5496:	f7fe ff69 	bl	d436c <HAL_USART_Available_Data_For_Write>
   d549a:	2800      	cmp	r0, #0
   d549c:	dd05      	ble.n	d54aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d549e:	4631      	mov	r1, r6
   d54a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54a6:	f7fe bf39 	b.w	d431c <HAL_USART_Write_Data>
  }
  return 0;
}
   d54aa:	4628      	mov	r0, r5
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54b0:	b510      	push	{r4, lr}
   d54b2:	4604      	mov	r4, r0
   d54b4:	4608      	mov	r0, r1
   d54b6:	4611      	mov	r1, r2
   d54b8:	2200      	movs	r2, #0
   d54ba:	6062      	str	r2, [r4, #4]
   d54bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54c0:	60a2      	str	r2, [r4, #8]
   d54c2:	4a05      	ldr	r2, [pc, #20]	; (d54d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54cc:	461a      	mov	r2, r3
   d54ce:	f7fe ff1d 	bl	d430c <HAL_USART_Init>
}
   d54d2:	4620      	mov	r0, r4
   d54d4:	bd10      	pop	{r4, pc}
   d54d6:	bf00      	nop
   d54d8:	000d5f8c 	.word	0x000d5f8c

000d54dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54de:	4d0c      	ldr	r5, [pc, #48]	; (d5510 <_Z22__fetch_global_Serial1v+0x34>)
   d54e0:	6829      	ldr	r1, [r5, #0]
   d54e2:	f011 0401 	ands.w	r4, r1, #1
   d54e6:	d111      	bne.n	d550c <_Z22__fetch_global_Serial1v+0x30>
   d54e8:	4628      	mov	r0, r5
   d54ea:	f7fe fdda 	bl	d40a2 <__cxa_guard_acquire>
   d54ee:	b168      	cbz	r0, d550c <_Z22__fetch_global_Serial1v+0x30>
   d54f0:	4a08      	ldr	r2, [pc, #32]	; (d5514 <_Z22__fetch_global_Serial1v+0x38>)
   d54f2:	4b09      	ldr	r3, [pc, #36]	; (d5518 <_Z22__fetch_global_Serial1v+0x3c>)
   d54f4:	4809      	ldr	r0, [pc, #36]	; (d551c <_Z22__fetch_global_Serial1v+0x40>)
   d54f6:	4621      	mov	r1, r4
   d54f8:	f7ff ffda 	bl	d54b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d54fc:	4628      	mov	r0, r5
   d54fe:	f7fe fdd5 	bl	d40ac <__cxa_guard_release>
   d5502:	4a07      	ldr	r2, [pc, #28]	; (d5520 <_Z22__fetch_global_Serial1v+0x44>)
   d5504:	4907      	ldr	r1, [pc, #28]	; (d5524 <_Z22__fetch_global_Serial1v+0x48>)
   d5506:	4805      	ldr	r0, [pc, #20]	; (d551c <_Z22__fetch_global_Serial1v+0x40>)
   d5508:	f000 f9ae 	bl	d5868 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d550c:	4803      	ldr	r0, [pc, #12]	; (d551c <_Z22__fetch_global_Serial1v+0x40>)
   d550e:	bd38      	pop	{r3, r4, r5, pc}
   d5510:	2003e4e0 	.word	0x2003e4e0
   d5514:	2003e4e4 	.word	0x2003e4e4
   d5518:	2003e45c 	.word	0x2003e45c
   d551c:	2003e448 	.word	0x2003e448
   d5520:	2003da04 	.word	0x2003da04
   d5524:	000d542d 	.word	0x000d542d

000d5528 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5528:	2200      	movs	r2, #0
   d552a:	4611      	mov	r1, r2
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	f7fe bfe1 	b.w	d44f4 <network_listening>

000d5532 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5532:	2200      	movs	r2, #0
   d5534:	4611      	mov	r1, r2
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	f7fe bfec 	b.w	d4514 <network_get_listen_timeout>

000d553c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d553c:	2200      	movs	r2, #0
   d553e:	6840      	ldr	r0, [r0, #4]
   d5540:	f7fe bfe0 	b.w	d4504 <network_set_listen_timeout>

000d5544 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5544:	2200      	movs	r2, #0
   d5546:	f081 0101 	eor.w	r1, r1, #1
   d554a:	6840      	ldr	r0, [r0, #4]
   d554c:	f7fe bfca 	b.w	d44e4 <network_listen>

000d5550 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5550:	2300      	movs	r3, #0
   d5552:	461a      	mov	r2, r3
   d5554:	2101      	movs	r1, #1
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	f7fe bfbc 	b.w	d44d4 <network_off>

000d555c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d555c:	2300      	movs	r3, #0
   d555e:	461a      	mov	r2, r3
   d5560:	4619      	mov	r1, r3
   d5562:	6840      	ldr	r0, [r0, #4]
   d5564:	f7fe bfae 	b.w	d44c4 <network_on>

000d5568 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5568:	2200      	movs	r2, #0
   d556a:	4611      	mov	r1, r2
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	f7fe bfa1 	b.w	d44b4 <network_ready>

000d5572 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5572:	2200      	movs	r2, #0
   d5574:	4611      	mov	r1, r2
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	f7fe bf8c 	b.w	d4494 <network_connecting>

000d557c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d557c:	2200      	movs	r2, #0
   d557e:	2102      	movs	r1, #2
   d5580:	6840      	ldr	r0, [r0, #4]
   d5582:	f7fe bf8f 	b.w	d44a4 <network_disconnect>

000d5586 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5586:	2300      	movs	r3, #0
   d5588:	461a      	mov	r2, r3
   d558a:	6840      	ldr	r0, [r0, #4]
   d558c:	f7fe bf7a 	b.w	d4484 <network_connect>

000d5590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5590:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5592:	4605      	mov	r5, r0
   d5594:	b188      	cbz	r0, d55ba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5596:	6804      	ldr	r4, [r0, #0]
   d5598:	b14c      	cbz	r4, d55ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d559a:	68a3      	ldr	r3, [r4, #8]
   d559c:	b11b      	cbz	r3, d55a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d559e:	2203      	movs	r2, #3
   d55a0:	4621      	mov	r1, r4
   d55a2:	4620      	mov	r0, r4
   d55a4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55a6:	2110      	movs	r1, #16
   d55a8:	4620      	mov	r0, r4
   d55aa:	f000 f962 	bl	d5872 <_ZdlPvj>
   d55ae:	4628      	mov	r0, r5
   d55b0:	2114      	movs	r1, #20
      }
   d55b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55b6:	f000 b95c 	b.w	d5872 <_ZdlPvj>
   d55ba:	bd38      	pop	{r3, r4, r5, pc}

000d55bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d55bc:	b110      	cbz	r0, d55c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d55be:	6803      	ldr	r3, [r0, #0]
   d55c0:	685b      	ldr	r3, [r3, #4]
   d55c2:	4718      	bx	r3
   d55c4:	4770      	bx	lr

000d55c6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d55c6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d55c8:	6803      	ldr	r3, [r0, #0]
   d55ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d55cc:	b1bb      	cbz	r3, d55fe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d55ce:	6858      	ldr	r0, [r3, #4]
   d55d0:	f7fe fe5c 	bl	d428c <os_thread_is_current>
   d55d4:	b978      	cbnz	r0, d55f6 <_ZN6ThreadD1Ev+0x30>
   d55d6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d55d8:	7c5a      	ldrb	r2, [r3, #17]
   d55da:	b912      	cbnz	r2, d55e2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d55dc:	6858      	ldr	r0, [r3, #4]
   d55de:	f7fe fe5d 	bl	d429c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d55e2:	6823      	ldr	r3, [r4, #0]
   d55e4:	6858      	ldr	r0, [r3, #4]
   d55e6:	f7fe fe61 	bl	d42ac <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55ea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d55ec:	2300      	movs	r3, #0
   d55ee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d55f0:	b128      	cbz	r0, d55fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d55f2:	f7ff ffcd 	bl	d5590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55f6:	6820      	ldr	r0, [r4, #0]
   d55f8:	b108      	cbz	r0, d55fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d55fa:	f7ff ffc9 	bl	d5590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d55fe:	4620      	mov	r0, r4
   d5600:	bd10      	pop	{r4, pc}

000d5602 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5602:	b538      	push	{r3, r4, r5, lr}
   d5604:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5606:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d560a:	b108      	cbz	r0, d5610 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d560c:	f7fe fd47 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5610:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5614:	b108      	cbz	r0, d561a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5616:	f7fe fe59 	bl	d42cc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d561a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d561e:	b135      	cbz	r5, d562e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5620:	4628      	mov	r0, r5
   d5622:	f7ff ffd0 	bl	d55c6 <_ZN6ThreadD1Ev>
   d5626:	2104      	movs	r1, #4
   d5628:	4628      	mov	r0, r5
   d562a:	f000 f922 	bl	d5872 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d562e:	6820      	ldr	r0, [r4, #0]
   d5630:	b108      	cbz	r0, d5636 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5632:	f7ff ffc3 	bl	d55bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5636:	4620      	mov	r0, r4
   d5638:	bd38      	pop	{r3, r4, r5, pc}
	...

000d563c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d563c:	b510      	push	{r4, lr}
   d563e:	4b04      	ldr	r3, [pc, #16]	; (d5650 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5640:	4604      	mov	r4, r0
   d5642:	f840 3b08 	str.w	r3, [r0], #8
   d5646:	f7ff ffdc 	bl	d5602 <_ZN5spark11MeshPublishD1Ev>
   d564a:	4620      	mov	r0, r4
   d564c:	bd10      	pop	{r4, pc}
   d564e:	bf00      	nop
   d5650:	000d5fbc 	.word	0x000d5fbc

000d5654 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5654:	b538      	push	{r3, r4, r5, lr}
   d5656:	4c0e      	ldr	r4, [pc, #56]	; (d5690 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5658:	4b0e      	ldr	r3, [pc, #56]	; (d5694 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d565a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d565c:	2500      	movs	r5, #0
   d565e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5660:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5664:	6063      	str	r3, [r4, #4]
   d5666:	60a5      	str	r5, [r4, #8]
   d5668:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d566c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5670:	f7fe fe24 	bl	d42bc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5674:	4b08      	ldr	r3, [pc, #32]	; (d5698 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5676:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d567a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d567e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5680:	4620      	mov	r0, r4
   d5682:	4a06      	ldr	r2, [pc, #24]	; (d569c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5684:	4906      	ldr	r1, [pc, #24]	; (d56a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d568a:	f000 b8ed 	b.w	d5868 <__aeabi_atexit>
   d568e:	bf00      	nop
   d5690:	2003e568 	.word	0x2003e568
   d5694:	000d6024 	.word	0x000d6024
   d5698:	000d5fbc 	.word	0x000d5fbc
   d569c:	2003da04 	.word	0x2003da04
   d56a0:	000d563d 	.word	0x000d563d

000d56a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d56a4:	2200      	movs	r2, #0
   d56a6:	4611      	mov	r1, r2
   d56a8:	6840      	ldr	r0, [r0, #4]
   d56aa:	f7fe bf03 	b.w	d44b4 <network_ready>

000d56ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56ae:	2200      	movs	r2, #0
   d56b0:	4611      	mov	r1, r2
   d56b2:	6840      	ldr	r0, [r0, #4]
   d56b4:	f7fe bf1e 	b.w	d44f4 <network_listening>

000d56b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56b8:	2200      	movs	r2, #0
   d56ba:	4611      	mov	r1, r2
   d56bc:	6840      	ldr	r0, [r0, #4]
   d56be:	f7fe bf29 	b.w	d4514 <network_get_listen_timeout>

000d56c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56c2:	2200      	movs	r2, #0
   d56c4:	6840      	ldr	r0, [r0, #4]
   d56c6:	f7fe bf1d 	b.w	d4504 <network_set_listen_timeout>

000d56ca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56ca:	2200      	movs	r2, #0
   d56cc:	f081 0101 	eor.w	r1, r1, #1
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7fe bf07 	b.w	d44e4 <network_listen>

000d56d6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d56d6:	2300      	movs	r3, #0
   d56d8:	461a      	mov	r2, r3
   d56da:	4619      	mov	r1, r3
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	f7fe bef9 	b.w	d44d4 <network_off>

000d56e2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56e2:	2300      	movs	r3, #0
   d56e4:	461a      	mov	r2, r3
   d56e6:	4619      	mov	r1, r3
   d56e8:	6840      	ldr	r0, [r0, #4]
   d56ea:	f7fe beeb 	b.w	d44c4 <network_on>

000d56ee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56ee:	2200      	movs	r2, #0
   d56f0:	4611      	mov	r1, r2
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	f7fe bece 	b.w	d4494 <network_connecting>

000d56f8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56f8:	2200      	movs	r2, #0
   d56fa:	2102      	movs	r1, #2
   d56fc:	6840      	ldr	r0, [r0, #4]
   d56fe:	f7fe bed1 	b.w	d44a4 <network_disconnect>

000d5702 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5702:	2300      	movs	r3, #0
   d5704:	461a      	mov	r2, r3
   d5706:	6840      	ldr	r0, [r0, #4]
   d5708:	f7fe bebc 	b.w	d4484 <network_connect>

000d570c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d570c:	4b02      	ldr	r3, [pc, #8]	; (d5718 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d570e:	2204      	movs	r2, #4
   d5710:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5712:	4a02      	ldr	r2, [pc, #8]	; (d571c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5714:	601a      	str	r2, [r3, #0]
   d5716:	4770      	bx	lr
   d5718:	2003e73c 	.word	0x2003e73c
   d571c:	000d5ff0 	.word	0x000d5ff0

000d5720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5720:	2300      	movs	r3, #0
   d5722:	461a      	mov	r2, r3
   d5724:	6840      	ldr	r0, [r0, #4]
   d5726:	f7fe bead 	b.w	d4484 <network_connect>

000d572a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d572a:	2200      	movs	r2, #0
   d572c:	2102      	movs	r1, #2
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7fe beb8 	b.w	d44a4 <network_disconnect>

000d5734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5734:	2200      	movs	r2, #0
   d5736:	4611      	mov	r1, r2
   d5738:	6840      	ldr	r0, [r0, #4]
   d573a:	f7fe beab 	b.w	d4494 <network_connecting>

000d573e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d573e:	2200      	movs	r2, #0
   d5740:	4611      	mov	r1, r2
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	f7fe beb6 	b.w	d44b4 <network_ready>

000d5748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5748:	2300      	movs	r3, #0
   d574a:	461a      	mov	r2, r3
   d574c:	4619      	mov	r1, r3
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7fe beb8 	b.w	d44c4 <network_on>

000d5754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5754:	2300      	movs	r3, #0
   d5756:	461a      	mov	r2, r3
   d5758:	4619      	mov	r1, r3
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7fe beba 	b.w	d44d4 <network_off>

000d5760 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5760:	2200      	movs	r2, #0
   d5762:	f081 0101 	eor.w	r1, r1, #1
   d5766:	6840      	ldr	r0, [r0, #4]
   d5768:	f7fe bebc 	b.w	d44e4 <network_listen>

000d576c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d576c:	2200      	movs	r2, #0
   d576e:	6840      	ldr	r0, [r0, #4]
   d5770:	f7fe bec8 	b.w	d4504 <network_set_listen_timeout>

000d5774 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5774:	2200      	movs	r2, #0
   d5776:	4611      	mov	r1, r2
   d5778:	6840      	ldr	r0, [r0, #4]
   d577a:	f7fe becb 	b.w	d4514 <network_get_listen_timeout>

000d577e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d577e:	2200      	movs	r2, #0
   d5780:	4611      	mov	r1, r2
   d5782:	6840      	ldr	r0, [r0, #4]
   d5784:	f7fe beb6 	b.w	d44f4 <network_listening>

000d5788 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d578c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d578e:	b095      	sub	sp, #84	; 0x54
   d5790:	4616      	mov	r6, r2
   d5792:	460d      	mov	r5, r1
   d5794:	4607      	mov	r7, r0
    IPAddress addr;
   d5796:	f7ff fd8d 	bl	d52b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d579a:	4621      	mov	r1, r4
   d579c:	2220      	movs	r2, #32
   d579e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57a0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d57a2:	f000 f9f4 	bl	d5b8e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57a6:	2340      	movs	r3, #64	; 0x40
   d57a8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57aa:	4621      	mov	r1, r4
   d57ac:	466b      	mov	r3, sp
   d57ae:	aa0c      	add	r2, sp, #48	; 0x30
   d57b0:	4630      	mov	r0, r6
   d57b2:	f7fe fcff 	bl	d41b4 <netdb_getaddrinfo>
    if (!r) {
   d57b6:	4604      	mov	r4, r0
   d57b8:	2800      	cmp	r0, #0
   d57ba:	d144      	bne.n	d5846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57bc:	4602      	mov	r2, r0
   d57be:	2101      	movs	r1, #1
   d57c0:	6868      	ldr	r0, [r5, #4]
   d57c2:	f7fe fe77 	bl	d44b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57c6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57c8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57ca:	4622      	mov	r2, r4
   d57cc:	6868      	ldr	r0, [r5, #4]
   d57ce:	f7fe fe71 	bl	d44b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57d2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57d4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57d6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57d8:	2e00      	cmp	r6, #0
   d57da:	d034      	beq.n	d5846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57dc:	2900      	cmp	r1, #0
   d57de:	d132      	bne.n	d5846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57e0:	6873      	ldr	r3, [r6, #4]
   d57e2:	2b02      	cmp	r3, #2
   d57e4:	d002      	beq.n	d57ec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57e6:	2b0a      	cmp	r3, #10
   d57e8:	d009      	beq.n	d57fe <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57ea:	e02a      	b.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57ec:	f1b8 0f00 	cmp.w	r8, #0
   d57f0:	d027      	beq.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57f2:	6971      	ldr	r1, [r6, #20]
   d57f4:	4638      	mov	r0, r7
   d57f6:	3104      	adds	r1, #4
   d57f8:	f7ff fd89 	bl	d530e <_ZN9IPAddressaSEPKh>
   d57fc:	e020      	b.n	d5840 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57fe:	f1b9 0f00 	cmp.w	r9, #0
   d5802:	d01e      	beq.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5804:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5806:	2211      	movs	r2, #17
   d5808:	a801      	add	r0, sp, #4
   d580a:	f000 f9c0 	bl	d5b8e <memset>
                    a.v = 6;
   d580e:	2306      	movs	r3, #6
   d5810:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5814:	ad01      	add	r5, sp, #4
   d5816:	f104 0308 	add.w	r3, r4, #8
   d581a:	3418      	adds	r4, #24
   d581c:	6818      	ldr	r0, [r3, #0]
   d581e:	6859      	ldr	r1, [r3, #4]
   d5820:	462a      	mov	r2, r5
   d5822:	c203      	stmia	r2!, {r0, r1}
   d5824:	3308      	adds	r3, #8
   d5826:	42a3      	cmp	r3, r4
   d5828:	4615      	mov	r5, r2
   d582a:	d1f7      	bne.n	d581c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d582c:	a901      	add	r1, sp, #4
   d582e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5830:	ad07      	add	r5, sp, #28
   d5832:	f7ff fd4d 	bl	d52d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5838:	1d3c      	adds	r4, r7, #4
   d583a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d583c:	682b      	ldr	r3, [r5, #0]
   d583e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5840:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5842:	69f6      	ldr	r6, [r6, #28]
   d5844:	e7c8      	b.n	d57d8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5846:	9800      	ldr	r0, [sp, #0]
   d5848:	f7fe fcac 	bl	d41a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d584c:	4638      	mov	r0, r7
   d584e:	b015      	add	sp, #84	; 0x54
   d5850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5854 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5854:	4b02      	ldr	r3, [pc, #8]	; (d5860 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5856:	4a03      	ldr	r2, [pc, #12]	; (d5864 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5858:	601a      	str	r2, [r3, #0]
   d585a:	2200      	movs	r2, #0
   d585c:	605a      	str	r2, [r3, #4]
   d585e:	4770      	bx	lr
   d5860:	2003e744 	.word	0x2003e744
   d5864:	000d6024 	.word	0x000d6024

000d5868 <__aeabi_atexit>:
   d5868:	460b      	mov	r3, r1
   d586a:	4601      	mov	r1, r0
   d586c:	4618      	mov	r0, r3
   d586e:	f000 b94b 	b.w	d5b08 <__cxa_atexit>

000d5872 <_ZdlPvj>:
   d5872:	f7fe bc12 	b.w	d409a <_ZdlPv>
	...

000d5878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5878:	4b18      	ldr	r3, [pc, #96]	; (d58dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d587a:	681a      	ldr	r2, [r3, #0]
   d587c:	07d1      	lsls	r1, r2, #31
   d587e:	bf5c      	itt	pl
   d5880:	2201      	movpl	r2, #1
   d5882:	601a      	strpl	r2, [r3, #0]
   d5884:	4b16      	ldr	r3, [pc, #88]	; (d58e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5886:	681a      	ldr	r2, [r3, #0]
   d5888:	07d2      	lsls	r2, r2, #31
   d588a:	bf5c      	itt	pl
   d588c:	2201      	movpl	r2, #1
   d588e:	601a      	strpl	r2, [r3, #0]
   d5890:	4b14      	ldr	r3, [pc, #80]	; (d58e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5892:	681a      	ldr	r2, [r3, #0]
   d5894:	07d0      	lsls	r0, r2, #31
   d5896:	bf5c      	itt	pl
   d5898:	2201      	movpl	r2, #1
   d589a:	601a      	strpl	r2, [r3, #0]
   d589c:	4b12      	ldr	r3, [pc, #72]	; (d58e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d589e:	681a      	ldr	r2, [r3, #0]
   d58a0:	07d1      	lsls	r1, r2, #31
   d58a2:	bf5c      	itt	pl
   d58a4:	2201      	movpl	r2, #1
   d58a6:	601a      	strpl	r2, [r3, #0]
   d58a8:	4b10      	ldr	r3, [pc, #64]	; (d58ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d58aa:	681a      	ldr	r2, [r3, #0]
   d58ac:	07d2      	lsls	r2, r2, #31
   d58ae:	bf5c      	itt	pl
   d58b0:	2201      	movpl	r2, #1
   d58b2:	601a      	strpl	r2, [r3, #0]
   d58b4:	4b0e      	ldr	r3, [pc, #56]	; (d58f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d58b6:	681a      	ldr	r2, [r3, #0]
   d58b8:	07d0      	lsls	r0, r2, #31
   d58ba:	bf5c      	itt	pl
   d58bc:	2201      	movpl	r2, #1
   d58be:	601a      	strpl	r2, [r3, #0]
   d58c0:	4b0c      	ldr	r3, [pc, #48]	; (d58f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d58c2:	681a      	ldr	r2, [r3, #0]
   d58c4:	07d1      	lsls	r1, r2, #31
   d58c6:	bf5c      	itt	pl
   d58c8:	2201      	movpl	r2, #1
   d58ca:	601a      	strpl	r2, [r3, #0]
   d58cc:	4b0a      	ldr	r3, [pc, #40]	; (d58f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d58ce:	681a      	ldr	r2, [r3, #0]
   d58d0:	07d2      	lsls	r2, r2, #31
   d58d2:	bf5c      	itt	pl
   d58d4:	2201      	movpl	r2, #1
   d58d6:	601a      	strpl	r2, [r3, #0]
   d58d8:	4770      	bx	lr
   d58da:	bf00      	nop
   d58dc:	2003e76c 	.word	0x2003e76c
   d58e0:	2003e768 	.word	0x2003e768
   d58e4:	2003e764 	.word	0x2003e764
   d58e8:	2003e760 	.word	0x2003e760
   d58ec:	2003e75c 	.word	0x2003e75c
   d58f0:	2003e758 	.word	0x2003e758
   d58f4:	2003e754 	.word	0x2003e754
   d58f8:	2003e750 	.word	0x2003e750

000d58fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d58fc:	4b24      	ldr	r3, [pc, #144]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d58fe:	681a      	ldr	r2, [r3, #0]
   d5900:	07d0      	lsls	r0, r2, #31
   d5902:	bf5c      	itt	pl
   d5904:	2201      	movpl	r2, #1
   d5906:	601a      	strpl	r2, [r3, #0]
   d5908:	4b22      	ldr	r3, [pc, #136]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d1      	lsls	r1, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b20      	ldr	r3, [pc, #128]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d2      	lsls	r2, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b1e      	ldr	r3, [pc, #120]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d0      	lsls	r0, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b1c      	ldr	r3, [pc, #112]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d1      	lsls	r1, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b1a      	ldr	r3, [pc, #104]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d2      	lsls	r2, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b18      	ldr	r3, [pc, #96]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d0      	lsls	r0, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b16      	ldr	r3, [pc, #88]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d1      	lsls	r1, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b14      	ldr	r3, [pc, #80]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d2      	lsls	r2, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b12      	ldr	r3, [pc, #72]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d0      	lsls	r0, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4b10      	ldr	r3, [pc, #64]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d1      	lsls	r1, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4b0e      	ldr	r3, [pc, #56]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d2      	lsls	r2, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4770      	bx	lr
   d598e:	bf00      	nop
   d5990:	2003e79c 	.word	0x2003e79c
   d5994:	2003e798 	.word	0x2003e798
   d5998:	2003e794 	.word	0x2003e794
   d599c:	2003e790 	.word	0x2003e790
   d59a0:	2003e78c 	.word	0x2003e78c
   d59a4:	2003e788 	.word	0x2003e788
   d59a8:	2003e784 	.word	0x2003e784
   d59ac:	2003e780 	.word	0x2003e780
   d59b0:	2003e77c 	.word	0x2003e77c
   d59b4:	2003e778 	.word	0x2003e778
   d59b8:	2003e774 	.word	0x2003e774
   d59bc:	2003e770 	.word	0x2003e770

000d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d59c0:	4b24      	ldr	r3, [pc, #144]	; (d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b22      	ldr	r3, [pc, #136]	; (d5a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b20      	ldr	r3, [pc, #128]	; (d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b1e      	ldr	r3, [pc, #120]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d0      	lsls	r0, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b1c      	ldr	r3, [pc, #112]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d1      	lsls	r1, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b1a      	ldr	r3, [pc, #104]	; (d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d2      	lsls	r2, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b18      	ldr	r3, [pc, #96]	; (d5a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d0      	lsls	r0, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4b16      	ldr	r3, [pc, #88]	; (d5a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a16:	681a      	ldr	r2, [r3, #0]
   d5a18:	07d1      	lsls	r1, r2, #31
   d5a1a:	bf5c      	itt	pl
   d5a1c:	2201      	movpl	r2, #1
   d5a1e:	601a      	strpl	r2, [r3, #0]
   d5a20:	4b14      	ldr	r3, [pc, #80]	; (d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d2      	lsls	r2, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b12      	ldr	r3, [pc, #72]	; (d5a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d0      	lsls	r0, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b10      	ldr	r3, [pc, #64]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d1      	lsls	r1, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b0e      	ldr	r3, [pc, #56]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d2      	lsls	r2, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4770      	bx	lr
   d5a52:	bf00      	nop
   d5a54:	2003e7cc 	.word	0x2003e7cc
   d5a58:	2003e7c8 	.word	0x2003e7c8
   d5a5c:	2003e7c4 	.word	0x2003e7c4
   d5a60:	2003e7c0 	.word	0x2003e7c0
   d5a64:	2003e7bc 	.word	0x2003e7bc
   d5a68:	2003e7b8 	.word	0x2003e7b8
   d5a6c:	2003e7b4 	.word	0x2003e7b4
   d5a70:	2003e7b0 	.word	0x2003e7b0
   d5a74:	2003e7ac 	.word	0x2003e7ac
   d5a78:	2003e7a8 	.word	0x2003e7a8
   d5a7c:	2003e7a4 	.word	0x2003e7a4
   d5a80:	2003e7a0 	.word	0x2003e7a0

000d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a84:	4b18      	ldr	r3, [pc, #96]	; (d5ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d1      	lsls	r1, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b16      	ldr	r3, [pc, #88]	; (d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d2      	lsls	r2, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4b14      	ldr	r3, [pc, #80]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d0      	lsls	r0, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b12      	ldr	r3, [pc, #72]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d1      	lsls	r1, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b10      	ldr	r3, [pc, #64]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d2      	lsls	r2, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b0e      	ldr	r3, [pc, #56]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d0      	lsls	r0, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b0c      	ldr	r3, [pc, #48]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d1      	lsls	r1, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b0a      	ldr	r3, [pc, #40]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d2      	lsls	r2, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4770      	bx	lr
   d5ae6:	bf00      	nop
   d5ae8:	2003e7ec 	.word	0x2003e7ec
   d5aec:	2003e7e8 	.word	0x2003e7e8
   d5af0:	2003e7e4 	.word	0x2003e7e4
   d5af4:	2003e7e0 	.word	0x2003e7e0
   d5af8:	2003e7dc 	.word	0x2003e7dc
   d5afc:	2003e7d8 	.word	0x2003e7d8
   d5b00:	2003e7d4 	.word	0x2003e7d4
   d5b04:	2003e7d0 	.word	0x2003e7d0

000d5b08 <__cxa_atexit>:
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	4c05      	ldr	r4, [pc, #20]	; (d5b20 <__cxa_atexit+0x18>)
   d5b0c:	4613      	mov	r3, r2
   d5b0e:	b12c      	cbz	r4, d5b1c <__cxa_atexit+0x14>
   d5b10:	460a      	mov	r2, r1
   d5b12:	4601      	mov	r1, r0
   d5b14:	2002      	movs	r0, #2
   d5b16:	f3af 8000 	nop.w
   d5b1a:	bd10      	pop	{r4, pc}
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	bd10      	pop	{r4, pc}
   d5b20:	00000000 	.word	0x00000000

000d5b24 <memcmp>:
   d5b24:	b510      	push	{r4, lr}
   d5b26:	3901      	subs	r1, #1
   d5b28:	4402      	add	r2, r0
   d5b2a:	4290      	cmp	r0, r2
   d5b2c:	d007      	beq.n	d5b3e <memcmp+0x1a>
   d5b2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d5b32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5b36:	42a3      	cmp	r3, r4
   d5b38:	d0f7      	beq.n	d5b2a <memcmp+0x6>
   d5b3a:	1b18      	subs	r0, r3, r4
   d5b3c:	bd10      	pop	{r4, pc}
   d5b3e:	2000      	movs	r0, #0
   d5b40:	bd10      	pop	{r4, pc}

000d5b42 <memcpy>:
   d5b42:	b510      	push	{r4, lr}
   d5b44:	1e43      	subs	r3, r0, #1
   d5b46:	440a      	add	r2, r1
   d5b48:	4291      	cmp	r1, r2
   d5b4a:	d004      	beq.n	d5b56 <memcpy+0x14>
   d5b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b50:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5b54:	e7f8      	b.n	d5b48 <memcpy+0x6>
   d5b56:	bd10      	pop	{r4, pc}

000d5b58 <memmove>:
   d5b58:	4288      	cmp	r0, r1
   d5b5a:	b510      	push	{r4, lr}
   d5b5c:	eb01 0302 	add.w	r3, r1, r2
   d5b60:	d801      	bhi.n	d5b66 <memmove+0xe>
   d5b62:	1e42      	subs	r2, r0, #1
   d5b64:	e00b      	b.n	d5b7e <memmove+0x26>
   d5b66:	4298      	cmp	r0, r3
   d5b68:	d2fb      	bcs.n	d5b62 <memmove+0xa>
   d5b6a:	1881      	adds	r1, r0, r2
   d5b6c:	1ad2      	subs	r2, r2, r3
   d5b6e:	42d3      	cmn	r3, r2
   d5b70:	d004      	beq.n	d5b7c <memmove+0x24>
   d5b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5b76:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d5b7a:	e7f8      	b.n	d5b6e <memmove+0x16>
   d5b7c:	bd10      	pop	{r4, pc}
   d5b7e:	4299      	cmp	r1, r3
   d5b80:	d004      	beq.n	d5b8c <memmove+0x34>
   d5b82:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b86:	f802 4f01 	strb.w	r4, [r2, #1]!
   d5b8a:	e7f8      	b.n	d5b7e <memmove+0x26>
   d5b8c:	bd10      	pop	{r4, pc}

000d5b8e <memset>:
   d5b8e:	4402      	add	r2, r0
   d5b90:	4603      	mov	r3, r0
   d5b92:	4293      	cmp	r3, r2
   d5b94:	d002      	beq.n	d5b9c <memset+0xe>
   d5b96:	f803 1b01 	strb.w	r1, [r3], #1
   d5b9a:	e7fa      	b.n	d5b92 <memset+0x4>
   d5b9c:	4770      	bx	lr
	...

000d5ba0 <srand>:
   d5ba0:	b538      	push	{r3, r4, r5, lr}
   d5ba2:	4b12      	ldr	r3, [pc, #72]	; (d5bec <srand+0x4c>)
   d5ba4:	681c      	ldr	r4, [r3, #0]
   d5ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ba8:	4605      	mov	r5, r0
   d5baa:	b9d3      	cbnz	r3, d5be2 <srand+0x42>
   d5bac:	2018      	movs	r0, #24
   d5bae:	f7fe fcc1 	bl	d4534 <malloc>
   d5bb2:	f243 330e 	movw	r3, #13070	; 0x330e
   d5bb6:	63a0      	str	r0, [r4, #56]	; 0x38
   d5bb8:	8003      	strh	r3, [r0, #0]
   d5bba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5bbe:	8043      	strh	r3, [r0, #2]
   d5bc0:	f241 2334 	movw	r3, #4660	; 0x1234
   d5bc4:	8083      	strh	r3, [r0, #4]
   d5bc6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5bca:	80c3      	strh	r3, [r0, #6]
   d5bcc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5bd0:	8103      	strh	r3, [r0, #8]
   d5bd2:	2305      	movs	r3, #5
   d5bd4:	8143      	strh	r3, [r0, #10]
   d5bd6:	230b      	movs	r3, #11
   d5bd8:	8183      	strh	r3, [r0, #12]
   d5bda:	2201      	movs	r2, #1
   d5bdc:	2300      	movs	r3, #0
   d5bde:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5be4:	2200      	movs	r2, #0
   d5be6:	611d      	str	r5, [r3, #16]
   d5be8:	615a      	str	r2, [r3, #20]
   d5bea:	bd38      	pop	{r3, r4, r5, pc}
   d5bec:	2003da00 	.word	0x2003da00

000d5bf0 <strlen>:
   d5bf0:	4603      	mov	r3, r0
   d5bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5bf6:	2a00      	cmp	r2, #0
   d5bf8:	d1fb      	bne.n	d5bf2 <strlen+0x2>
   d5bfa:	1a18      	subs	r0, r3, r0
   d5bfc:	3801      	subs	r0, #1
   d5bfe:	4770      	bx	lr

000d5c00 <dynalib_user>:
   d5c00:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5c10:	0000 0000                                   ....

000d5c14 <_ZL7myColor>:
   d5c14:	0000 00ff                                   ....

000d5c18 <_ZTVN5spark13EthernetClassE>:
	...
   d5c20:	45c3 000d 45b9 000d 45af 000d 45a5 000d     .E...E...E...E..
   d5c30:	4599 000d 458d 000d 4581 000d 4579 000d     .E...E...E..yE..
   d5c40:	456f 000d 4565 000d 5789 000d               oE..eE...W..

000d5c4c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5c54:	46ef 000d 46f5 000d 4f35 000d 4711 000d     .F...F..5O...G..
   d5c64:	46f1 000d                                   .F..

000d5c68 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5c70:	46e9 000d 4703 000d 4bd3 000d 4715 000d     .F...G...K...G..
   d5c80:	46eb 000d 6977 6972 676e 622e 656c 5300     .F..wiring.ble.S
   d5c90:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d5ca0:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d5cb0:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d5cc0:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d5cd0:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d5ce0:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d5cf0:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d5d00:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d5d10:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d5d20:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d5d30:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d5d40:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d5d50:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d5d60:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d5d70:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d5d80:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d5d90:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d5da0:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d5db0:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d5dc0:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d5dd0:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d5de0:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d5df0:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d5e00:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d5e10:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d5e20:	6465 002e                                   ed..

000d5e24 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d5e24:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d5e34:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d5e44:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d5e54:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d5e64:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d5e74:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d5e84:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d5e94:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d5ea4:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d5eb4:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d5ec4:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d5ed4:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d5ee4:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d5ef4:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d5f04:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d5f14:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d5f24:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5f34:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d5f40 <_ZTV9IPAddress>:
	...
   d5f48:	5251 000d 5241 000d 5243 000d               QR..AR..CR..

000d5f54 <_ZTV9USBSerial>:
	...
   d5f5c:	5329 000d 5379 000d 5387 000d 4ff9 000d     )S..yS...S...O..
   d5f6c:	5365 000d 532b 000d 5341 000d 5373 000d     eS..+S..AS..sS..
   d5f7c:	5357 000d 5325 000d                         WS..%S..

000d5f84 <_ZTV11USARTSerial>:
	...
   d5f8c:	542d 000d 547d 000d 548b 000d 4ff9 000d     -T..}T...T...O..
   d5f9c:	5441 000d 5463 000d 544f 000d 5477 000d     AT..cT..OT..wT..
   d5fac:	542f 000d 5433 000d                         /T..3T..

000d5fb4 <_ZTVN5spark9MeshClassE>:
	...
   d5fbc:	5587 000d 557d 000d 5573 000d 5569 000d     .U..}U..sU..iU..
   d5fcc:	555d 000d 5551 000d 5545 000d 553d 000d     ]U..QU..EU..=U..
   d5fdc:	5533 000d 5529 000d 5789 000d               3U..)U...W..

000d5fe8 <_ZTVN5spark9WiFiClassE>:
	...
   d5ff0:	5703 000d 56f9 000d 56ef 000d 56a5 000d     .W...V...V...V..
   d6000:	56e3 000d 56d7 000d 56cb 000d 56c3 000d     .V...V...V...V..
   d6010:	56b9 000d 56af 000d 5789 000d               .V...V...W..

000d601c <_ZTVN5spark12NetworkClassE>:
	...
   d6024:	5721 000d 572b 000d 5735 000d 573f 000d     !W..+W..5W..?W..
   d6034:	5749 000d 5755 000d 5761 000d 576d 000d     IW..UW..aW..mW..
   d6044:	5775 000d 577f 000d 5789 000d               uW...W...W..

000d6050 <__sf_fake_stdin>:
	...

000d6070 <__sf_fake_stdout>:
	...

000d6090 <__sf_fake_stderr>:
	...
   d60b0:	0043                                        C.

000d60b2 <link_const_variable_data_end>:
	...

000d60b4 <link_constructors_location>:
   d60b4:	000d4139 	.word	0x000d4139
   d60b8:	000d45cd 	.word	0x000d45cd
   d60bc:	000d4601 	.word	0x000d4601
   d60c0:	000d4fd1 	.word	0x000d4fd1
   d60c4:	000d508d 	.word	0x000d508d
   d60c8:	000d509d 	.word	0x000d509d
   d60cc:	000d5115 	.word	0x000d5115
   d60d0:	000d5655 	.word	0x000d5655
   d60d4:	000d570d 	.word	0x000d570d
   d60d8:	000d5855 	.word	0x000d5855
   d60dc:	000d5879 	.word	0x000d5879
   d60e0:	000d58fd 	.word	0x000d58fd
   d60e4:	000d59c1 	.word	0x000d59c1
   d60e8:	000d5a85 	.word	0x000d5a85

000d60ec <link_constructors_end>:
   d60ec:	00000000 	.word	0x00000000
