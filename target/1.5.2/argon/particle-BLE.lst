
d:/Dev/particle-BLE/target/1.5.2/argon/particle-BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000022f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6310  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003d97c  000d6314  0001d97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000e0c  2003d9e4  2003d9e4  0002d9e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d637c  000d637c  0002637c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d63a4  000d63a4  000263a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b0807  00000000  00000000  000263a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000caeb  00000000  00000000  000d6baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a5db  00000000  00000000  000e369a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002320  00000000  00000000  000fdc75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004208  00000000  00000000  000fff95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eb91  00000000  00000000  0010419d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001dfa9  00000000  00000000  00132d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff34b  00000000  00000000  00150cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c5fc  00000000  00000000  00250024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe74 	bl	d5d1a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe94 	bl	d5d66 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d97c 	.word	0x2003d97c
   d4048:	000d6314 	.word	0x000d6314
   d404c:	2003d9e4 	.word	0x2003d9e4
   d4050:	2003d9e4 	.word	0x2003d9e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f9b1 	bl	d53c0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d630c 	.word	0x000d630c
   d4080:	000d62d4 	.word	0x000d62d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86e 	b.w	d4164 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f877 	bl	d417c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b957 	b.w	d5344 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba99 	b.w	d45cc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba9f 	b.w	d45dc <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba9d 	b.w	d45dc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b6:	6800      	ldr	r0, [r0, #0]
   d40b8:	b108      	cbz	r0, d40be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ba:	f000 fa8f 	bl	d45dc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}
	...

000d40c4 <_Z18setAdvertisingDatav>:
  BLE.on();
  RGB.control(true);
  setAdvertisingData();
}

void setAdvertisingData() {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	b09e      	sub	sp, #120	; 0x78
    // 16-bit: Company ID (0xffff)
    // Byte: Internal packet identifier (0x55)
    // 32-bit: Color code
    
    // Company ID (0xffff internal use/testing)
    buf[offset++] = 0xff;
   d40c8:	23ff      	movs	r3, #255	; 0xff
   d40ca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    buf[offset++] = 0xff;
   d40ce:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

    // Internal packet type. This is arbitrary, but provides an extra
    // check to make sure the data is my data, since we use the 0xffff company
    // code.
    buf[offset++] = 0x55;
   d40d2:	2355      	movs	r3, #85	; 0x55
   d40d4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

    // Our specific data, color code
    memcpy(&buf[offset], &myColor, 4);
   d40d8:	4b1f      	ldr	r3, [pc, #124]	; (d4158 <_Z18setAdvertisingDatav+0x94>)
   d40da:	6818      	ldr	r0, [r3, #0]
   d40dc:	f8cd 0037 	str.w	r0, [sp, #55]	; 0x37
    offset += 4;

    BleAdvertisingData advData;
   d40e0:	a815      	add	r0, sp, #84	; 0x54
   d40e2:	f000 fcb1 	bl	d4a48 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendCustomData(buf, offset);
   d40e6:	2300      	movs	r3, #0
   d40e8:	2207      	movs	r2, #7
   d40ea:	a90d      	add	r1, sp, #52	; 0x34
   d40ec:	a815      	add	r0, sp, #84	; 0x54
   d40ee:	f000 fcd6 	bl	d4a9e <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    advData.appendServiceUUID(serviceUuid);
   d40f2:	491a      	ldr	r1, [pc, #104]	; (d415c <_Z18setAdvertisingDatav+0x98>)
   d40f4:	a803      	add	r0, sp, #12
   d40f6:	f000 fbbf 	bl	d4878 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d40fa:	a903      	add	r1, sp, #12
   d40fc:	a808      	add	r0, sp, #32
   d40fe:	f000 fbbb 	bl	d4878 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4102:	a808      	add	r0, sp, #32
   d4104:	f000 fbc5 	bl	d4892 <_ZNK8particle7BleUuid4typeEv>
   d4108:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d410a:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d410c:	b944      	cbnz	r4, d4120 <_Z18setAdvertisingDatav+0x5c>
            uint16_t uuid16 = tempUUID.shorted();
   d410e:	f000 fbc2 	bl	d4896 <_ZNK8particle7BleUuid7shortedEv>
   d4112:	aa1e      	add	r2, sp, #120	; 0x78
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4114:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4116:	f822 0d6e 	strh.w	r0, [r2, #-110]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d411a:	2103      	movs	r1, #3
   d411c:	9400      	str	r4, [sp, #0]
   d411e:	e006      	b.n	d412e <_Z18setAdvertisingDatav+0x6a>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4120:	f000 fbbe 	bl	d48a0 <_ZNK8particle7BleUuid8rawBytesEv>
   d4124:	2300      	movs	r3, #0
   d4126:	9300      	str	r3, [sp, #0]
   d4128:	4602      	mov	r2, r0
   d412a:	2310      	movs	r3, #16
   d412c:	2107      	movs	r1, #7
   d412e:	a815      	add	r0, sp, #84	; 0x54
   d4130:	f000 fc43 	bl	d49ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendLocalName("CPUConnect");
   d4134:	490a      	ldr	r1, [pc, #40]	; (d4160 <_Z18setAdvertisingDatav+0x9c>)
   d4136:	a815      	add	r0, sp, #84	; 0x54
   d4138:	f000 fca0 	bl	d4a7c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    // Advertise every 100 milliseconds. Unit is 0.625 millisecond intervals.
    BLE.setAdvertisingInterval(100);
   d413c:	f000 fd58 	bl	d4bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4140:	2164      	movs	r1, #100	; 0x64
   d4142:	f000 fd82 	bl	d4c4a <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>

    // Continuously advertise
    BLE.advertise(&advData);
   d4146:	f000 fd53 	bl	d4bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d414a:	2200      	movs	r2, #0
   d414c:	a915      	add	r1, sp, #84	; 0x54
   d414e:	f000 fdc3 	bl	d4cd8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4152:	b01e      	add	sp, #120	; 0x78
   d4154:	bd10      	pop	{r4, pc}
   d4156:	bf00      	nop
   d4158:	000d5e04 	.word	0x000d5e04
   d415c:	2003d9e8 	.word	0x2003d9e8
   d4160:	000d5e08 	.word	0x000d5e08

000d4164 <setup>:
void setAdvertisingData();

uint16_t lastRate = 0;
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
// setup() runs once, when the device is first turned on.
void setup() {
   d4164:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  BLE.on();
   d4166:	f000 fd43 	bl	d4bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d416a:	f000 fd5f 	bl	d4c2c <_ZNK8particle14BleLocalDevice2onEv>
  RGB.control(true);
   d416e:	2001      	movs	r0, #1
   d4170:	f001 f899 	bl	d52a6 <_ZN8RGBClass7controlEb>
  setAdvertisingData();
}
   d4174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  BLE.on();
  RGB.control(true);
  setAdvertisingData();
   d4178:	f7ff bfa4 	b.w	d40c4 <_Z18setAdvertisingDatav>

000d417c <loop>:

    // Continuously advertise
    BLE.advertise(&advData);
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d417c:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  if (BLE.connected()) {
   d417e:	f000 fd37 	bl	d4bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4182:	f000 fdc6 	bl	d4d12 <_ZNK8particle14BleLocalDevice9connectedEv>
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
   d4186:	22ff      	movs	r2, #255	; 0xff
    BLE.advertise(&advData);
}
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  if (BLE.connected()) {
   d4188:	4601      	mov	r1, r0
   d418a:	b108      	cbz	r0, d4190 <loop+0x14>
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
   d418c:	4611      	mov	r1, r2
   d418e:	4610      	mov	r0, r2
  }
  else {
    RGB.color(0, 0, 255);
  }
   d4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (BLE.connected()) {
        // We're currently connected to a sensor
    RGB.color(255, 255, 255);
  }
  else {
    RGB.color(0, 0, 255);
   d4194:	f001 b897 	b.w	d52c6 <_ZN8RGBClass5colorEiii>

000d4198 <_GLOBAL__sub_I_SystemMode>:
  }
   d4198:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d419a:	4d1e      	ldr	r5, [pc, #120]	; (d4214 <_GLOBAL__sub_I_SystemMode+0x7c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d419c:	f000 f85e 	bl	d425c <HAL_Pin_Map>
   d41a0:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d41a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d41a6:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d41a8:	602c      	str	r4, [r5, #0]
   d41aa:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d41ac:	71ac      	strb	r4, [r5, #6]
   d41ae:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41b0:	2003      	movs	r0, #3
   d41b2:	f000 f997 	bl	d44e4 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d41b6:	4a18      	ldr	r2, [pc, #96]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x80>)
   d41b8:	4918      	ldr	r1, [pc, #96]	; (d421c <_GLOBAL__sub_I_SystemMode+0x84>)
   d41ba:	4628      	mov	r0, r5
   d41bc:	f001 fc40 	bl	d5a40 <__aeabi_atexit>
 * Project particle-BLE
 * Description: Particle BLE testing
 * Author: Todd Rylaarsdam
 * Date: 8/8/2020
 */
BleCharacteristic heartRateMeasurementCharacteristic;
   d41c0:	4817      	ldr	r0, [pc, #92]	; (d4220 <_GLOBAL__sub_I_SystemMode+0x88>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d41c2:	4d18      	ldr	r5, [pc, #96]	; (d4224 <_GLOBAL__sub_I_SystemMode+0x8c>)
   d41c4:	f000 ffc6 	bl	d5154 <_ZN8particle17BleCharacteristicC1Ev>
   d41c8:	4a13      	ldr	r2, [pc, #76]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x80>)
   d41ca:	4917      	ldr	r1, [pc, #92]	; (d4228 <_GLOBAL__sub_I_SystemMode+0x90>)
   d41cc:	4814      	ldr	r0, [pc, #80]	; (d4220 <_GLOBAL__sub_I_SystemMode+0x88>)
   d41ce:	f001 fc37 	bl	d5a40 <__aeabi_atexit>

const BleUuid serviceUuid("71831bd9-530e-457a-b1d6-220fd01dbcc6");
   d41d2:	4916      	ldr	r1, [pc, #88]	; (d422c <_GLOBAL__sub_I_SystemMode+0x94>)
   d41d4:	4816      	ldr	r0, [pc, #88]	; (d4230 <_GLOBAL__sub_I_SystemMode+0x98>)
   d41d6:	f000 fbcd 	bl	d4974 <_ZN8particle7BleUuidC1EPKc>

const size_t SCAN_RESULT_MAX = 30;

BleScanResult scanResults[SCAN_RESULT_MAX];
   d41da:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d41de:	1928      	adds	r0, r5, r4
   d41e0:	f000 fb28 	bl	d4834 <_ZN8particle10BleAddressC1Ev>
   d41e4:	f104 0008 	add.w	r0, r4, #8
   d41e8:	4428      	add	r0, r5
   d41ea:	f000 fc2d 	bl	d4a48 <_ZN8particle18BleAdvertisingDataC1Ev>
   d41ee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d41f2:	4428      	add	r0, r5
   d41f4:	3454      	adds	r4, #84	; 0x54
   d41f6:	f000 fc27 	bl	d4a48 <_ZN8particle18BleAdvertisingDataC1Ev>
   d41fa:	42b4      	cmp	r4, r6
   d41fc:	d1ef      	bne.n	d41de <_GLOBAL__sub_I_SystemMode+0x46>
BlePeerDevice peer;
   d41fe:	480d      	ldr	r0, [pc, #52]	; (d4234 <_GLOBAL__sub_I_SystemMode+0x9c>)
   d4200:	f000 fe02 	bl	d4e08 <_ZN8particle13BlePeerDeviceC1Ev>
   d4204:	4a04      	ldr	r2, [pc, #16]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x80>)
   d4206:	490c      	ldr	r1, [pc, #48]	; (d4238 <_GLOBAL__sub_I_SystemMode+0xa0>)
   d4208:	480a      	ldr	r0, [pc, #40]	; (d4234 <_GLOBAL__sub_I_SystemMode+0x9c>)
    RGB.color(255, 255, 255);
  }
  else {
    RGB.color(0, 0, 255);
  }
   d420a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const BleUuid serviceUuid("71831bd9-530e-457a-b1d6-220fd01dbcc6");

const size_t SCAN_RESULT_MAX = 30;

BleScanResult scanResults[SCAN_RESULT_MAX];
BlePeerDevice peer;
   d420e:	f001 bc17 	b.w	d5a40 <__aeabi_atexit>
   d4212:	bf00      	nop
   d4214:	2003e3e4 	.word	0x2003e3e4
   d4218:	2003d9e4 	.word	0x2003d9e4
   d421c:	000d40b3 	.word	0x000d40b3
   d4220:	2003d9fc 	.word	0x2003d9fc
   d4224:	2003da0c 	.word	0x2003da0c
   d4228:	000d4d47 	.word	0x000d4d47
   d422c:	000d5e13 	.word	0x000d5e13
   d4230:	2003d9e8 	.word	0x2003d9e8
   d4234:	2003da04 	.word	0x2003da04
   d4238:	000d4d55 	.word	0x000d4d55

000d423c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <netdb_freeaddrinfo+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	689b      	ldr	r3, [r3, #8]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030268 	.word	0x00030268

000d424c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <netdb_getaddrinfo+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	68db      	ldr	r3, [r3, #12]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030268 	.word	0x00030268

000d425c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_Pin_Map+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	681b      	ldr	r3, [r3, #0]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	0003022c 	.word	0x0003022c

000d426c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_RNG_GetRandomNumber+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	685b      	ldr	r3, [r3, #4]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030218 	.word	0x00030218

000d427c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_Delay_Microseconds+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	68db      	ldr	r3, [r3, #12]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030218 	.word	0x00030218

000d428c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	695b      	ldr	r3, [r3, #20]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030218 	.word	0x00030218

000d429c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <hal_ble_stack_init+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	689b      	ldr	r3, [r3, #8]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030278 	.word	0x00030278

000d42ac <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <hal_ble_gap_set_advertising_parameters+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030278 	.word	0x00030278

000d42bc <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <hal_ble_gap_get_advertising_parameters+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030278 	.word	0x00030278

000d42cc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <hal_ble_gap_set_advertising_data+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030278 	.word	0x00030278

000d42dc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <hal_ble_gap_set_scan_response_data+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030278 	.word	0x00030278

000d42ec <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <hal_ble_gap_start_advertising+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030278 	.word	0x00030278

000d42fc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b03      	ldr	r3, [pc, #12]	; (d430c <hal_ble_gap_disconnect+0x10>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4306:	9301      	str	r3, [sp, #4]
   d4308:	bd08      	pop	{r3, pc}
   d430a:	0000      	.short	0x0000
   d430c:	00030278 	.word	0x00030278

000d4310 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b03      	ldr	r3, [pc, #12]	; (d4320 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d431a:	9301      	str	r3, [sp, #4]
   d431c:	bd08      	pop	{r3, pc}
   d431e:	0000      	.short	0x0000
   d4320:	00030278 	.word	0x00030278

000d4324 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <os_thread_is_current+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	689b      	ldr	r3, [r3, #8]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030248 	.word	0x00030248

000d4334 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <os_thread_join+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	691b      	ldr	r3, [r3, #16]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030248 	.word	0x00030248

000d4344 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <os_thread_cleanup+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	695b      	ldr	r3, [r3, #20]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030248 	.word	0x00030248

000d4354 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <os_mutex_recursive_create+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030248 	.word	0x00030248

000d4364 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <os_mutex_recursive_destroy+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030248 	.word	0x00030248

000d4374 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <os_mutex_recursive_lock+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030248 	.word	0x00030248

000d4384 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <os_mutex_recursive_unlock+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030248 	.word	0x00030248

000d4394 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <inet_inet_ntop+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	695b      	ldr	r3, [r3, #20]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030264 	.word	0x00030264

000d43a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_USART_Init+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	681b      	ldr	r3, [r3, #0]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003023c 	.word	0x0003023c

000d43b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_USART_Write_Data+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	68db      	ldr	r3, [r3, #12]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003023c 	.word	0x0003023c

000d43c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USART_Available_Data+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	691b      	ldr	r3, [r3, #16]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003023c 	.word	0x0003023c

000d43d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USART_Read_Data+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003023c 	.word	0x0003023c

000d43e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USART_Peek_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	699b      	ldr	r3, [r3, #24]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003023c 	.word	0x0003023c

000d43f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USART_Flush_Data+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	69db      	ldr	r3, [r3, #28]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003023c 	.word	0x0003023c

000d4404 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USART_Available_Data_For_Write+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003023c 	.word	0x0003023c

000d4414 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USB_USART_Init+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	681b      	ldr	r3, [r3, #0]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003024c 	.word	0x0003024c

000d4424 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USB_USART_Available_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	691b      	ldr	r3, [r3, #16]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003024c 	.word	0x0003024c

000d4434 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	695b      	ldr	r3, [r3, #20]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003024c 	.word	0x0003024c

000d4444 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USB_USART_Receive_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	699b      	ldr	r3, [r3, #24]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003024c 	.word	0x0003024c

000d4454 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USB_USART_Send_Data+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	69db      	ldr	r3, [r3, #28]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003024c 	.word	0x0003024c

000d4464 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USB_USART_Flush_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6a1b      	ldr	r3, [r3, #32]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003024c 	.word	0x0003024c

000d4474 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <LED_SetSignalingColor+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	685b      	ldr	r3, [r3, #4]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030260 	.word	0x00030260

000d4484 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <LED_Signaling_Start+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	689b      	ldr	r3, [r3, #8]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030260 	.word	0x00030260

000d4494 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <LED_Signaling_Stop+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	68db      	ldr	r3, [r3, #12]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030260 	.word	0x00030260

000d44a4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <LED_RGB_IsOverRidden+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	699b      	ldr	r3, [r3, #24]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030260 	.word	0x00030260

000d44b4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <LED_On+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	69db      	ldr	r3, [r3, #28]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030260 	.word	0x00030260

000d44c4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <panic_+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030260 	.word	0x00030260

000d44d4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <log_message+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030260 	.word	0x00030260

000d44e4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <set_system_mode+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	685b      	ldr	r3, [r3, #4]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030220 	.word	0x00030220

000d44f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b03      	ldr	r3, [pc, #12]	; (d4504 <system_ctrl_set_app_request_handler+0x10>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44fe:	9301      	str	r3, [sp, #4]
   d4500:	bd08      	pop	{r3, pc}
   d4502:	0000      	.short	0x0000
   d4504:	00030220 	.word	0x00030220

000d4508 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b03      	ldr	r3, [pc, #12]	; (d4518 <system_ctrl_set_result+0x10>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4512:	9301      	str	r3, [sp, #4]
   d4514:	bd08      	pop	{r3, pc}
   d4516:	0000      	.short	0x0000
   d4518:	00030220 	.word	0x00030220

000d451c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <network_connect+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	685b      	ldr	r3, [r3, #4]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030240 	.word	0x00030240

000d452c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <network_connecting+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	689b      	ldr	r3, [r3, #8]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030240 	.word	0x00030240

000d453c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_disconnect+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	68db      	ldr	r3, [r3, #12]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <network_ready+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	691b      	ldr	r3, [r3, #16]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030240 	.word	0x00030240

000d455c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_on+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_off+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	699b      	ldr	r3, [r3, #24]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_listen+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	69db      	ldr	r3, [r3, #28]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_listening+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6a1b      	ldr	r3, [r3, #32]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_set_listen_timeout+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_get_listen_timeout+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030244 	.word	0x00030244

000d45cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <malloc+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	681b      	ldr	r3, [r3, #0]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003021c 	.word	0x0003021c

000d45dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <free+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	685b      	ldr	r3, [r3, #4]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003021c 	.word	0x0003021c

000d45ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <realloc+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	689b      	ldr	r3, [r3, #8]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003021c 	.word	0x0003021c

000d45fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d45fc:	2200      	movs	r2, #0
   d45fe:	4611      	mov	r1, r2
   d4600:	6840      	ldr	r0, [r0, #4]
   d4602:	f7ff bfc3 	b.w	d458c <network_listening>

000d4606 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4606:	2200      	movs	r2, #0
   d4608:	4611      	mov	r1, r2
   d460a:	6840      	ldr	r0, [r0, #4]
   d460c:	f7ff bfce 	b.w	d45ac <network_get_listen_timeout>

000d4610 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4610:	2200      	movs	r2, #0
   d4612:	6840      	ldr	r0, [r0, #4]
   d4614:	f7ff bfc2 	b.w	d459c <network_set_listen_timeout>

000d4618 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4618:	2200      	movs	r2, #0
   d461a:	f081 0101 	eor.w	r1, r1, #1
   d461e:	6840      	ldr	r0, [r0, #4]
   d4620:	f7ff bfac 	b.w	d457c <network_listen>

000d4624 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4624:	2300      	movs	r3, #0
   d4626:	461a      	mov	r2, r3
   d4628:	4619      	mov	r1, r3
   d462a:	6840      	ldr	r0, [r0, #4]
   d462c:	f7ff bf9e 	b.w	d456c <network_off>

000d4630 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4630:	2300      	movs	r3, #0
   d4632:	461a      	mov	r2, r3
   d4634:	4619      	mov	r1, r3
   d4636:	6840      	ldr	r0, [r0, #4]
   d4638:	f7ff bf90 	b.w	d455c <network_on>

000d463c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d463c:	2200      	movs	r2, #0
   d463e:	4611      	mov	r1, r2
   d4640:	6840      	ldr	r0, [r0, #4]
   d4642:	f7ff bf83 	b.w	d454c <network_ready>

000d4646 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4646:	2200      	movs	r2, #0
   d4648:	4611      	mov	r1, r2
   d464a:	6840      	ldr	r0, [r0, #4]
   d464c:	f7ff bf6e 	b.w	d452c <network_connecting>

000d4650 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4650:	2200      	movs	r2, #0
   d4652:	2102      	movs	r1, #2
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	f7ff bf71 	b.w	d453c <network_disconnect>

000d465a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d465a:	2300      	movs	r3, #0
   d465c:	461a      	mov	r2, r3
   d465e:	6840      	ldr	r0, [r0, #4]
   d4660:	f7ff bf5c 	b.w	d451c <network_connect>

000d4664 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4664:	4b02      	ldr	r3, [pc, #8]	; (d4670 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4666:	2203      	movs	r2, #3
   d4668:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d466a:	4a02      	ldr	r2, [pc, #8]	; (d4674 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d466c:	601a      	str	r2, [r3, #0]
   d466e:	4770      	bx	lr
   d4670:	2003e3f0 	.word	0x2003e3f0
   d4674:	000d5e40 	.word	0x000d5e40

000d4678 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4678:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d467a:	4c09      	ldr	r4, [pc, #36]	; (d46a0 <_GLOBAL__sub_I_System+0x28>)
   d467c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d467e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4682:	6020      	str	r0, [r4, #0]
   d4684:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4686:	71a0      	strb	r0, [r4, #6]
   d4688:	8120      	strh	r0, [r4, #8]
   d468a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d468c:	f7ff ff2a 	bl	d44e4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4690:	4620      	mov	r0, r4
   d4692:	4a04      	ldr	r2, [pc, #16]	; (d46a4 <_GLOBAL__sub_I_System+0x2c>)
   d4694:	4904      	ldr	r1, [pc, #16]	; (d46a8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d469a:	f001 b9d1 	b.w	d5a40 <__aeabi_atexit>
   d469e:	bf00      	nop
   d46a0:	2003e3f8 	.word	0x2003e3f8
   d46a4:	2003d9e4 	.word	0x2003d9e4
   d46a8:	000d40b3 	.word	0x000d40b3

000d46ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d46ac:	b510      	push	{r4, lr}
   d46ae:	4604      	mov	r4, r0
{
	free(buffer);
   d46b0:	6800      	ldr	r0, [r0, #0]
   d46b2:	f7ff ff93 	bl	d45dc <free>
}
   d46b6:	4620      	mov	r0, r4
   d46b8:	bd10      	pop	{r4, pc}

000d46ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d46ba:	b510      	push	{r4, lr}
   d46bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d46be:	6800      	ldr	r0, [r0, #0]
   d46c0:	b108      	cbz	r0, d46c6 <_ZN6String10invalidateEv+0xc>
   d46c2:	f7ff ff8b 	bl	d45dc <free>
	buffer = NULL;
   d46c6:	2300      	movs	r3, #0
   d46c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d46ca:	60a3      	str	r3, [r4, #8]
   d46cc:	6063      	str	r3, [r4, #4]
   d46ce:	bd10      	pop	{r4, pc}

000d46d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d46d0:	b538      	push	{r3, r4, r5, lr}
   d46d2:	4604      	mov	r4, r0
   d46d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d46d6:	6800      	ldr	r0, [r0, #0]
   d46d8:	3101      	adds	r1, #1
   d46da:	f7ff ff87 	bl	d45ec <realloc>
	if (newbuffer) {
   d46de:	b110      	cbz	r0, d46e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d46e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d46e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d46e6:	bd38      	pop	{r3, r4, r5, pc}

000d46e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d46e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d46ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d46ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d46ee:	b113      	cbz	r3, d46f6 <_ZN6String7reserveEj+0xe>
   d46f0:	6843      	ldr	r3, [r0, #4]
   d46f2:	428b      	cmp	r3, r1
   d46f4:	d207      	bcs.n	d4706 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d46f6:	4620      	mov	r0, r4
   d46f8:	f7ff ffea 	bl	d46d0 <_ZN6String12changeBufferEj>
   d46fc:	b120      	cbz	r0, d4708 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d46fe:	68a3      	ldr	r3, [r4, #8]
   d4700:	b90b      	cbnz	r3, d4706 <_ZN6String7reserveEj+0x1e>
   d4702:	6822      	ldr	r2, [r4, #0]
   d4704:	7013      	strb	r3, [r2, #0]
   d4706:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4708:	bd10      	pop	{r4, pc}

000d470a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d470a:	b570      	push	{r4, r5, r6, lr}
   d470c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d470e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4710:	4604      	mov	r4, r0
   d4712:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4714:	f7ff ffe8 	bl	d46e8 <_ZN6String7reserveEj>
   d4718:	b918      	cbnz	r0, d4722 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d471a:	4620      	mov	r0, r4
   d471c:	f7ff ffcd 	bl	d46ba <_ZN6String10invalidateEv>
		return *this;
   d4720:	e009      	b.n	d4736 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4722:	462a      	mov	r2, r5
   d4724:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4726:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4728:	6820      	ldr	r0, [r4, #0]
   d472a:	f001 faf6 	bl	d5d1a <memcpy>
	buffer[len] = 0;
   d472e:	6822      	ldr	r2, [r4, #0]
   d4730:	68a3      	ldr	r3, [r4, #8]
   d4732:	2100      	movs	r1, #0
   d4734:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4736:	4620      	mov	r0, r4
   d4738:	bd70      	pop	{r4, r5, r6, pc}

000d473a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d473a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d473c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d473e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4740:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4742:	6043      	str	r3, [r0, #4]
	len = 0;
   d4744:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4746:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4748:	460d      	mov	r5, r1
   d474a:	b139      	cbz	r1, d475c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d474c:	4608      	mov	r0, r1
   d474e:	f001 fb3b 	bl	d5dc8 <strlen>
   d4752:	4629      	mov	r1, r5
   d4754:	4602      	mov	r2, r0
   d4756:	4620      	mov	r0, r4
   d4758:	f7ff ffd7 	bl	d470a <_ZN6String4copyEPKcj>
}
   d475c:	4620      	mov	r0, r4
   d475e:	bd38      	pop	{r3, r4, r5, pc}

000d4760 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4760:	4770      	bx	lr

000d4762 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4762:	2000      	movs	r0, #0
   d4764:	4770      	bx	lr

000d4766 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4766:	4770      	bx	lr

000d4768 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4768:	2000      	movs	r0, #0
   d476a:	4770      	bx	lr

000d476c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d476c:	b510      	push	{r4, lr}
   d476e:	2114      	movs	r1, #20
   d4770:	4604      	mov	r4, r0
   d4772:	f001 f96a 	bl	d5a4a <_ZdlPvj>
   d4776:	4620      	mov	r0, r4
   d4778:	bd10      	pop	{r4, pc}

000d477a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d477a:	b510      	push	{r4, lr}
   d477c:	2114      	movs	r1, #20
   d477e:	4604      	mov	r4, r0
   d4780:	f001 f963 	bl	d5a4a <_ZdlPvj>
   d4784:	4620      	mov	r0, r4
   d4786:	bd10      	pop	{r4, pc}

000d4788 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4788:	f7ff bc87 	b.w	d409a <_ZdlPv>

000d478c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d478c:	f7ff bc85 	b.w	d409a <_ZdlPv>

000d4790 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4790:	b510      	push	{r4, lr}
   d4792:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4794:	6800      	ldr	r0, [r0, #0]
   d4796:	b108      	cbz	r0, d479c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4798:	f7ff fde4 	bl	d4364 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d479c:	4620      	mov	r0, r4
   d479e:	bd10      	pop	{r4, pc}

000d47a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d47a0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d47a2:	200a      	movs	r0, #10
   d47a4:	4a02      	ldr	r2, [pc, #8]	; (d47b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d47a6:	2100      	movs	r1, #0
   d47a8:	f7ff fe8c 	bl	d44c4 <panic_>
    }
}
   d47ac:	bd08      	pop	{r3, pc}
   d47ae:	bf00      	nop
   d47b0:	000d427d 	.word	0x000d427d

000d47b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47b4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47b6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d47b8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d47ba:	689b      	ldr	r3, [r3, #8]
   d47bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47be:	68a3      	ldr	r3, [r4, #8]
   d47c0:	3b01      	subs	r3, #1
   d47c2:	60a3      	str	r3, [r4, #8]
   d47c4:	b92b      	cbnz	r3, d47d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d47c6:	6823      	ldr	r3, [r4, #0]
   d47c8:	4620      	mov	r0, r4
   d47ca:	68db      	ldr	r3, [r3, #12]
        }
    }
   d47cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d47d0:	4718      	bx	r3
   d47d2:	bd10      	pop	{r4, pc}

000d47d4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d47d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d47d8:	b2da      	uxtb	r2, r3
   d47da:	2a09      	cmp	r2, #9
   d47dc:	d801      	bhi.n	d47e2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d47de:	4618      	mov	r0, r3
   d47e0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d47e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d47e6:	2b05      	cmp	r3, #5
   d47e8:	d801      	bhi.n	d47ee <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d47ea:	3857      	subs	r0, #87	; 0x57
   d47ec:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d47ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d47f2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d47f4:	bf94      	ite	ls
   d47f6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d47f8:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d47fc:	4770      	bx	lr
	...

000d4800 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4800:	b510      	push	{r4, lr}
            locked_(false) {
   d4802:	2300      	movs	r3, #0
   d4804:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4806:	4b04      	ldr	r3, [pc, #16]	; (d4818 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4808:	4604      	mov	r4, r0
   d480a:	6818      	ldr	r0, [r3, #0]
   d480c:	f7ff fdb2 	bl	d4374 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4810:	2301      	movs	r3, #1
   d4812:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4814:	4620      	mov	r0, r4
   d4816:	bd10      	pop	{r4, pc}
   d4818:	2003e40c 	.word	0x2003e40c

000d481c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d481c:	b510      	push	{r4, lr}
        if (locked_) {
   d481e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4820:	4604      	mov	r4, r0
        if (locked_) {
   d4822:	b11b      	cbz	r3, d482c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4824:	4b02      	ldr	r3, [pc, #8]	; (d4830 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4826:	6818      	ldr	r0, [r3, #0]
   d4828:	f7ff fdac 	bl	d4384 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d482c:	4620      	mov	r0, r4
   d482e:	bd10      	pop	{r4, pc}
   d4830:	2003e40c 	.word	0x2003e40c

000d4834 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4834:	2200      	movs	r2, #0
   d4836:	6002      	str	r2, [r0, #0]
   d4838:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d483a:	4770      	bx	lr

000d483c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d483c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d483e:	7982      	ldrb	r2, [r0, #6]
   d4840:	798b      	ldrb	r3, [r1, #6]
   d4842:	429a      	cmp	r2, r3
   d4844:	d106      	bne.n	d4854 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4846:	2206      	movs	r2, #6
   d4848:	f001 fa58 	bl	d5cfc <memcmp>
   d484c:	fab0 f080 	clz	r0, r0
   d4850:	0940      	lsrs	r0, r0, #5
   d4852:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4854:	2000      	movs	r0, #0
}
   d4856:	bd08      	pop	{r3, pc}

000d4858 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4858:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d485a:	2301      	movs	r3, #1
   d485c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d485e:	4b05      	ldr	r3, [pc, #20]	; (d4874 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4860:	4602      	mov	r2, r0
   d4862:	f103 0110 	add.w	r1, r3, #16
   d4866:	f853 4b04 	ldr.w	r4, [r3], #4
   d486a:	f842 4b04 	str.w	r4, [r2], #4
   d486e:	428b      	cmp	r3, r1
   d4870:	d1f9      	bne.n	d4866 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4872:	bd10      	pop	{r4, pc}
   d4874:	000d6044 	.word	0x000d6044

000d4878 <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4878:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d487a:	690b      	ldr	r3, [r1, #16]
   d487c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d487e:	f101 0210 	add.w	r2, r1, #16
   d4882:	4603      	mov	r3, r0
   d4884:	f851 4b04 	ldr.w	r4, [r1], #4
   d4888:	f843 4b04 	str.w	r4, [r3], #4
   d488c:	4291      	cmp	r1, r2
   d488e:	d1f9      	bne.n	d4884 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4890:	bd10      	pop	{r4, pc}

000d4892 <_ZNK8particle7BleUuid4typeEv>:
    }
}

BleUuidType BleUuid::type() const {
    return type_;
}
   d4892:	6900      	ldr	r0, [r0, #16]
   d4894:	4770      	bx	lr

000d4896 <_ZNK8particle7BleUuid7shortedEv>:
    }
    return uuid;
}

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4896:	7b42      	ldrb	r2, [r0, #13]
   d4898:	7b00      	ldrb	r0, [r0, #12]
}
   d489a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d489e:	4770      	bx	lr

000d48a0 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d48a0:	4770      	bx	lr
	...

000d48a4 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d48a4:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d48a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d48a8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d48aa:	4b31      	ldr	r3, [pc, #196]	; (d4970 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d48ac:	460e      	mov	r6, r1
   d48ae:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d48b0:	4602      	mov	r2, r0
   d48b2:	f103 0110 	add.w	r1, r3, #16
   d48b6:	f853 0b04 	ldr.w	r0, [r3], #4
   d48ba:	f842 0b04 	str.w	r0, [r2], #4
   d48be:	428b      	cmp	r3, r1
   d48c0:	d1f9      	bne.n	d48b6 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d48c2:	2e00      	cmp	r6, #0
   d48c4:	d051      	beq.n	d496a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d48c6:	2124      	movs	r1, #36	; 0x24
   d48c8:	4630      	mov	r0, r6
   d48ca:	f001 fa85 	bl	d5dd8 <strnlen>
   d48ce:	2804      	cmp	r0, #4
   d48d0:	d010      	beq.n	d48f4 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d48d2:	2700      	movs	r7, #0
   d48d4:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d48d6:	2124      	movs	r1, #36	; 0x24
   d48d8:	4630      	mov	r0, r6
   d48da:	f001 fa7d 	bl	d5dd8 <strnlen>
   d48de:	42b8      	cmp	r0, r7
   d48e0:	d901      	bls.n	d48e6 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d48e2:	bb44      	cbnz	r4, d4936 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d48e4:	e041      	b.n	d496a <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d48e6:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d48e8:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d48ea:	42a5      	cmp	r5, r4
   d48ec:	d03d      	beq.n	d496a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d48ee:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d48f2:	e7fa      	b.n	d48ea <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d48f4:	7830      	ldrb	r0, [r6, #0]
   d48f6:	f7ff ff6d 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d48fa:	1e04      	subs	r4, r0, #0
   d48fc:	db18      	blt.n	d4930 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d48fe:	7870      	ldrb	r0, [r6, #1]
   d4900:	f7ff ff68 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4904:	2800      	cmp	r0, #0
   d4906:	db13      	blt.n	d4930 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4908:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d490c:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4910:	78b0      	ldrb	r0, [r6, #2]
   d4912:	f7ff ff5f 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4916:	1e04      	subs	r4, r0, #0
   d4918:	db0a      	blt.n	d4930 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d491a:	78f0      	ldrb	r0, [r6, #3]
   d491c:	f7ff ff5a 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4920:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4922:	bfa1      	itttt	ge
   d4924:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4928:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d492c:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d492e:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4930:	2300      	movs	r3, #0
   d4932:	612b      	str	r3, [r5, #16]
   d4934:	e019      	b.n	d496a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4936:	5df0      	ldrb	r0, [r6, r7]
   d4938:	f7ff ff4c 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d493c:	0603      	lsls	r3, r0, #24
   d493e:	d412      	bmi.n	d4966 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4940:	3c01      	subs	r4, #1
   d4942:	0100      	lsls	r0, r0, #4
   d4944:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4946:	2124      	movs	r1, #36	; 0x24
   d4948:	4630      	mov	r0, r6
   d494a:	f001 fa45 	bl	d5dd8 <strnlen>
   d494e:	3701      	adds	r7, #1
   d4950:	4287      	cmp	r7, r0
   d4952:	d208      	bcs.n	d4966 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4954:	5df0      	ldrb	r0, [r6, r7]
   d4956:	f7ff ff3d 	bl	d47d4 <_ZN8particle11hexToNibbleEc>
   d495a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d495c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d495e:	bfa2      	ittt	ge
   d4960:	5d2b      	ldrbge	r3, [r5, r4]
   d4962:	4318      	orrge	r0, r3
   d4964:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4966:	3701      	adds	r7, #1
   d4968:	e7b5      	b.n	d48d6 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d496a:	b003      	add	sp, #12
   d496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d496e:	bf00      	nop
   d4970:	000d6044 	.word	0x000d6044

000d4974 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d4974:	b538      	push	{r3, r4, r5, lr}
   d4976:	4604      	mov	r4, r0
   d4978:	460d      	mov	r5, r1
        : BleUuid() {
   d497a:	f7ff ff6d 	bl	d4858 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d497e:	4620      	mov	r0, r4
   d4980:	4629      	mov	r1, r5
   d4982:	f7ff ff8f 	bl	d48a4 <_ZN8particle7BleUuid9constructEPKc>
}
   d4986:	4620      	mov	r0, r4
   d4988:	bd38      	pop	{r3, r4, r5, pc}

000d498a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d498a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d498c:	b18b      	cbz	r3, d49b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d498e:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4990:	1ce5      	adds	r5, r4, #3
   d4992:	428d      	cmp	r5, r1
   d4994:	d80f      	bhi.n	d49b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4996:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4998:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d499a:	5d87      	ldrb	r7, [r0, r6]
   d499c:	4297      	cmp	r7, r2
   d499e:	d105      	bne.n	d49ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d49a0:	442e      	add	r6, r5
   d49a2:	42b1      	cmp	r1, r6
   d49a4:	d307      	bcc.n	d49b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d49a6:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d49a8:	1c68      	adds	r0, r5, #1
                return adsLen;
   d49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d49ac:	3501      	adds	r5, #1
   d49ae:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d49b0:	e7ee      	b.n	d4990 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d49b2:	4618      	mov	r0, r3
   d49b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49b6:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d49b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d49ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d49be:	4604      	mov	r4, r0
   d49c0:	460e      	mov	r6, r1
   d49c2:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d49c4:	4617      	mov	r7, r2
   d49c6:	2a00      	cmp	r2, #0
   d49c8:	d03a      	beq.n	d4a40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d49ca:	460a      	mov	r2, r1
   d49cc:	ab01      	add	r3, sp, #4
   d49ce:	6a01      	ldr	r1, [r0, #32]
   d49d0:	f7ff ffdb 	bl	d498a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d49d4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d49d8:	6a22      	ldr	r2, [r4, #32]
   d49da:	bb03      	cbnz	r3, d4a1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d49dc:	b1f8      	cbz	r0, d4a1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d49de:	1c96      	adds	r6, r2, #2
   d49e0:	442e      	add	r6, r5
   d49e2:	1a36      	subs	r6, r6, r0
   d49e4:	2e1f      	cmp	r6, #31
   d49e6:	d82b      	bhi.n	d4a40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d49e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d49ec:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d49f0:	ebc8 0202 	rsb	r2, r8, r2
   d49f4:	1a12      	subs	r2, r2, r0
   d49f6:	eb00 0108 	add.w	r1, r0, r8
   d49fa:	eb05 0009 	add.w	r0, r5, r9
   d49fe:	b292      	uxth	r2, r2
   d4a00:	4421      	add	r1, r4
   d4a02:	4420      	add	r0, r4
   d4a04:	f001 f994 	bl	d5d30 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4a08:	1c6b      	adds	r3, r5, #1
   d4a0a:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4a0e:	462a      	mov	r2, r5
   d4a10:	4639      	mov	r1, r7
   d4a12:	eb04 0009 	add.w	r0, r4, r9
   d4a16:	f001 f980 	bl	d5d1a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4a1a:	6226      	str	r6, [r4, #32]
   d4a1c:	e010      	b.n	d4a40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4a1e:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4a20:	182b      	adds	r3, r5, r0
   d4a22:	2b1f      	cmp	r3, #31
   d4a24:	d80c      	bhi.n	d4a40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4a26:	1c6b      	adds	r3, r5, #1
   d4a28:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4a2a:	4422      	add	r2, r4
   d4a2c:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4a2e:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4a30:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4a32:	4420      	add	r0, r4
   d4a34:	462a      	mov	r2, r5
   d4a36:	f001 f970 	bl	d5d1a <memcpy>
        selfLen_ += len;
   d4a3a:	6a22      	ldr	r2, [r4, #32]
   d4a3c:	442a      	add	r2, r5
   d4a3e:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4a40:	6a20      	ldr	r0, [r4, #32]
}
   d4a42:	b003      	add	sp, #12
   d4a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4a48 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a4a:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4a4c:	4603      	mov	r3, r0
   d4a4e:	f100 021f 	add.w	r2, r0, #31
   d4a52:	2000      	movs	r0, #0
   d4a54:	f803 0b01 	strb.w	r0, [r3], #1
   d4a58:	4293      	cmp	r3, r2
   d4a5a:	f04f 0100 	mov.w	r1, #0
   d4a5e:	d1f9      	bne.n	d4a54 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4a60:	aa04      	add	r2, sp, #16
   d4a62:	2306      	movs	r3, #6
   d4a64:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4a68:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4a6a:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4a6c:	9100      	str	r1, [sp, #0]
   d4a6e:	4620      	mov	r0, r4
   d4a70:	4619      	mov	r1, r3
   d4a72:	f7ff ffa2 	bl	d49ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4a76:	4620      	mov	r0, r4
   d4a78:	b004      	add	sp, #16
   d4a7a:	bd10      	pop	{r4, pc}

000d4a7c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d4a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a7e:	460c      	mov	r4, r1
   d4a80:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d4a82:	2114      	movs	r1, #20
   d4a84:	4620      	mov	r0, r4
   d4a86:	f001 f9a7 	bl	d5dd8 <strnlen>
   d4a8a:	2300      	movs	r3, #0
   d4a8c:	9300      	str	r3, [sp, #0]
   d4a8e:	4622      	mov	r2, r4
   d4a90:	4603      	mov	r3, r0
   d4a92:	2109      	movs	r1, #9
   d4a94:	4628      	mov	r0, r5
   d4a96:	f7ff ff90 	bl	d49ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4a9a:	b003      	add	sp, #12
   d4a9c:	bd30      	pop	{r4, r5, pc}

000d4a9e <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d4a9e:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d4aa0:	9300      	str	r3, [sp, #0]
   d4aa2:	4613      	mov	r3, r2
   d4aa4:	460a      	mov	r2, r1
   d4aa6:	21ff      	movs	r1, #255	; 0xff
   d4aa8:	f7ff ff87 	bl	d49ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4aac:	b003      	add	sp, #12
   d4aae:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ab2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4ab4:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4ab6:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4ab8:	ab01      	add	r3, sp, #4
   d4aba:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4abc:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4abe:	f7ff ff64 	bl	d498a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4ac2:	4605      	mov	r5, r0
   d4ac4:	b178      	cbz	r0, d4ae6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4ac6:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4ac8:	6a22      	ldr	r2, [r4, #32]
   d4aca:	1829      	adds	r1, r5, r0
   d4acc:	1a12      	subs	r2, r2, r0
   d4ace:	1b52      	subs	r2, r2, r5
   d4ad0:	4421      	add	r1, r4
   d4ad2:	4420      	add	r0, r4
   d4ad4:	f001 f921 	bl	d5d1a <memcpy>
        selfLen_ -= len;
   d4ad8:	6a23      	ldr	r3, [r4, #32]
   d4ada:	1b5d      	subs	r5, r3, r5
   d4adc:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4ade:	4631      	mov	r1, r6
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff ffe6 	bl	d4ab2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4ae6:	b002      	add	sp, #8
   d4ae8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4aec <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4aec:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4aee:	2500      	movs	r5, #0
   d4af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4af4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4af6:	8043      	strh	r3, [r0, #2]
   d4af8:	220e      	movs	r2, #14
   d4afa:	4629      	mov	r1, r5
   d4afc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4afe:	7105      	strb	r5, [r0, #4]
   d4b00:	3006      	adds	r0, #6
   d4b02:	f001 f930 	bl	d5d66 <memset>
   d4b06:	f104 0014 	add.w	r0, r4, #20
   d4b0a:	f7ff fea5 	bl	d4858 <_ZN8particle7BleUuidC1Ev>
   d4b0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4b12:	f7ff fea1 	bl	d4858 <_ZN8particle7BleUuidC1Ev>
   d4b16:	4904      	ldr	r1, [pc, #16]	; (d4b28 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4b18:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4b1c:	f7ff fe0d 	bl	d473a <_ZN6StringC1EPK19__FlashStringHelper>
   d4b20:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4b22:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd38      	pop	{r3, r4, r5, pc}
   d4b28:	000d60fb 	.word	0x000d60fb

000d4b2c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4b2c:	b510      	push	{r4, lr}
   d4b2e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4b30:	69c2      	ldr	r2, [r0, #28]
   d4b32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4b36:	4293      	cmp	r3, r2
   d4b38:	4618      	mov	r0, r3
   d4b3a:	d006      	beq.n	d4b4a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4b3c:	6804      	ldr	r4, [r0, #0]
   d4b3e:	8824      	ldrh	r4, [r4, #0]
   d4b40:	428c      	cmp	r4, r1
   d4b42:	f103 0308 	add.w	r3, r3, #8
   d4b46:	d1f6      	bne.n	d4b36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4b48:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4b4a:	2000      	movs	r0, #0
    }
   d4b4c:	bd10      	pop	{r4, pc}

000d4b4e <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4b4e:	b510      	push	{r4, lr}
    return impl()->address();
   d4b50:	680a      	ldr	r2, [r1, #0]
   d4b52:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4b56:	6003      	str	r3, [r0, #0]
   d4b58:	6853      	ldr	r3, [r2, #4]
   d4b5a:	6043      	str	r3, [r0, #4]
}
   d4b5c:	bd10      	pop	{r4, pc}

000d4b5e <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4b5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4b60:	6802      	ldr	r2, [r0, #0]
   d4b62:	680b      	ldr	r3, [r1, #0]
   d4b64:	8812      	ldrh	r2, [r2, #0]
   d4b66:	881b      	ldrh	r3, [r3, #0]
   d4b68:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4b6a:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4b6c:	d10c      	bne.n	d4b88 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4b6e:	4601      	mov	r1, r0
   d4b70:	4668      	mov	r0, sp
   d4b72:	f7ff ffec 	bl	d4b4e <_ZNK8particle13BlePeerDevice7addressEv>
   d4b76:	4621      	mov	r1, r4
   d4b78:	a802      	add	r0, sp, #8
   d4b7a:	f7ff ffe8 	bl	d4b4e <_ZNK8particle13BlePeerDevice7addressEv>
   d4b7e:	a902      	add	r1, sp, #8
   d4b80:	4668      	mov	r0, sp
   d4b82:	f7ff fe5b 	bl	d483c <_ZNK8particle10BleAddresseqERKS0_>
   d4b86:	b900      	cbnz	r0, d4b8a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4b88:	2000      	movs	r0, #0
}
   d4b8a:	b004      	add	sp, #16
   d4b8c:	bd10      	pop	{r4, pc}
	...

000d4b90 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4b90:	b510      	push	{r4, lr}
   d4b92:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4b94:	2034      	movs	r0, #52	; 0x34
   d4b96:	f7ff fa7e 	bl	d4096 <_Znwj>
   d4b9a:	4601      	mov	r1, r0
   d4b9c:	b168      	cbz	r0, d4bba <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	6003      	str	r3, [r0, #0]
   d4ba2:	6043      	str	r3, [r0, #4]
   d4ba4:	6083      	str	r3, [r0, #8]
   d4ba6:	60c3      	str	r3, [r0, #12]
   d4ba8:	6103      	str	r3, [r0, #16]
   d4baa:	6143      	str	r3, [r0, #20]
   d4bac:	6183      	str	r3, [r0, #24]
   d4bae:	61c3      	str	r3, [r0, #28]
   d4bb0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d4bb2:	6243      	str	r3, [r0, #36]	; 0x24
   d4bb4:	6283      	str	r3, [r0, #40]	; 0x28
   d4bb6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4bb8:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4bba:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4bbc:	b919      	cbnz	r1, d4bc6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d4bbe:	4a0a      	ldr	r2, [pc, #40]	; (d4be8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4bc0:	200a      	movs	r0, #10
   d4bc2:	f7ff fc7f 	bl	d44c4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4bc6:	2000      	movs	r0, #0
   d4bc8:	f7ff fb68 	bl	d429c <hal_ble_stack_init>
   d4bcc:	b120      	cbz	r0, d4bd8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d4bce:	4a06      	ldr	r2, [pc, #24]	; (d4be8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4bd0:	2100      	movs	r1, #0
   d4bd2:	200a      	movs	r0, #10
   d4bd4:	f7ff fc76 	bl	d44c4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4bd8:	2200      	movs	r2, #0
   d4bda:	6821      	ldr	r1, [r4, #0]
   d4bdc:	4803      	ldr	r0, [pc, #12]	; (d4bec <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4bde:	f7ff fb97 	bl	d4310 <hal_ble_set_callback_on_periph_link_events>
}
   d4be2:	4620      	mov	r0, r4
   d4be4:	bd10      	pop	{r4, pc}
   d4be6:	bf00      	nop
   d4be8:	000d427d 	.word	0x000d427d
   d4bec:	000d4fb5 	.word	0x000d4fb5

000d4bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4bf0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4bf2:	4c0a      	ldr	r4, [pc, #40]	; (d4c1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4bf4:	6823      	ldr	r3, [r4, #0]
   d4bf6:	07db      	lsls	r3, r3, #31
   d4bf8:	d40e      	bmi.n	d4c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	f7ff fa51 	bl	d40a2 <__cxa_guard_acquire>
   d4c00:	b150      	cbz	r0, d4c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4c02:	4807      	ldr	r0, [pc, #28]	; (d4c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c04:	f7ff ffc4 	bl	d4b90 <_ZN8particle14BleLocalDeviceC1Ev>
   d4c08:	4620      	mov	r0, r4
   d4c0a:	f7ff fa4f 	bl	d40ac <__cxa_guard_release>
   d4c0e:	4a05      	ldr	r2, [pc, #20]	; (d4c24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4c10:	4905      	ldr	r1, [pc, #20]	; (d4c28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4c12:	4803      	ldr	r0, [pc, #12]	; (d4c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c14:	f000 ff14 	bl	d5a40 <__aeabi_atexit>
    return instance;
}
   d4c18:	4801      	ldr	r0, [pc, #4]	; (d4c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c1a:	bd10      	pop	{r4, pc}
   d4c1c:	2003e408 	.word	0x2003e408
   d4c20:	2003e404 	.word	0x2003e404
   d4c24:	2003d9e4 	.word	0x2003d9e4
   d4c28:	000d4dc9 	.word	0x000d4dc9

000d4c2c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d4c2c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4c2e:	a801      	add	r0, sp, #4
   d4c30:	f7ff fde6 	bl	d4800 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d4c34:	2000      	movs	r0, #0
   d4c36:	f7ff fb31 	bl	d429c <hal_ble_stack_init>
   d4c3a:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d4c3c:	a801      	add	r0, sp, #4
   d4c3e:	f7ff fded 	bl	d481c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d4c42:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d4c46:	b002      	add	sp, #8
   d4c48:	bd10      	pop	{r4, pc}

000d4c4a <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d4c4a:	b530      	push	{r4, r5, lr}
   d4c4c:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4c4e:	2400      	movs	r4, #0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d4c50:	4668      	mov	r0, sp

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d4c52:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4c54:	f7ff fdd4 	bl	d4800 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4c58:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4c5a:	4621      	mov	r1, r4
   d4c5c:	a801      	add	r0, sp, #4
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4c5e:	9401      	str	r4, [sp, #4]
   d4c60:	9402      	str	r4, [sp, #8]
   d4c62:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4c64:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4c68:	f7ff fb28 	bl	d42bc <hal_ble_gap_get_advertising_parameters>
   d4c6c:	2800      	cmp	r0, #0
   d4c6e:	db05      	blt.n	d4c7c <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x32>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4c70:	4621      	mov	r1, r4
   d4c72:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
   d4c74:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4c78:	f7ff fb18 	bl	d42ac <hal_ble_gap_set_advertising_parameters>
   d4c7c:	4604      	mov	r4, r0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d4c7e:	4668      	mov	r0, sp
   d4c80:	f7ff fdcc 	bl	d481c <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4c84:	4620      	mov	r0, r4
   d4c86:	b005      	add	sp, #20
   d4c88:	bd30      	pop	{r4, r5, pc}

000d4c8a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4c8a:	4608      	mov	r0, r1
   d4c8c:	b909      	cbnz	r1, d4c92 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4c8e:	460a      	mov	r2, r1
   d4c90:	e001      	b.n	d4c96 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4c92:	6a09      	ldr	r1, [r1, #32]
   d4c94:	2200      	movs	r2, #0
   d4c96:	f7ff bb19 	b.w	d42cc <hal_ble_gap_set_advertising_data>

000d4c9a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4c9a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4c9c:	460c      	mov	r4, r1
   d4c9e:	b911      	cbnz	r1, d4ca6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4ca0:	460a      	mov	r2, r1
   d4ca2:	4608      	mov	r0, r1
   d4ca4:	e006      	b.n	d4cb4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4ca6:	2101      	movs	r1, #1
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f7ff ff02 	bl	d4ab2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4cae:	6a21      	ldr	r1, [r4, #32]
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	4620      	mov	r0, r4
    }
}
   d4cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4cb8:	f7ff bb10 	b.w	d42dc <hal_ble_gap_set_scan_response_data>

000d4cbc <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d4cbc:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4cbe:	a801      	add	r0, sp, #4
   d4cc0:	f7ff fd9e 	bl	d4800 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d4cc4:	2000      	movs	r0, #0
   d4cc6:	f7ff fb11 	bl	d42ec <hal_ble_gap_start_advertising>
   d4cca:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d4ccc:	a801      	add	r0, sp, #4
   d4cce:	f7ff fda5 	bl	d481c <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	b002      	add	sp, #8
   d4cd6:	bd10      	pop	{r4, pc}

000d4cd8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4cda:	4605      	mov	r5, r0
   d4cdc:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4cde:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4ce0:	4616      	mov	r6, r2
    WiringBleLock lk;
   d4ce2:	f7ff fd8d 	bl	d4800 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d4ce6:	4621      	mov	r1, r4
   d4ce8:	4628      	mov	r0, r5
   d4cea:	f7ff ffce 	bl	d4c8a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4cee:	2800      	cmp	r0, #0
   d4cf0:	db08      	blt.n	d4d04 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d4cf2:	4631      	mov	r1, r6
   d4cf4:	4628      	mov	r0, r5
   d4cf6:	f7ff ffd0 	bl	d4c9a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d4cfa:	2800      	cmp	r0, #0
   d4cfc:	db02      	blt.n	d4d04 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d4cfe:	4628      	mov	r0, r5
   d4d00:	f7ff ffdc 	bl	d4cbc <_ZNK8particle14BleLocalDevice9advertiseEv>
   d4d04:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d4d06:	a801      	add	r0, sp, #4
   d4d08:	f7ff fd88 	bl	d481c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	b002      	add	sp, #8
   d4d10:	bd70      	pop	{r4, r5, r6, pc}

000d4d12 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d4d12:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d4d14:	69d8      	ldr	r0, [r3, #28]
}
   d4d16:	2800      	cmp	r0, #0
   d4d18:	bfd4      	ite	le
   d4d1a:	2000      	movle	r0, #0
   d4d1c:	2001      	movgt	r0, #1
   d4d1e:	4770      	bx	lr

000d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d20:	680b      	ldr	r3, [r1, #0]
   d4d22:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d24:	b113      	cbz	r3, d4d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d26:	685a      	ldr	r2, [r3, #4]
   d4d28:	3201      	adds	r2, #1
   d4d2a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d2c:	4770      	bx	lr

000d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d2e:	b510      	push	{r4, lr}
   d4d30:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4d32:	6800      	ldr	r0, [r0, #0]
   d4d34:	b128      	cbz	r0, d4d42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d36:	6843      	ldr	r3, [r0, #4]
   d4d38:	3b01      	subs	r3, #1
   d4d3a:	6043      	str	r3, [r0, #4]
   d4d3c:	b90b      	cbnz	r3, d4d42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d3e:	f7ff fd39 	bl	d47b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d42:	4620      	mov	r0, r4
   d4d44:	bd10      	pop	{r4, pc}

000d4d46 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d4d46:	b510      	push	{r4, lr}
   d4d48:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d4a:	3004      	adds	r0, #4
   d4d4c:	f7ff ffef 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d4d50:	4620      	mov	r0, r4
   d4d52:	bd10      	pop	{r4, pc}

000d4d54 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d4d54:	b510      	push	{r4, lr}
   d4d56:	4604      	mov	r4, r0
   d4d58:	3004      	adds	r0, #4
   d4d5a:	f7ff ffe8 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d4d5e:	4620      	mov	r0, r4
   d4d60:	bd10      	pop	{r4, pc}

000d4d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4d62:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4d64:	6804      	ldr	r4, [r0, #0]
   d4d66:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4d68:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4d6a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4d6e:	42a6      	cmp	r6, r4
   d4d70:	d004      	beq.n	d4d7c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4d72:	1d20      	adds	r0, r4, #4
   d4d74:	f7ff ffdb 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d78:	3408      	adds	r4, #8
   d4d7a:	e7f8      	b.n	d4d6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4d7c:	6828      	ldr	r0, [r5, #0]
   d4d7e:	f7ff fc2d 	bl	d45dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4d82:	4628      	mov	r0, r5
   d4d84:	bd70      	pop	{r4, r5, r6, pc}

000d4d86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4d86:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4d88:	6804      	ldr	r4, [r0, #0]
   d4d8a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4d8c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4d8e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4d92:	42a6      	cmp	r6, r4
   d4d94:	d004      	beq.n	d4da0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d4d96:	1d20      	adds	r0, r4, #4
   d4d98:	f7ff ffc9 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d9c:	3408      	adds	r4, #8
   d4d9e:	e7f8      	b.n	d4d92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4da0:	6828      	ldr	r0, [r5, #0]
   d4da2:	f7ff fc1b 	bl	d45dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4da6:	4628      	mov	r0, r5
   d4da8:	bd70      	pop	{r4, r5, r6, pc}

000d4daa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4daa:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4dac:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d4dae:	f104 0018 	add.w	r0, r4, #24
   d4db2:	f7ff ffe8 	bl	d4d86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4db6:	f104 000c 	add.w	r0, r4, #12
   d4dba:	f7ff ffd2 	bl	d4d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4dc4:	f7ff b969 	b.w	d409a <_ZdlPv>

000d4dc8 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4dca:	6804      	ldr	r4, [r0, #0]
   d4dcc:	4607      	mov	r7, r0
   d4dce:	b1c4      	cbz	r4, d4e02 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d4dd0:	69a5      	ldr	r5, [r4, #24]
   d4dd2:	69e3      	ldr	r3, [r4, #28]
   d4dd4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4dd8:	42ae      	cmp	r6, r5
   d4dda:	d004      	beq.n	d4de6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ddc:	1d28      	adds	r0, r5, #4
   d4dde:	f7ff ffa6 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de2:	3508      	adds	r5, #8
   d4de4:	e7f8      	b.n	d4dd8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4de6:	69a0      	ldr	r0, [r4, #24]
   d4de8:	f7ff fbf8 	bl	d45dc <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d4dec:	f104 000c 	add.w	r0, r4, #12
   d4df0:	f7ff ffc9 	bl	d4d86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4df4:	4620      	mov	r0, r4
   d4df6:	f7ff ffb4 	bl	d4d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4dfa:	2134      	movs	r1, #52	; 0x34
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f000 fe24 	bl	d5a4a <_ZdlPvj>
   d4e02:	4638      	mov	r0, r7
   d4e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4e08 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4e0a:	2500      	movs	r5, #0
   d4e0c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4e0e:	6045      	str	r5, [r0, #4]
   d4e10:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4e12:	2024      	movs	r0, #36	; 0x24
   d4e14:	f7ff f93f 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4e18:	4604      	mov	r4, r0
   d4e1a:	b178      	cbz	r0, d4e3c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4e1c:	4603      	mov	r3, r0
   d4e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e22:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4e26:	f8c0 5002 	str.w	r5, [r0, #2]
   d4e2a:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d4e2c:	7285      	strb	r5, [r0, #10]
   d4e2e:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4e30:	60c5      	str	r5, [r0, #12]
   d4e32:	6105      	str	r5, [r0, #16]
   d4e34:	6145      	str	r5, [r0, #20]
   d4e36:	6185      	str	r5, [r0, #24]
   d4e38:	61c5      	str	r5, [r0, #28]
   d4e3a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4e3c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4e3e:	2014      	movs	r0, #20
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	f7ff f928 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4e46:	4603      	mov	r3, r0
   d4e48:	b128      	cbz	r0, d4e56 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4e4a:	2201      	movs	r2, #1
   d4e4c:	6042      	str	r2, [r0, #4]
   d4e4e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4e50:	4a08      	ldr	r2, [pc, #32]	; (d4e74 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d4e52:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4e54:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e56:	a802      	add	r0, sp, #8
   d4e58:	6872      	ldr	r2, [r6, #4]
   d4e5a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d4e5e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4e60:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4e62:	f7ff ff64 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d4e66:	6833      	ldr	r3, [r6, #0]
   d4e68:	b90b      	cbnz	r3, d4e6e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d4e6a:	f7ff fc99 	bl	d47a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d4e6e:	4630      	mov	r0, r6
   d4e70:	b002      	add	sp, #8
   d4e72:	bd70      	pop	{r4, r5, r6, pc}
   d4e74:	000d5e90 	.word	0x000d5e90

000d4e78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4e78:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4e7a:	b570      	push	{r4, r5, r6, lr}
   d4e7c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4e7e:	d91a      	bls.n	d4eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d4e80:	4290      	cmp	r0, r2
   d4e82:	d219      	bcs.n	d4eb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d4e84:	f1a1 0608 	sub.w	r6, r1, #8
   d4e88:	1a51      	subs	r1, r2, r1
   d4e8a:	3904      	subs	r1, #4
   d4e8c:	1f15      	subs	r5, r2, #4
   d4e8e:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d4e90:	1f2b      	subs	r3, r5, #4
   d4e92:	429e      	cmp	r6, r3
   d4e94:	d025      	beq.n	d4ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d4e96:	2c04      	cmp	r4, #4
   d4e98:	d007      	beq.n	d4eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e9a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d4e9e:	f844 3c04 	str.w	r3, [r4, #-4]
   d4ea2:	4629      	mov	r1, r5
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	f7ff ff3b 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4eaa:	4628      	mov	r0, r5
   d4eac:	f7ff ff3f 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eb0:	3d08      	subs	r5, #8
   d4eb2:	3c08      	subs	r4, #8
   d4eb4:	e7ec      	b.n	d4e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d4eb6:	d014      	beq.n	d4ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d4eb8:	1d0c      	adds	r4, r1, #4
   d4eba:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d4ebc:	1f23      	subs	r3, r4, #4
   d4ebe:	429d      	cmp	r5, r3
   d4ec0:	d00f      	beq.n	d4ee2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d4ec2:	2e04      	cmp	r6, #4
   d4ec4:	d007      	beq.n	d4ed6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ec6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d4eca:	f846 3c04 	str.w	r3, [r6, #-4]
   d4ece:	4621      	mov	r1, r4
   d4ed0:	4630      	mov	r0, r6
   d4ed2:	f7ff ff25 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	f7ff ff29 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4edc:	3408      	adds	r4, #8
   d4ede:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4ee0:	e7ec      	b.n	d4ebc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d4ee2:	bd70      	pop	{r4, r5, r6, pc}

000d4ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d4ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d4ee8:	6804      	ldr	r4, [r0, #0]
   d4eea:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d4eec:	4605      	mov	r5, r0
   d4eee:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d4ef0:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4ef4:	42a7      	cmp	r7, r4
   d4ef6:	d018      	beq.n	d4f2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d4ef8:	4641      	mov	r1, r8
   d4efa:	4620      	mov	r0, r4
   d4efc:	f7ff fe2f 	bl	d4b5e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d4f00:	4606      	mov	r6, r0
   d4f02:	b908      	cbnz	r0, d4f08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4f04:	3408      	adds	r4, #8
   d4f06:	e7f5      	b.n	d4ef4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4f08:	b18c      	cbz	r4, d4f2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d4f0a:	1d20      	adds	r0, r4, #4
   d4f0c:	f7ff ff0f 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4f10:	682b      	ldr	r3, [r5, #0]
   d4f12:	686a      	ldr	r2, [r5, #4]
   d4f14:	f104 0108 	add.w	r1, r4, #8
   d4f18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	f7ff ffab 	bl	d4e78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4f22:	686b      	ldr	r3, [r5, #4]
   d4f24:	3b01      	subs	r3, #1
   d4f26:	606b      	str	r3, [r5, #4]
    return true;
   d4f28:	e002      	b.n	d4f30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d4f2a:	2600      	movs	r6, #0
   d4f2c:	e000      	b.n	d4f30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d4f2e:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d4f30:	4630      	mov	r0, r6
   d4f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4f36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4f38:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f3a:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d4f3e:	6847      	ldr	r7, [r0, #4]
   d4f40:	9300      	str	r3, [sp, #0]
   d4f42:	a801      	add	r0, sp, #4
   d4f44:	f7ff feec 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4f48:	6866      	ldr	r6, [r4, #4]
   d4f4a:	68a3      	ldr	r3, [r4, #8]
   d4f4c:	429e      	cmp	r6, r3
   d4f4e:	db14      	blt.n	d4f7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d4f50:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4f52:	2e00      	cmp	r6, #0
   d4f54:	dd0b      	ble.n	d4f6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4f56:	00f0      	lsls	r0, r6, #3
   d4f58:	f7ff fb38 	bl	d45cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4f5c:	4605      	mov	r5, r0
   d4f5e:	b318      	cbz	r0, d4fa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d4f60:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4f64:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4f68:	f7ff ff86 	bl	d4e78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4f6c:	e000      	b.n	d4f70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4f6e:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4f70:	6820      	ldr	r0, [r4, #0]
   d4f72:	f7ff fb33 	bl	d45dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4f76:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4f78:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4f7a:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4f7c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4f7e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d4f82:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d4f86:	4629      	mov	r1, r5
   d4f88:	f105 0008 	add.w	r0, r5, #8
   d4f8c:	f7ff ff74 	bl	d4e78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4f90:	b135      	cbz	r5, d4fa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d4f92:	9b00      	ldr	r3, [sp, #0]
   d4f94:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d4f98:	a901      	add	r1, sp, #4
   d4f9a:	1d28      	adds	r0, r5, #4
   d4f9c:	f7ff fec0 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d4fa0:	6863      	ldr	r3, [r4, #4]
   d4fa2:	3301      	adds	r3, #1
   d4fa4:	6063      	str	r3, [r4, #4]
   d4fa6:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fa8:	a801      	add	r0, sp, #4
   d4faa:	f7ff fec0 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4fae:	4628      	mov	r0, r5
   d4fb0:	b003      	add	sp, #12
   d4fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fb8:	4604      	mov	r4, r0
   d4fba:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4fbc:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d4fbe:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d4fc0:	f7ff fc1e 	bl	d4800 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d4fc4:	6823      	ldr	r3, [r4, #0]
   d4fc6:	2b03      	cmp	r3, #3
   d4fc8:	d002      	beq.n	d4fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d4fca:	2b04      	cmp	r3, #4
   d4fcc:	d042      	beq.n	d5054 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d4fce:	e087      	b.n	d50e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d4fd0:	a804      	add	r0, sp, #16
   d4fd2:	f7ff ff19 	bl	d4e08 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d4fd6:	9b04      	ldr	r3, [sp, #16]
   d4fd8:	8922      	ldrh	r2, [r4, #8]
   d4fda:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4fdc:	6862      	ldr	r2, [r4, #4]
   d4fde:	9904      	ldr	r1, [sp, #16]
   d4fe0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d4fe4:	f8c1 3002 	str.w	r3, [r1, #2]
   d4fe8:	6853      	ldr	r3, [r2, #4]
   d4fea:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fee:	a807      	add	r0, sp, #28
   d4ff0:	9b04      	ldr	r3, [sp, #16]
   d4ff2:	9306      	str	r3, [sp, #24]
   d4ff4:	a905      	add	r1, sp, #20
   d4ff6:	f7ff fe93 	bl	d4d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d4ffa:	a906      	add	r1, sp, #24
   d4ffc:	f105 0018 	add.w	r0, r5, #24
   d5000:	f7ff ff99 	bl	d4f36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5004:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5006:	a807      	add	r0, sp, #28
   d5008:	f7ff fe91 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d500c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d500e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5010:	b974      	cbnz	r4, d5030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5012:	4b36      	ldr	r3, [pc, #216]	; (d50ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5014:	9300      	str	r3, [sp, #0]
   d5016:	aa06      	add	r2, sp, #24
   d5018:	4623      	mov	r3, r4
   d501a:	4935      	ldr	r1, [pc, #212]	; (d50f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d501c:	9407      	str	r4, [sp, #28]
   d501e:	2032      	movs	r0, #50	; 0x32
   d5020:	f7ff fa58 	bl	d44d4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5024:	9b04      	ldr	r3, [sp, #16]
   d5026:	4621      	mov	r1, r4
   d5028:	8818      	ldrh	r0, [r3, #0]
   d502a:	f7ff f967 	bl	d42fc <hal_ble_gap_disconnect>
   d502e:	e00d      	b.n	d504c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5030:	4a30      	ldr	r2, [pc, #192]	; (d50f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5032:	9200      	str	r2, [sp, #0]
   d5034:	2300      	movs	r3, #0
   d5036:	aa06      	add	r2, sp, #24
   d5038:	492d      	ldr	r1, [pc, #180]	; (d50f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d503a:	9307      	str	r3, [sp, #28]
   d503c:	2001      	movs	r0, #1
   d503e:	f7ff fa49 	bl	d44d4 <log_message>
                if (impl->connectedCb_) {
   d5042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5044:	b113      	cbz	r3, d504c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5046:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5048:	a804      	add	r0, sp, #16
   d504a:	4798      	blx	r3
   d504c:	a805      	add	r0, sp, #20
   d504e:	f7ff fe6e 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5052:	e045      	b.n	d50e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5054:	8921      	ldrh	r1, [r4, #8]
   d5056:	4628      	mov	r0, r5
   d5058:	f7ff fd68 	bl	d4b2c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d505c:	4607      	mov	r7, r0
   d505e:	2800      	cmp	r0, #0
   d5060:	d03e      	beq.n	d50e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5062:	6804      	ldr	r4, [r0, #0]
   d5064:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5066:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5068:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d506c:	8022      	strh	r2, [r4, #0]
   d506e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5072:	4299      	cmp	r1, r3
   d5074:	d003      	beq.n	d507e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5076:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d507a:	8042      	strh	r2, [r0, #2]
   d507c:	e7f9      	b.n	d5072 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d507e:	68e6      	ldr	r6, [r4, #12]
   d5080:	6923      	ldr	r3, [r4, #16]
   d5082:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5086:	45b0      	cmp	r8, r6
   d5088:	d004      	beq.n	d5094 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d508a:	1d30      	adds	r0, r6, #4
   d508c:	f7ff fe4f 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5090:	3608      	adds	r6, #8
   d5092:	e7f8      	b.n	d5086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5094:	2300      	movs	r3, #0
   d5096:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5098:	69a6      	ldr	r6, [r4, #24]
   d509a:	69e3      	ldr	r3, [r4, #28]
   d509c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d50a0:	45b0      	cmp	r8, r6
   d50a2:	d004      	beq.n	d50ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d50a4:	1d30      	adds	r0, r6, #4
   d50a6:	f7ff fe42 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50aa:	3608      	adds	r6, #8
   d50ac:	e7f8      	b.n	d50a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d50ae:	2300      	movs	r3, #0
   d50b0:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d50b2:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d50b4:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d50b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d50b8:	b113      	cbz	r3, d50c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d50ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d50bc:	4638      	mov	r0, r7
   d50be:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d50c0:	2320      	movs	r3, #32
   d50c2:	4a0d      	ldr	r2, [pc, #52]	; (d50f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d50c4:	9306      	str	r3, [sp, #24]
   d50c6:	9200      	str	r2, [sp, #0]
   d50c8:	2300      	movs	r3, #0
   d50ca:	4909      	ldr	r1, [pc, #36]	; (d50f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d50cc:	9307      	str	r3, [sp, #28]
   d50ce:	2001      	movs	r0, #1
   d50d0:	aa06      	add	r2, sp, #24
   d50d2:	f7ff f9ff 	bl	d44d4 <log_message>
                    impl->peers_.removeOne(*peer);
   d50d6:	4639      	mov	r1, r7
   d50d8:	f105 0018 	add.w	r0, r5, #24
   d50dc:	f7ff ff02 	bl	d4ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d50e0:	a803      	add	r0, sp, #12
   d50e2:	f7ff fb9b 	bl	d481c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d50e6:	b00e      	add	sp, #56	; 0x38
   d50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d50ec:	000d5f06 	.word	0x000d5f06
   d50f0:	000d5ea4 	.word	0x000d5ea4
   d50f4:	000d5f2c 	.word	0x000d5f2c
   d50f8:	000d5f49 	.word	0x000d5f49

000d50fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d50fc:	b510      	push	{r4, lr}
   d50fe:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5100:	6840      	ldr	r0, [r0, #4]
   d5102:	b108      	cbz	r0, d5108 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5104:	f7fe ffc9 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5108:	4620      	mov	r0, r4
   d510a:	bd10      	pop	{r4, pc}

000d510c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d510c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d510e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5110:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5112:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5116:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d511a:	f7ff fac7 	bl	d46ac <_ZN6StringD1Ev>
   d511e:	4668      	mov	r0, sp
   d5120:	f7ff ffec 	bl	d50fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5124:	b003      	add	sp, #12
   d5126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d512c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d512c:	b538      	push	{r3, r4, r5, lr}
   d512e:	2300      	movs	r3, #0
   d5130:	4604      	mov	r4, r0
   d5132:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5134:	2014      	movs	r0, #20
   d5136:	460d      	mov	r5, r1
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d513c:	b128      	cbz	r0, d514a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d513e:	2301      	movs	r3, #1
   d5140:	6043      	str	r3, [r0, #4]
   d5142:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5144:	4b02      	ldr	r3, [pc, #8]	; (d5150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5146:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5148:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d514a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d514c:	4620      	mov	r0, r4
   d514e:	bd38      	pop	{r3, r4, r5, pc}
   d5150:	000d5e74 	.word	0x000d5e74

000d5154 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d5154:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5156:	2500      	movs	r5, #0
   d5158:	b086      	sub	sp, #24
   d515a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d515c:	6045      	str	r5, [r0, #4]
   d515e:	4604      	mov	r4, r0
   d5160:	2054      	movs	r0, #84	; 0x54
   d5162:	f7fe ff98 	bl	d4096 <_Znwj>
   d5166:	f8cd d010 	str.w	sp, [sp, #16]
   d516a:	4606      	mov	r6, r0
   d516c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d516e:	b108      	cbz	r0, d5174 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d5170:	f7ff fcbc 	bl	d4aec <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5174:	4631      	mov	r1, r6
   d5176:	ab01      	add	r3, sp, #4
   d5178:	aa02      	add	r2, sp, #8
   d517a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d517c:	9505      	str	r5, [sp, #20]
   d517e:	f7ff ffd5 	bl	d512c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5182:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5184:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5186:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5188:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d518a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d518c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d518e:	f7ff fdce 	bl	d4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5192:	a804      	add	r0, sp, #16
   d5194:	f7ff ffb2 	bl	d50fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d5198:	6823      	ldr	r3, [r4, #0]
   d519a:	b90b      	cbnz	r3, d51a0 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d519c:	f7ff fb00 	bl	d47a0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d51a0:	4620      	mov	r0, r4
   d51a2:	b006      	add	sp, #24
   d51a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51a8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51aa:	4c06      	ldr	r4, [pc, #24]	; (d51c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d51ac:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d51ae:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51b0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d51b2:	f7ff f8cf 	bl	d4354 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51b6:	4620      	mov	r0, r4
   d51b8:	4a03      	ldr	r2, [pc, #12]	; (d51c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d51ba:	4904      	ldr	r1, [pc, #16]	; (d51cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51c0:	f000 bc3e 	b.w	d5a40 <__aeabi_atexit>
   d51c4:	2003e40c 	.word	0x2003e40c
   d51c8:	2003d9e4 	.word	0x2003d9e4
   d51cc:	000d4791 	.word	0x000d4791

000d51d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51d2:	4606      	mov	r6, r0
   d51d4:	460d      	mov	r5, r1
   d51d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d51d8:	2400      	movs	r4, #0
  while (size--) {
   d51da:	42bd      	cmp	r5, r7
   d51dc:	d00c      	beq.n	d51f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51de:	6833      	ldr	r3, [r6, #0]
   d51e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51e4:	689b      	ldr	r3, [r3, #8]
   d51e6:	4630      	mov	r0, r6
   d51e8:	4798      	blx	r3
     if (chunk>=0)
   d51ea:	2800      	cmp	r0, #0
   d51ec:	db01      	blt.n	d51f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d51f0:	e7f3      	b.n	d51da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51f2:	2c00      	cmp	r4, #0
   d51f4:	bf08      	it	eq
   d51f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d51f8:	4620      	mov	r0, r4
   d51fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51fc:	b570      	push	{r4, r5, r6, lr}
   d51fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5200:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5202:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5204:	b149      	cbz	r1, d521a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5206:	f000 fddf 	bl	d5dc8 <strlen>
   d520a:	682b      	ldr	r3, [r5, #0]
   d520c:	4602      	mov	r2, r0
   d520e:	4621      	mov	r1, r4
   d5210:	4628      	mov	r0, r5
   d5212:	68db      	ldr	r3, [r3, #12]
    }
   d5214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5218:	4718      	bx	r3
    }
   d521a:	bd70      	pop	{r4, r5, r6, pc}

000d521c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d521c:	6803      	ldr	r3, [r0, #0]
   d521e:	689b      	ldr	r3, [r3, #8]
   d5220:	4718      	bx	r3

000d5222 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5222:	b530      	push	{r4, r5, lr}
   d5224:	b08b      	sub	sp, #44	; 0x2c
   d5226:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5228:	2100      	movs	r1, #0
   d522a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d522e:	2a01      	cmp	r2, #1
   d5230:	bf98      	it	ls
   d5232:	220a      	movls	r2, #10
   d5234:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5238:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d523c:	fb05 3312 	mls	r3, r5, r2, r3
   d5240:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5244:	2b09      	cmp	r3, #9
   d5246:	bf94      	ite	ls
   d5248:	3330      	addls	r3, #48	; 0x30
   d524a:	3337      	addhi	r3, #55	; 0x37
   d524c:	b2db      	uxtb	r3, r3
   d524e:	4621      	mov	r1, r4
   d5250:	f804 3901 	strb.w	r3, [r4], #-1
   d5254:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5256:	2d00      	cmp	r5, #0
   d5258:	d1ee      	bne.n	d5238 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d525a:	f7ff ffcf 	bl	d51fc <_ZN5Print5writeEPKc>
}
   d525e:	b00b      	add	sp, #44	; 0x2c
   d5260:	bd30      	pop	{r4, r5, pc}
	...

000d5264 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5264:	4b01      	ldr	r3, [pc, #4]	; (d526c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5266:	4a02      	ldr	r2, [pc, #8]	; (d5270 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5268:	601a      	str	r2, [r3, #0]
   d526a:	4770      	bx	lr
   d526c:	2003e410 	.word	0x2003e410
   d5270:	000d60c7 	.word	0x000d60c7

000d5274 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5274:	4b02      	ldr	r3, [pc, #8]	; (d5280 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5276:	681a      	ldr	r2, [r3, #0]
   d5278:	4b02      	ldr	r3, [pc, #8]	; (d5284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d527a:	601a      	str	r2, [r3, #0]
   d527c:	4770      	bx	lr
   d527e:	bf00      	nop
   d5280:	2003d97c 	.word	0x2003d97c
   d5284:	2003e414 	.word	0x2003e414

000d5288 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5288:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d528a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d528c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d528e:	b113      	cbz	r3, d5296 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5290:	2203      	movs	r2, #3
   d5292:	4601      	mov	r1, r0
   d5294:	4798      	blx	r3
    }
   d5296:	4620      	mov	r0, r4
   d5298:	bd10      	pop	{r4, pc}

000d529a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d529a:	b510      	push	{r4, lr}
   d529c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d529e:	f7ff fff3 	bl	d5288 <_ZNSt14_Function_baseD1Ev>
   d52a2:	4620      	mov	r0, r4
   d52a4:	bd10      	pop	{r4, pc}

000d52a6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d52a6:	b510      	push	{r4, lr}
   d52a8:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d52aa:	f7ff f8fb 	bl	d44a4 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d52ae:	4284      	cmp	r4, r0
   d52b0:	d008      	beq.n	d52c4 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d52b2:	b11c      	cbz	r4, d52bc <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d52b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d52b8:	f7ff b8e4 	b.w	d4484 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d52bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d52c0:	f7ff b8e8 	b.w	d4494 <LED_Signaling_Stop>
   d52c4:	bd10      	pop	{r4, pc}

000d52c6 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d52c6:	b570      	push	{r4, r5, r6, lr}
   d52c8:	4605      	mov	r5, r0
   d52ca:	460e      	mov	r6, r1
   d52cc:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d52ce:	f7ff f8e9 	bl	d44a4 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d52d2:	b150      	cbz	r0, d52ea <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d52d4:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d52d8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d52dc:	f7ff f8ca 	bl	d4474 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d52e0:	20e7      	movs	r0, #231	; 0xe7
}
   d52e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d52e6:	f7ff b8e5 	b.w	d44b4 <LED_On>
   d52ea:	bd70      	pop	{r4, r5, r6, pc}

000d52ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52ec:	4803      	ldr	r0, [pc, #12]	; (d52fc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d52ee:	4a04      	ldr	r2, [pc, #16]	; (d5300 <_GLOBAL__sub_I_RGB+0x14>)
   d52f0:	4904      	ldr	r1, [pc, #16]	; (d5304 <_GLOBAL__sub_I_RGB+0x18>)
   d52f2:	2300      	movs	r3, #0
   d52f4:	6083      	str	r3, [r0, #8]
   d52f6:	f000 bba3 	b.w	d5a40 <__aeabi_atexit>
   d52fa:	bf00      	nop
   d52fc:	2003e418 	.word	0x2003e418
   d5300:	2003d9e4 	.word	0x2003d9e4
   d5304:	000d529b 	.word	0x000d529b

000d5308 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5308:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d530a:	4b0c      	ldr	r3, [pc, #48]	; (d533c <serialEventRun+0x34>)
   d530c:	b133      	cbz	r3, d531c <serialEventRun+0x14>
   d530e:	f000 f953 	bl	d55b8 <_Z16_fetch_usbserialv>
   d5312:	6803      	ldr	r3, [r0, #0]
   d5314:	691b      	ldr	r3, [r3, #16]
   d5316:	4798      	blx	r3
   d5318:	2800      	cmp	r0, #0
   d531a:	dc09      	bgt.n	d5330 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d531c:	4b08      	ldr	r3, [pc, #32]	; (d5340 <serialEventRun+0x38>)
   d531e:	b163      	cbz	r3, d533a <serialEventRun+0x32>
   d5320:	f000 f9c8 	bl	d56b4 <_Z22__fetch_global_Serial1v>
   d5324:	6803      	ldr	r3, [r0, #0]
   d5326:	691b      	ldr	r3, [r3, #16]
   d5328:	4798      	blx	r3
   d532a:	2800      	cmp	r0, #0
   d532c:	dc03      	bgt.n	d5336 <serialEventRun+0x2e>
   d532e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5330:	f3af 8000 	nop.w
   d5334:	e7f2      	b.n	d531c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5336:	f3af 8000 	nop.w
   d533a:	bd08      	pop	{r3, pc}
	...

000d5344 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5344:	b508      	push	{r3, lr}
	serialEventRun();
   d5346:	f7ff ffdf 	bl	d5308 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d534a:	f7fe ff9f 	bl	d428c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d534e:	4b01      	ldr	r3, [pc, #4]	; (d5354 <_post_loop+0x10>)
   d5350:	6018      	str	r0, [r3, #0]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	2003e74c 	.word	0x2003e74c

000d5358 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5358:	4802      	ldr	r0, [pc, #8]	; (d5364 <_Z33system_initialize_user_backup_ramv+0xc>)
   d535a:	4a03      	ldr	r2, [pc, #12]	; (d5368 <_Z33system_initialize_user_backup_ramv+0x10>)
   d535c:	4903      	ldr	r1, [pc, #12]	; (d536c <_Z33system_initialize_user_backup_ramv+0x14>)
   d535e:	1a12      	subs	r2, r2, r0
   d5360:	f000 bcdb 	b.w	d5d1a <memcpy>
   d5364:	2003f400 	.word	0x2003f400
   d5368:	2003f404 	.word	0x2003f404
   d536c:	000d6310 	.word	0x000d6310

000d5370 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5370:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5372:	2300      	movs	r3, #0
   d5374:	9300      	str	r3, [sp, #0]
   d5376:	461a      	mov	r2, r3
   d5378:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d537c:	f7ff f8c4 	bl	d4508 <system_ctrl_set_result>
}
   d5380:	b003      	add	sp, #12
   d5382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5388 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5388:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d538a:	8843      	ldrh	r3, [r0, #2]
   d538c:	2b0a      	cmp	r3, #10
   d538e:	d008      	beq.n	d53a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5390:	2b50      	cmp	r3, #80	; 0x50
   d5392:	d109      	bne.n	d53a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5394:	4b09      	ldr	r3, [pc, #36]	; (d53bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5396:	681b      	ldr	r3, [r3, #0]
   d5398:	b13b      	cbz	r3, d53aa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d539a:	b003      	add	sp, #12
   d539c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d53a0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d53a2:	f7ff ffe5 	bl	d5370 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d53a6:	e006      	b.n	d53b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53a8:	2300      	movs	r3, #0
   d53aa:	9300      	str	r3, [sp, #0]
   d53ac:	461a      	mov	r2, r3
   d53ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53b2:	f7ff f8a9 	bl	d4508 <system_ctrl_set_result>
        break;
    }
}
   d53b6:	b003      	add	sp, #12
   d53b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d53bc:	2003e428 	.word	0x2003e428

000d53c0 <module_user_init_hook>:

void module_user_init_hook()
{
   d53c0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53c2:	4c10      	ldr	r4, [pc, #64]	; (d5404 <module_user_init_hook+0x44>)
   d53c4:	4d10      	ldr	r5, [pc, #64]	; (d5408 <module_user_init_hook+0x48>)
   d53c6:	6823      	ldr	r3, [r4, #0]
   d53c8:	42ab      	cmp	r3, r5
   d53ca:	4b10      	ldr	r3, [pc, #64]	; (d540c <module_user_init_hook+0x4c>)
   d53cc:	bf0c      	ite	eq
   d53ce:	2201      	moveq	r2, #1
   d53d0:	2200      	movne	r2, #0
   d53d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d53d4:	d002      	beq.n	d53dc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d53d6:	f7ff ffbf 	bl	d5358 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d53da:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d53dc:	f7fe ff46 	bl	d426c <HAL_RNG_GetRandomNumber>
   d53e0:	4604      	mov	r4, r0
    srand(seed);
   d53e2:	f000 fcc9 	bl	d5d78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d53e6:	4b0a      	ldr	r3, [pc, #40]	; (d5410 <module_user_init_hook+0x50>)
   d53e8:	b113      	cbz	r3, d53f0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d53ea:	4620      	mov	r0, r4
   d53ec:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d53f0:	2100      	movs	r1, #0
   d53f2:	4807      	ldr	r0, [pc, #28]	; (d5410 <module_user_init_hook+0x50>)
   d53f4:	f7ff f8e2 	bl	d45bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d53f8:	2100      	movs	r1, #0
   d53fa:	4806      	ldr	r0, [pc, #24]	; (d5414 <module_user_init_hook+0x54>)
}
   d53fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5400:	f7ff b878 	b.w	d44f4 <system_ctrl_set_app_request_handler>
   d5404:	2003f400 	.word	0x2003f400
   d5408:	9a271c1e 	.word	0x9a271c1e
   d540c:	2003e42c 	.word	0x2003e42c
   d5410:	00000000 	.word	0x00000000
   d5414:	000d5389 	.word	0x000d5389

000d5418 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5418:	4770      	bx	lr

000d541a <_ZN9IPAddressD0Ev>:
   d541a:	b510      	push	{r4, lr}
   d541c:	2118      	movs	r1, #24
   d541e:	4604      	mov	r4, r0
   d5420:	f000 fb13 	bl	d5a4a <_ZdlPvj>
   d5424:	4620      	mov	r0, r4
   d5426:	bd10      	pop	{r4, pc}

000d5428 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5428:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d542a:	7d03      	ldrb	r3, [r0, #20]
   d542c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d542e:	b08d      	sub	sp, #52	; 0x34
   d5430:	460e      	mov	r6, r1
   d5432:	f100 0704 	add.w	r7, r0, #4
   d5436:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d543a:	d002      	beq.n	d5442 <_ZNK9IPAddress7printToER5Print+0x1a>
   d543c:	f100 0508 	add.w	r5, r0, #8
   d5440:	e018      	b.n	d5474 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5442:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5444:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5446:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d544a:	232f      	movs	r3, #47	; 0x2f
   d544c:	462a      	mov	r2, r5
   d544e:	200a      	movs	r0, #10
   d5450:	f7fe ffa0 	bl	d4394 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5454:	4628      	mov	r0, r5
   d5456:	f000 fcb7 	bl	d5dc8 <strlen>
   d545a:	6833      	ldr	r3, [r6, #0]
   d545c:	4602      	mov	r2, r0
   d545e:	68db      	ldr	r3, [r3, #12]
   d5460:	4629      	mov	r1, r5
   d5462:	4630      	mov	r0, r6
   d5464:	4798      	blx	r3
   d5466:	e00f      	b.n	d5488 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5468:	b124      	cbz	r4, d5474 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d546a:	212e      	movs	r1, #46	; 0x2e
   d546c:	4630      	mov	r0, r6
   d546e:	f7ff fed5 	bl	d521c <_ZN5Print5printEc>
   d5472:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5478:	220a      	movs	r2, #10
   d547a:	4630      	mov	r0, r6
   d547c:	f7ff fed1 	bl	d5222 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5480:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5482:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5484:	d1f0      	bne.n	d5468 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5486:	4620      	mov	r0, r4
    }
    return n;
}
   d5488:	b00d      	add	sp, #52	; 0x34
   d548a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d548c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d548c:	b510      	push	{r4, lr}
   d548e:	4b05      	ldr	r3, [pc, #20]	; (d54a4 <_ZN9IPAddressC1Ev+0x18>)
   d5490:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5492:	2211      	movs	r2, #17
   d5494:	f840 3b04 	str.w	r3, [r0], #4
   d5498:	2100      	movs	r1, #0
   d549a:	f000 fc64 	bl	d5d66 <memset>
{
    clear();
}
   d549e:	4620      	mov	r0, r4
   d54a0:	bd10      	pop	{r4, pc}
   d54a2:	bf00      	nop
   d54a4:	000d6168 	.word	0x000d6168

000d54a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54a8:	4603      	mov	r3, r0
   d54aa:	4a07      	ldr	r2, [pc, #28]	; (d54c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54ac:	b510      	push	{r4, lr}
   d54ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d54b2:	f101 0210 	add.w	r2, r1, #16
   d54b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d54ba:	f843 4b04 	str.w	r4, [r3], #4
   d54be:	4291      	cmp	r1, r2
   d54c0:	d1f9      	bne.n	d54b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54c2:	780a      	ldrb	r2, [r1, #0]
   d54c4:	701a      	strb	r2, [r3, #0]
}
   d54c6:	bd10      	pop	{r4, pc}
   d54c8:	000d6168 	.word	0x000d6168

000d54cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d54cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d54ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d54d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d54d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d54da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d54de:	2304      	movs	r3, #4
   d54e0:	6041      	str	r1, [r0, #4]
   d54e2:	7503      	strb	r3, [r0, #20]
   d54e4:	bd10      	pop	{r4, pc}

000d54e6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d54e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d54e8:	780d      	ldrb	r5, [r1, #0]
   d54ea:	788b      	ldrb	r3, [r1, #2]
   d54ec:	784a      	ldrb	r2, [r1, #1]
   d54ee:	78c9      	ldrb	r1, [r1, #3]
   d54f0:	9100      	str	r1, [sp, #0]
   d54f2:	4629      	mov	r1, r5
   d54f4:	f7ff ffea 	bl	d54cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d54f8:	b003      	add	sp, #12
   d54fa:	bd30      	pop	{r4, r5, pc}

000d54fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54fc:	7441      	strb	r1, [r0, #17]
   d54fe:	4770      	bx	lr

000d5500 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5500:	4770      	bx	lr

000d5502 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5502:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5504:	2100      	movs	r1, #0
   d5506:	7c00      	ldrb	r0, [r0, #16]
   d5508:	f7fe ff9c 	bl	d4444 <HAL_USB_USART_Receive_Data>
}
   d550c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5510:	bf28      	it	cs
   d5512:	f04f 30ff 	movcs.w	r0, #4294967295
   d5516:	bd08      	pop	{r3, pc}

000d5518 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5518:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d551a:	2101      	movs	r1, #1
   d551c:	7c00      	ldrb	r0, [r0, #16]
   d551e:	f7fe ff91 	bl	d4444 <HAL_USB_USART_Receive_Data>
}
   d5522:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5526:	bf28      	it	cs
   d5528:	f04f 30ff 	movcs.w	r0, #4294967295
   d552c:	bd08      	pop	{r3, pc}

000d552e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d552e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5530:	7c00      	ldrb	r0, [r0, #16]
   d5532:	f7fe ff7f 	bl	d4434 <HAL_USB_USART_Available_Data_For_Write>
}
   d5536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d553a:	bd08      	pop	{r3, pc}

000d553c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d553c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d553e:	7c00      	ldrb	r0, [r0, #16]
   d5540:	f7fe ff70 	bl	d4424 <HAL_USB_USART_Available_Data>
}
   d5544:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5548:	bd08      	pop	{r3, pc}

000d554a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d554a:	7c00      	ldrb	r0, [r0, #16]
   d554c:	f7fe bf8a 	b.w	d4464 <HAL_USB_USART_Flush_Data>

000d5550 <_ZN9USBSerialD0Ev>:
   d5550:	b510      	push	{r4, lr}
   d5552:	2114      	movs	r1, #20
   d5554:	4604      	mov	r4, r0
   d5556:	f000 fa78 	bl	d5a4a <_ZdlPvj>
   d555a:	4620      	mov	r0, r4
   d555c:	bd10      	pop	{r4, pc}

000d555e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d555e:	b538      	push	{r3, r4, r5, lr}
   d5560:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5562:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5564:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5566:	f7fe ff65 	bl	d4434 <HAL_USB_USART_Available_Data_For_Write>
   d556a:	2800      	cmp	r0, #0
   d556c:	dc01      	bgt.n	d5572 <_ZN9USBSerial5writeEh+0x14>
   d556e:	7c60      	ldrb	r0, [r4, #17]
   d5570:	b128      	cbz	r0, d557e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5572:	4629      	mov	r1, r5
   d5574:	7c20      	ldrb	r0, [r4, #16]
   d5576:	f7fe ff6d 	bl	d4454 <HAL_USB_USART_Send_Data>
   d557a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d557e:	bd38      	pop	{r3, r4, r5, pc}

000d5580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5580:	b510      	push	{r4, lr}
   d5582:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5584:	2300      	movs	r3, #0
   d5586:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d558c:	60a3      	str	r3, [r4, #8]
   d558e:	4b05      	ldr	r3, [pc, #20]	; (d55a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5590:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5592:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5594:	4608      	mov	r0, r1
{
  _serial = serial;
   d5596:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5598:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d559a:	4611      	mov	r1, r2
   d559c:	f7fe ff3a 	bl	d4414 <HAL_USB_USART_Init>
}
   d55a0:	4620      	mov	r0, r4
   d55a2:	bd10      	pop	{r4, pc}
   d55a4:	000d617c 	.word	0x000d617c

000d55a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55aa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55ae:	2100      	movs	r1, #0
   d55b0:	f000 fbd9 	bl	d5d66 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55b4:	4620      	mov	r0, r4
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55b8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55ba:	4d0e      	ldr	r5, [pc, #56]	; (d55f4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d55bc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55be:	a801      	add	r0, sp, #4
   d55c0:	f7ff fff2 	bl	d55a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55c4:	6829      	ldr	r1, [r5, #0]
   d55c6:	f011 0401 	ands.w	r4, r1, #1
   d55ca:	d110      	bne.n	d55ee <_Z16_fetch_usbserialv+0x36>
   d55cc:	4628      	mov	r0, r5
   d55ce:	f7fe fd68 	bl	d40a2 <__cxa_guard_acquire>
   d55d2:	b160      	cbz	r0, d55ee <_Z16_fetch_usbserialv+0x36>
   d55d4:	aa01      	add	r2, sp, #4
   d55d6:	4621      	mov	r1, r4
   d55d8:	4807      	ldr	r0, [pc, #28]	; (d55f8 <_Z16_fetch_usbserialv+0x40>)
   d55da:	f7ff ffd1 	bl	d5580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55de:	4628      	mov	r0, r5
   d55e0:	f7fe fd64 	bl	d40ac <__cxa_guard_release>
   d55e4:	4a05      	ldr	r2, [pc, #20]	; (d55fc <_Z16_fetch_usbserialv+0x44>)
   d55e6:	4906      	ldr	r1, [pc, #24]	; (d5600 <_Z16_fetch_usbserialv+0x48>)
   d55e8:	4803      	ldr	r0, [pc, #12]	; (d55f8 <_Z16_fetch_usbserialv+0x40>)
   d55ea:	f000 fa29 	bl	d5a40 <__aeabi_atexit>
	return _usbserial;
}
   d55ee:	4802      	ldr	r0, [pc, #8]	; (d55f8 <_Z16_fetch_usbserialv+0x40>)
   d55f0:	b007      	add	sp, #28
   d55f2:	bd30      	pop	{r4, r5, pc}
   d55f4:	2003e430 	.word	0x2003e430
   d55f8:	2003e434 	.word	0x2003e434
   d55fc:	2003d9e4 	.word	0x2003d9e4
   d5600:	000d5501 	.word	0x000d5501

000d5604 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5604:	4770      	bx	lr

000d5606 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5606:	7441      	strb	r1, [r0, #17]
   d5608:	4770      	bx	lr

000d560a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d560a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d560c:	7c00      	ldrb	r0, [r0, #16]
   d560e:	f7fe fef9 	bl	d4404 <HAL_USART_Available_Data_For_Write>
}
   d5612:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5616:	bd08      	pop	{r3, pc}

000d5618 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5618:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d561a:	7c00      	ldrb	r0, [r0, #16]
   d561c:	f7fe fed2 	bl	d43c4 <HAL_USART_Available_Data>
}
   d5620:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5624:	bd08      	pop	{r3, pc}

000d5626 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5626:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5628:	7c00      	ldrb	r0, [r0, #16]
   d562a:	f7fe fedb 	bl	d43e4 <HAL_USART_Peek_Data>
}
   d562e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5632:	bf28      	it	cs
   d5634:	f04f 30ff 	movcs.w	r0, #4294967295
   d5638:	bd08      	pop	{r3, pc}

000d563a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d563a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d563c:	7c00      	ldrb	r0, [r0, #16]
   d563e:	f7fe fec9 	bl	d43d4 <HAL_USART_Read_Data>
}
   d5642:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5646:	bf28      	it	cs
   d5648:	f04f 30ff 	movcs.w	r0, #4294967295
   d564c:	bd08      	pop	{r3, pc}

000d564e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d564e:	7c00      	ldrb	r0, [r0, #16]
   d5650:	f7fe bed0 	b.w	d43f4 <HAL_USART_Flush_Data>

000d5654 <_ZN11USARTSerialD0Ev>:
   d5654:	b510      	push	{r4, lr}
   d5656:	2114      	movs	r1, #20
   d5658:	4604      	mov	r4, r0
   d565a:	f000 f9f6 	bl	d5a4a <_ZdlPvj>
   d565e:	4620      	mov	r0, r4
   d5660:	bd10      	pop	{r4, pc}

000d5662 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5662:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5664:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5666:	4604      	mov	r4, r0
   d5668:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d566a:	b925      	cbnz	r5, d5676 <_ZN11USARTSerial5writeEh+0x14>
   d566c:	7c00      	ldrb	r0, [r0, #16]
   d566e:	f7fe fec9 	bl	d4404 <HAL_USART_Available_Data_For_Write>
   d5672:	2800      	cmp	r0, #0
   d5674:	dd05      	ble.n	d5682 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5676:	4631      	mov	r1, r6
   d5678:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d567a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d567e:	f7fe be99 	b.w	d43b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5682:	4628      	mov	r0, r5
   d5684:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5688 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5688:	b510      	push	{r4, lr}
   d568a:	4604      	mov	r4, r0
   d568c:	4608      	mov	r0, r1
   d568e:	4611      	mov	r1, r2
   d5690:	2200      	movs	r2, #0
   d5692:	6062      	str	r2, [r4, #4]
   d5694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5698:	60a2      	str	r2, [r4, #8]
   d569a:	4a05      	ldr	r2, [pc, #20]	; (d56b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d569c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d569e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d56a0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d56a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d56a4:	461a      	mov	r2, r3
   d56a6:	f7fe fe7d 	bl	d43a4 <HAL_USART_Init>
}
   d56aa:	4620      	mov	r0, r4
   d56ac:	bd10      	pop	{r4, pc}
   d56ae:	bf00      	nop
   d56b0:	000d61ac 	.word	0x000d61ac

000d56b4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d56b4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d56b6:	4d0c      	ldr	r5, [pc, #48]	; (d56e8 <_Z22__fetch_global_Serial1v+0x34>)
   d56b8:	6829      	ldr	r1, [r5, #0]
   d56ba:	f011 0401 	ands.w	r4, r1, #1
   d56be:	d111      	bne.n	d56e4 <_Z22__fetch_global_Serial1v+0x30>
   d56c0:	4628      	mov	r0, r5
   d56c2:	f7fe fcee 	bl	d40a2 <__cxa_guard_acquire>
   d56c6:	b168      	cbz	r0, d56e4 <_Z22__fetch_global_Serial1v+0x30>
   d56c8:	4a08      	ldr	r2, [pc, #32]	; (d56ec <_Z22__fetch_global_Serial1v+0x38>)
   d56ca:	4b09      	ldr	r3, [pc, #36]	; (d56f0 <_Z22__fetch_global_Serial1v+0x3c>)
   d56cc:	4809      	ldr	r0, [pc, #36]	; (d56f4 <_Z22__fetch_global_Serial1v+0x40>)
   d56ce:	4621      	mov	r1, r4
   d56d0:	f7ff ffda 	bl	d5688 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d56d4:	4628      	mov	r0, r5
   d56d6:	f7fe fce9 	bl	d40ac <__cxa_guard_release>
   d56da:	4a07      	ldr	r2, [pc, #28]	; (d56f8 <_Z22__fetch_global_Serial1v+0x44>)
   d56dc:	4907      	ldr	r1, [pc, #28]	; (d56fc <_Z22__fetch_global_Serial1v+0x48>)
   d56de:	4805      	ldr	r0, [pc, #20]	; (d56f4 <_Z22__fetch_global_Serial1v+0x40>)
   d56e0:	f000 f9ae 	bl	d5a40 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d56e4:	4803      	ldr	r0, [pc, #12]	; (d56f4 <_Z22__fetch_global_Serial1v+0x40>)
   d56e6:	bd38      	pop	{r3, r4, r5, pc}
   d56e8:	2003e4e0 	.word	0x2003e4e0
   d56ec:	2003e4e4 	.word	0x2003e4e4
   d56f0:	2003e45c 	.word	0x2003e45c
   d56f4:	2003e448 	.word	0x2003e448
   d56f8:	2003d9e4 	.word	0x2003d9e4
   d56fc:	000d5605 	.word	0x000d5605

000d5700 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5700:	2200      	movs	r2, #0
   d5702:	4611      	mov	r1, r2
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	f7fe bf41 	b.w	d458c <network_listening>

000d570a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d570a:	2200      	movs	r2, #0
   d570c:	4611      	mov	r1, r2
   d570e:	6840      	ldr	r0, [r0, #4]
   d5710:	f7fe bf4c 	b.w	d45ac <network_get_listen_timeout>

000d5714 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5714:	2200      	movs	r2, #0
   d5716:	6840      	ldr	r0, [r0, #4]
   d5718:	f7fe bf40 	b.w	d459c <network_set_listen_timeout>

000d571c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d571c:	2200      	movs	r2, #0
   d571e:	f081 0101 	eor.w	r1, r1, #1
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7fe bf2a 	b.w	d457c <network_listen>

000d5728 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	2101      	movs	r1, #1
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7fe bf1c 	b.w	d456c <network_off>

000d5734 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5734:	2300      	movs	r3, #0
   d5736:	461a      	mov	r2, r3
   d5738:	4619      	mov	r1, r3
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7fe bf0e 	b.w	d455c <network_on>

000d5740 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5740:	2200      	movs	r2, #0
   d5742:	4611      	mov	r1, r2
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	f7fe bf01 	b.w	d454c <network_ready>

000d574a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d574a:	2200      	movs	r2, #0
   d574c:	4611      	mov	r1, r2
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7fe beec 	b.w	d452c <network_connecting>

000d5754 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5754:	2200      	movs	r2, #0
   d5756:	2102      	movs	r1, #2
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	f7fe beef 	b.w	d453c <network_disconnect>

000d575e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d575e:	2300      	movs	r3, #0
   d5760:	461a      	mov	r2, r3
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7fe beda 	b.w	d451c <network_connect>

000d5768 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5768:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d576a:	4605      	mov	r5, r0
   d576c:	b188      	cbz	r0, d5792 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d576e:	6804      	ldr	r4, [r0, #0]
   d5770:	b14c      	cbz	r4, d5786 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5772:	68a3      	ldr	r3, [r4, #8]
   d5774:	b11b      	cbz	r3, d577e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5776:	2203      	movs	r2, #3
   d5778:	4621      	mov	r1, r4
   d577a:	4620      	mov	r0, r4
   d577c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d577e:	2110      	movs	r1, #16
   d5780:	4620      	mov	r0, r4
   d5782:	f000 f962 	bl	d5a4a <_ZdlPvj>
   d5786:	4628      	mov	r0, r5
   d5788:	2114      	movs	r1, #20
      }
   d578a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d578e:	f000 b95c 	b.w	d5a4a <_ZdlPvj>
   d5792:	bd38      	pop	{r3, r4, r5, pc}

000d5794 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5794:	b110      	cbz	r0, d579c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5796:	6803      	ldr	r3, [r0, #0]
   d5798:	685b      	ldr	r3, [r3, #4]
   d579a:	4718      	bx	r3
   d579c:	4770      	bx	lr

000d579e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d579e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d57a0:	6803      	ldr	r3, [r0, #0]
   d57a2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d57a4:	b1bb      	cbz	r3, d57d6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d57a6:	6858      	ldr	r0, [r3, #4]
   d57a8:	f7fe fdbc 	bl	d4324 <os_thread_is_current>
   d57ac:	b978      	cbnz	r0, d57ce <_ZN6ThreadD1Ev+0x30>
   d57ae:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57b0:	7c5a      	ldrb	r2, [r3, #17]
   d57b2:	b912      	cbnz	r2, d57ba <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d57b4:	6858      	ldr	r0, [r3, #4]
   d57b6:	f7fe fdbd 	bl	d4334 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d57ba:	6823      	ldr	r3, [r4, #0]
   d57bc:	6858      	ldr	r0, [r3, #4]
   d57be:	f7fe fdc1 	bl	d4344 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57c2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57c4:	2300      	movs	r3, #0
   d57c6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d57c8:	b128      	cbz	r0, d57d6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d57ca:	f7ff ffcd 	bl	d5768 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57ce:	6820      	ldr	r0, [r4, #0]
   d57d0:	b108      	cbz	r0, d57d6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d57d2:	f7ff ffc9 	bl	d5768 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d57d6:	4620      	mov	r0, r4
   d57d8:	bd10      	pop	{r4, pc}

000d57da <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d57da:	b538      	push	{r3, r4, r5, lr}
   d57dc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57de:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d57e2:	b108      	cbz	r0, d57e8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d57e4:	f7fe fc5b 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d57e8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d57ec:	b108      	cbz	r0, d57f2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d57ee:	f7fe fdb9 	bl	d4364 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57f2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d57f6:	b135      	cbz	r5, d5806 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57f8:	4628      	mov	r0, r5
   d57fa:	f7ff ffd0 	bl	d579e <_ZN6ThreadD1Ev>
   d57fe:	2104      	movs	r1, #4
   d5800:	4628      	mov	r0, r5
   d5802:	f000 f922 	bl	d5a4a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5806:	6820      	ldr	r0, [r4, #0]
   d5808:	b108      	cbz	r0, d580e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d580a:	f7ff ffc3 	bl	d5794 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d580e:	4620      	mov	r0, r4
   d5810:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5814 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5814:	b510      	push	{r4, lr}
   d5816:	4b04      	ldr	r3, [pc, #16]	; (d5828 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5818:	4604      	mov	r4, r0
   d581a:	f840 3b08 	str.w	r3, [r0], #8
   d581e:	f7ff ffdc 	bl	d57da <_ZN5spark11MeshPublishD1Ev>
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}
   d5826:	bf00      	nop
   d5828:	000d61dc 	.word	0x000d61dc

000d582c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d582c:	b538      	push	{r3, r4, r5, lr}
   d582e:	4c0e      	ldr	r4, [pc, #56]	; (d5868 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5830:	4b0e      	ldr	r3, [pc, #56]	; (d586c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5832:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5834:	2500      	movs	r5, #0
   d5836:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5838:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d583c:	6063      	str	r3, [r4, #4]
   d583e:	60a5      	str	r5, [r4, #8]
   d5840:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5844:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5848:	f7fe fd84 	bl	d4354 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d584c:	4b08      	ldr	r3, [pc, #32]	; (d5870 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d584e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5852:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5856:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5858:	4620      	mov	r0, r4
   d585a:	4a06      	ldr	r2, [pc, #24]	; (d5874 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d585c:	4906      	ldr	r1, [pc, #24]	; (d5878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d585e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5862:	f000 b8ed 	b.w	d5a40 <__aeabi_atexit>
   d5866:	bf00      	nop
   d5868:	2003e568 	.word	0x2003e568
   d586c:	000d6244 	.word	0x000d6244
   d5870:	000d61dc 	.word	0x000d61dc
   d5874:	2003d9e4 	.word	0x2003d9e4
   d5878:	000d5815 	.word	0x000d5815

000d587c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d587c:	2200      	movs	r2, #0
   d587e:	4611      	mov	r1, r2
   d5880:	6840      	ldr	r0, [r0, #4]
   d5882:	f7fe be63 	b.w	d454c <network_ready>

000d5886 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5886:	2200      	movs	r2, #0
   d5888:	4611      	mov	r1, r2
   d588a:	6840      	ldr	r0, [r0, #4]
   d588c:	f7fe be7e 	b.w	d458c <network_listening>

000d5890 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5890:	2200      	movs	r2, #0
   d5892:	4611      	mov	r1, r2
   d5894:	6840      	ldr	r0, [r0, #4]
   d5896:	f7fe be89 	b.w	d45ac <network_get_listen_timeout>

000d589a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d589a:	2200      	movs	r2, #0
   d589c:	6840      	ldr	r0, [r0, #4]
   d589e:	f7fe be7d 	b.w	d459c <network_set_listen_timeout>

000d58a2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58a2:	2200      	movs	r2, #0
   d58a4:	f081 0101 	eor.w	r1, r1, #1
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	f7fe be67 	b.w	d457c <network_listen>

000d58ae <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d58ae:	2300      	movs	r3, #0
   d58b0:	461a      	mov	r2, r3
   d58b2:	4619      	mov	r1, r3
   d58b4:	6840      	ldr	r0, [r0, #4]
   d58b6:	f7fe be59 	b.w	d456c <network_off>

000d58ba <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d58ba:	2300      	movs	r3, #0
   d58bc:	461a      	mov	r2, r3
   d58be:	4619      	mov	r1, r3
   d58c0:	6840      	ldr	r0, [r0, #4]
   d58c2:	f7fe be4b 	b.w	d455c <network_on>

000d58c6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58c6:	2200      	movs	r2, #0
   d58c8:	4611      	mov	r1, r2
   d58ca:	6840      	ldr	r0, [r0, #4]
   d58cc:	f7fe be2e 	b.w	d452c <network_connecting>

000d58d0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58d0:	2200      	movs	r2, #0
   d58d2:	2102      	movs	r1, #2
   d58d4:	6840      	ldr	r0, [r0, #4]
   d58d6:	f7fe be31 	b.w	d453c <network_disconnect>

000d58da <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58da:	2300      	movs	r3, #0
   d58dc:	461a      	mov	r2, r3
   d58de:	6840      	ldr	r0, [r0, #4]
   d58e0:	f7fe be1c 	b.w	d451c <network_connect>

000d58e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58e4:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58e6:	2204      	movs	r2, #4
   d58e8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58ea:	4a02      	ldr	r2, [pc, #8]	; (d58f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58ec:	601a      	str	r2, [r3, #0]
   d58ee:	4770      	bx	lr
   d58f0:	2003e73c 	.word	0x2003e73c
   d58f4:	000d6210 	.word	0x000d6210

000d58f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58f8:	2300      	movs	r3, #0
   d58fa:	461a      	mov	r2, r3
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	f7fe be0d 	b.w	d451c <network_connect>

000d5902 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5902:	2200      	movs	r2, #0
   d5904:	2102      	movs	r1, #2
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7fe be18 	b.w	d453c <network_disconnect>

000d590c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d590c:	2200      	movs	r2, #0
   d590e:	4611      	mov	r1, r2
   d5910:	6840      	ldr	r0, [r0, #4]
   d5912:	f7fe be0b 	b.w	d452c <network_connecting>

000d5916 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5916:	2200      	movs	r2, #0
   d5918:	4611      	mov	r1, r2
   d591a:	6840      	ldr	r0, [r0, #4]
   d591c:	f7fe be16 	b.w	d454c <network_ready>

000d5920 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5920:	2300      	movs	r3, #0
   d5922:	461a      	mov	r2, r3
   d5924:	4619      	mov	r1, r3
   d5926:	6840      	ldr	r0, [r0, #4]
   d5928:	f7fe be18 	b.w	d455c <network_on>

000d592c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d592c:	2300      	movs	r3, #0
   d592e:	461a      	mov	r2, r3
   d5930:	4619      	mov	r1, r3
   d5932:	6840      	ldr	r0, [r0, #4]
   d5934:	f7fe be1a 	b.w	d456c <network_off>

000d5938 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5938:	2200      	movs	r2, #0
   d593a:	f081 0101 	eor.w	r1, r1, #1
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	f7fe be1c 	b.w	d457c <network_listen>

000d5944 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5944:	2200      	movs	r2, #0
   d5946:	6840      	ldr	r0, [r0, #4]
   d5948:	f7fe be28 	b.w	d459c <network_set_listen_timeout>

000d594c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d594c:	2200      	movs	r2, #0
   d594e:	4611      	mov	r1, r2
   d5950:	6840      	ldr	r0, [r0, #4]
   d5952:	f7fe be2b 	b.w	d45ac <network_get_listen_timeout>

000d5956 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5956:	2200      	movs	r2, #0
   d5958:	4611      	mov	r1, r2
   d595a:	6840      	ldr	r0, [r0, #4]
   d595c:	f7fe be16 	b.w	d458c <network_listening>

000d5960 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5964:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5966:	b095      	sub	sp, #84	; 0x54
   d5968:	4616      	mov	r6, r2
   d596a:	460d      	mov	r5, r1
   d596c:	4607      	mov	r7, r0
    IPAddress addr;
   d596e:	f7ff fd8d 	bl	d548c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5972:	4621      	mov	r1, r4
   d5974:	2220      	movs	r2, #32
   d5976:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5978:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d597a:	f000 f9f4 	bl	d5d66 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d597e:	2340      	movs	r3, #64	; 0x40
   d5980:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5982:	4621      	mov	r1, r4
   d5984:	466b      	mov	r3, sp
   d5986:	aa0c      	add	r2, sp, #48	; 0x30
   d5988:	4630      	mov	r0, r6
   d598a:	f7fe fc5f 	bl	d424c <netdb_getaddrinfo>
    if (!r) {
   d598e:	4604      	mov	r4, r0
   d5990:	2800      	cmp	r0, #0
   d5992:	d144      	bne.n	d5a1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5994:	4602      	mov	r2, r0
   d5996:	2101      	movs	r1, #1
   d5998:	6868      	ldr	r0, [r5, #4]
   d599a:	f7fe fdd7 	bl	d454c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d599e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59a2:	4622      	mov	r2, r4
   d59a4:	6868      	ldr	r0, [r5, #4]
   d59a6:	f7fe fdd1 	bl	d454c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59aa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59ac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d59ae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59b0:	2e00      	cmp	r6, #0
   d59b2:	d034      	beq.n	d5a1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d59b4:	2900      	cmp	r1, #0
   d59b6:	d132      	bne.n	d5a1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59b8:	6873      	ldr	r3, [r6, #4]
   d59ba:	2b02      	cmp	r3, #2
   d59bc:	d002      	beq.n	d59c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d59be:	2b0a      	cmp	r3, #10
   d59c0:	d009      	beq.n	d59d6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d59c2:	e02a      	b.n	d5a1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d59c4:	f1b8 0f00 	cmp.w	r8, #0
   d59c8:	d027      	beq.n	d5a1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59ca:	6971      	ldr	r1, [r6, #20]
   d59cc:	4638      	mov	r0, r7
   d59ce:	3104      	adds	r1, #4
   d59d0:	f7ff fd89 	bl	d54e6 <_ZN9IPAddressaSEPKh>
   d59d4:	e020      	b.n	d5a18 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59d6:	f1b9 0f00 	cmp.w	r9, #0
   d59da:	d01e      	beq.n	d5a1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59dc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59de:	2211      	movs	r2, #17
   d59e0:	a801      	add	r0, sp, #4
   d59e2:	f000 f9c0 	bl	d5d66 <memset>
                    a.v = 6;
   d59e6:	2306      	movs	r3, #6
   d59e8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d59ec:	ad01      	add	r5, sp, #4
   d59ee:	f104 0308 	add.w	r3, r4, #8
   d59f2:	3418      	adds	r4, #24
   d59f4:	6818      	ldr	r0, [r3, #0]
   d59f6:	6859      	ldr	r1, [r3, #4]
   d59f8:	462a      	mov	r2, r5
   d59fa:	c203      	stmia	r2!, {r0, r1}
   d59fc:	3308      	adds	r3, #8
   d59fe:	42a3      	cmp	r3, r4
   d5a00:	4615      	mov	r5, r2
   d5a02:	d1f7      	bne.n	d59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5a04:	a901      	add	r1, sp, #4
   d5a06:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a08:	ad07      	add	r5, sp, #28
   d5a0a:	f7ff fd4d 	bl	d54a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a10:	1d3c      	adds	r4, r7, #4
   d5a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a14:	682b      	ldr	r3, [r5, #0]
   d5a16:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5a18:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a1a:	69f6      	ldr	r6, [r6, #28]
   d5a1c:	e7c8      	b.n	d59b0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a1e:	9800      	ldr	r0, [sp, #0]
   d5a20:	f7fe fc0c 	bl	d423c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a24:	4638      	mov	r0, r7
   d5a26:	b015      	add	sp, #84	; 0x54
   d5a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5a2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a2c:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a2e:	4a03      	ldr	r2, [pc, #12]	; (d5a3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a30:	601a      	str	r2, [r3, #0]
   d5a32:	2200      	movs	r2, #0
   d5a34:	605a      	str	r2, [r3, #4]
   d5a36:	4770      	bx	lr
   d5a38:	2003e744 	.word	0x2003e744
   d5a3c:	000d6244 	.word	0x000d6244

000d5a40 <__aeabi_atexit>:
   d5a40:	460b      	mov	r3, r1
   d5a42:	4601      	mov	r1, r0
   d5a44:	4618      	mov	r0, r3
   d5a46:	f000 b94b 	b.w	d5ce0 <__cxa_atexit>

000d5a4a <_ZdlPvj>:
   d5a4a:	f7fe bb26 	b.w	d409a <_ZdlPv>
	...

000d5a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a50:	4b18      	ldr	r3, [pc, #96]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d1      	lsls	r1, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b16      	ldr	r3, [pc, #88]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d2      	lsls	r2, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b14      	ldr	r3, [pc, #80]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d0      	lsls	r0, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b12      	ldr	r3, [pc, #72]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d1      	lsls	r1, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b10      	ldr	r3, [pc, #64]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d2      	lsls	r2, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b0e      	ldr	r3, [pc, #56]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d0      	lsls	r0, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b0c      	ldr	r3, [pc, #48]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d1      	lsls	r1, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b0a      	ldr	r3, [pc, #40]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d2      	lsls	r2, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4770      	bx	lr
   d5ab2:	bf00      	nop
   d5ab4:	2003e76c 	.word	0x2003e76c
   d5ab8:	2003e768 	.word	0x2003e768
   d5abc:	2003e764 	.word	0x2003e764
   d5ac0:	2003e760 	.word	0x2003e760
   d5ac4:	2003e75c 	.word	0x2003e75c
   d5ac8:	2003e758 	.word	0x2003e758
   d5acc:	2003e754 	.word	0x2003e754
   d5ad0:	2003e750 	.word	0x2003e750

000d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ad4:	4b24      	ldr	r3, [pc, #144]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d0      	lsls	r0, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b22      	ldr	r3, [pc, #136]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d1      	lsls	r1, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b20      	ldr	r3, [pc, #128]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d2      	lsls	r2, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b1e      	ldr	r3, [pc, #120]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d0      	lsls	r0, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b1c      	ldr	r3, [pc, #112]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d1      	lsls	r1, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b1a      	ldr	r3, [pc, #104]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d2      	lsls	r2, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b18      	ldr	r3, [pc, #96]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d0      	lsls	r0, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4b16      	ldr	r3, [pc, #88]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d1      	lsls	r1, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4b14      	ldr	r3, [pc, #80]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b36:	681a      	ldr	r2, [r3, #0]
   d5b38:	07d2      	lsls	r2, r2, #31
   d5b3a:	bf5c      	itt	pl
   d5b3c:	2201      	movpl	r2, #1
   d5b3e:	601a      	strpl	r2, [r3, #0]
   d5b40:	4b12      	ldr	r3, [pc, #72]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b42:	681a      	ldr	r2, [r3, #0]
   d5b44:	07d0      	lsls	r0, r2, #31
   d5b46:	bf5c      	itt	pl
   d5b48:	2201      	movpl	r2, #1
   d5b4a:	601a      	strpl	r2, [r3, #0]
   d5b4c:	4b10      	ldr	r3, [pc, #64]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b4e:	681a      	ldr	r2, [r3, #0]
   d5b50:	07d1      	lsls	r1, r2, #31
   d5b52:	bf5c      	itt	pl
   d5b54:	2201      	movpl	r2, #1
   d5b56:	601a      	strpl	r2, [r3, #0]
   d5b58:	4b0e      	ldr	r3, [pc, #56]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b5a:	681a      	ldr	r2, [r3, #0]
   d5b5c:	07d2      	lsls	r2, r2, #31
   d5b5e:	bf5c      	itt	pl
   d5b60:	2201      	movpl	r2, #1
   d5b62:	601a      	strpl	r2, [r3, #0]
   d5b64:	4770      	bx	lr
   d5b66:	bf00      	nop
   d5b68:	2003e79c 	.word	0x2003e79c
   d5b6c:	2003e798 	.word	0x2003e798
   d5b70:	2003e794 	.word	0x2003e794
   d5b74:	2003e790 	.word	0x2003e790
   d5b78:	2003e78c 	.word	0x2003e78c
   d5b7c:	2003e788 	.word	0x2003e788
   d5b80:	2003e784 	.word	0x2003e784
   d5b84:	2003e780 	.word	0x2003e780
   d5b88:	2003e77c 	.word	0x2003e77c
   d5b8c:	2003e778 	.word	0x2003e778
   d5b90:	2003e774 	.word	0x2003e774
   d5b94:	2003e770 	.word	0x2003e770

000d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b98:	4b24      	ldr	r3, [pc, #144]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d0      	lsls	r0, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b22      	ldr	r3, [pc, #136]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d1      	lsls	r1, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b20      	ldr	r3, [pc, #128]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d2      	lsls	r2, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b1e      	ldr	r3, [pc, #120]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d0      	lsls	r0, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b1c      	ldr	r3, [pc, #112]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d1      	lsls	r1, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b1a      	ldr	r3, [pc, #104]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d2      	lsls	r2, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b18      	ldr	r3, [pc, #96]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d0      	lsls	r0, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b16      	ldr	r3, [pc, #88]	; (d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d1      	lsls	r1, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b14      	ldr	r3, [pc, #80]	; (d5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d2      	lsls	r2, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4b12      	ldr	r3, [pc, #72]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5c06:	681a      	ldr	r2, [r3, #0]
   d5c08:	07d0      	lsls	r0, r2, #31
   d5c0a:	bf5c      	itt	pl
   d5c0c:	2201      	movpl	r2, #1
   d5c0e:	601a      	strpl	r2, [r3, #0]
   d5c10:	4b10      	ldr	r3, [pc, #64]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5c12:	681a      	ldr	r2, [r3, #0]
   d5c14:	07d1      	lsls	r1, r2, #31
   d5c16:	bf5c      	itt	pl
   d5c18:	2201      	movpl	r2, #1
   d5c1a:	601a      	strpl	r2, [r3, #0]
   d5c1c:	4b0e      	ldr	r3, [pc, #56]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5c1e:	681a      	ldr	r2, [r3, #0]
   d5c20:	07d2      	lsls	r2, r2, #31
   d5c22:	bf5c      	itt	pl
   d5c24:	2201      	movpl	r2, #1
   d5c26:	601a      	strpl	r2, [r3, #0]
   d5c28:	4770      	bx	lr
   d5c2a:	bf00      	nop
   d5c2c:	2003e7cc 	.word	0x2003e7cc
   d5c30:	2003e7c8 	.word	0x2003e7c8
   d5c34:	2003e7c4 	.word	0x2003e7c4
   d5c38:	2003e7c0 	.word	0x2003e7c0
   d5c3c:	2003e7bc 	.word	0x2003e7bc
   d5c40:	2003e7b8 	.word	0x2003e7b8
   d5c44:	2003e7b4 	.word	0x2003e7b4
   d5c48:	2003e7b0 	.word	0x2003e7b0
   d5c4c:	2003e7ac 	.word	0x2003e7ac
   d5c50:	2003e7a8 	.word	0x2003e7a8
   d5c54:	2003e7a4 	.word	0x2003e7a4
   d5c58:	2003e7a0 	.word	0x2003e7a0

000d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c5c:	4b18      	ldr	r3, [pc, #96]	; (d5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d1      	lsls	r1, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b16      	ldr	r3, [pc, #88]	; (d5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d2      	lsls	r2, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b14      	ldr	r3, [pc, #80]	; (d5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d0      	lsls	r0, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b12      	ldr	r3, [pc, #72]	; (d5ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d1      	lsls	r1, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b10      	ldr	r3, [pc, #64]	; (d5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d2      	lsls	r2, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b0e      	ldr	r3, [pc, #56]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d0      	lsls	r0, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b0c      	ldr	r3, [pc, #48]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d1      	lsls	r1, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b0a      	ldr	r3, [pc, #40]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d2      	lsls	r2, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4770      	bx	lr
   d5cbe:	bf00      	nop
   d5cc0:	2003e7ec 	.word	0x2003e7ec
   d5cc4:	2003e7e8 	.word	0x2003e7e8
   d5cc8:	2003e7e4 	.word	0x2003e7e4
   d5ccc:	2003e7e0 	.word	0x2003e7e0
   d5cd0:	2003e7dc 	.word	0x2003e7dc
   d5cd4:	2003e7d8 	.word	0x2003e7d8
   d5cd8:	2003e7d4 	.word	0x2003e7d4
   d5cdc:	2003e7d0 	.word	0x2003e7d0

000d5ce0 <__cxa_atexit>:
   d5ce0:	b510      	push	{r4, lr}
   d5ce2:	4c05      	ldr	r4, [pc, #20]	; (d5cf8 <__cxa_atexit+0x18>)
   d5ce4:	4613      	mov	r3, r2
   d5ce6:	b12c      	cbz	r4, d5cf4 <__cxa_atexit+0x14>
   d5ce8:	460a      	mov	r2, r1
   d5cea:	4601      	mov	r1, r0
   d5cec:	2002      	movs	r0, #2
   d5cee:	f3af 8000 	nop.w
   d5cf2:	bd10      	pop	{r4, pc}
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	bd10      	pop	{r4, pc}
   d5cf8:	00000000 	.word	0x00000000

000d5cfc <memcmp>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	3901      	subs	r1, #1
   d5d00:	4402      	add	r2, r0
   d5d02:	4290      	cmp	r0, r2
   d5d04:	d007      	beq.n	d5d16 <memcmp+0x1a>
   d5d06:	f810 3b01 	ldrb.w	r3, [r0], #1
   d5d0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5d0e:	42a3      	cmp	r3, r4
   d5d10:	d0f7      	beq.n	d5d02 <memcmp+0x6>
   d5d12:	1b18      	subs	r0, r3, r4
   d5d14:	bd10      	pop	{r4, pc}
   d5d16:	2000      	movs	r0, #0
   d5d18:	bd10      	pop	{r4, pc}

000d5d1a <memcpy>:
   d5d1a:	b510      	push	{r4, lr}
   d5d1c:	1e43      	subs	r3, r0, #1
   d5d1e:	440a      	add	r2, r1
   d5d20:	4291      	cmp	r1, r2
   d5d22:	d004      	beq.n	d5d2e <memcpy+0x14>
   d5d24:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d28:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d2c:	e7f8      	b.n	d5d20 <memcpy+0x6>
   d5d2e:	bd10      	pop	{r4, pc}

000d5d30 <memmove>:
   d5d30:	4288      	cmp	r0, r1
   d5d32:	b510      	push	{r4, lr}
   d5d34:	eb01 0302 	add.w	r3, r1, r2
   d5d38:	d801      	bhi.n	d5d3e <memmove+0xe>
   d5d3a:	1e42      	subs	r2, r0, #1
   d5d3c:	e00b      	b.n	d5d56 <memmove+0x26>
   d5d3e:	4298      	cmp	r0, r3
   d5d40:	d2fb      	bcs.n	d5d3a <memmove+0xa>
   d5d42:	1881      	adds	r1, r0, r2
   d5d44:	1ad2      	subs	r2, r2, r3
   d5d46:	42d3      	cmn	r3, r2
   d5d48:	d004      	beq.n	d5d54 <memmove+0x24>
   d5d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5d4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d5d52:	e7f8      	b.n	d5d46 <memmove+0x16>
   d5d54:	bd10      	pop	{r4, pc}
   d5d56:	4299      	cmp	r1, r3
   d5d58:	d004      	beq.n	d5d64 <memmove+0x34>
   d5d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d5e:	f802 4f01 	strb.w	r4, [r2, #1]!
   d5d62:	e7f8      	b.n	d5d56 <memmove+0x26>
   d5d64:	bd10      	pop	{r4, pc}

000d5d66 <memset>:
   d5d66:	4402      	add	r2, r0
   d5d68:	4603      	mov	r3, r0
   d5d6a:	4293      	cmp	r3, r2
   d5d6c:	d002      	beq.n	d5d74 <memset+0xe>
   d5d6e:	f803 1b01 	strb.w	r1, [r3], #1
   d5d72:	e7fa      	b.n	d5d6a <memset+0x4>
   d5d74:	4770      	bx	lr
	...

000d5d78 <srand>:
   d5d78:	b538      	push	{r3, r4, r5, lr}
   d5d7a:	4b12      	ldr	r3, [pc, #72]	; (d5dc4 <srand+0x4c>)
   d5d7c:	681c      	ldr	r4, [r3, #0]
   d5d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d80:	4605      	mov	r5, r0
   d5d82:	b9d3      	cbnz	r3, d5dba <srand+0x42>
   d5d84:	2018      	movs	r0, #24
   d5d86:	f7fe fc21 	bl	d45cc <malloc>
   d5d8a:	f243 330e 	movw	r3, #13070	; 0x330e
   d5d8e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5d90:	8003      	strh	r3, [r0, #0]
   d5d92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5d96:	8043      	strh	r3, [r0, #2]
   d5d98:	f241 2334 	movw	r3, #4660	; 0x1234
   d5d9c:	8083      	strh	r3, [r0, #4]
   d5d9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5da2:	80c3      	strh	r3, [r0, #6]
   d5da4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5da8:	8103      	strh	r3, [r0, #8]
   d5daa:	2305      	movs	r3, #5
   d5dac:	8143      	strh	r3, [r0, #10]
   d5dae:	230b      	movs	r3, #11
   d5db0:	8183      	strh	r3, [r0, #12]
   d5db2:	2201      	movs	r2, #1
   d5db4:	2300      	movs	r3, #0
   d5db6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	611d      	str	r5, [r3, #16]
   d5dc0:	615a      	str	r2, [r3, #20]
   d5dc2:	bd38      	pop	{r3, r4, r5, pc}
   d5dc4:	2003d9e0 	.word	0x2003d9e0

000d5dc8 <strlen>:
   d5dc8:	4603      	mov	r3, r0
   d5dca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5dce:	2a00      	cmp	r2, #0
   d5dd0:	d1fb      	bne.n	d5dca <strlen+0x2>
   d5dd2:	1a18      	subs	r0, r3, r0
   d5dd4:	3801      	subs	r0, #1
   d5dd6:	4770      	bx	lr

000d5dd8 <strnlen>:
   d5dd8:	b510      	push	{r4, lr}
   d5dda:	4603      	mov	r3, r0
   d5ddc:	4401      	add	r1, r0
   d5dde:	428b      	cmp	r3, r1
   d5de0:	d004      	beq.n	d5dec <strnlen+0x14>
   d5de2:	781a      	ldrb	r2, [r3, #0]
   d5de4:	1c5c      	adds	r4, r3, #1
   d5de6:	b10a      	cbz	r2, d5dec <strnlen+0x14>
   d5de8:	4623      	mov	r3, r4
   d5dea:	e7f8      	b.n	d5dde <strnlen+0x6>
   d5dec:	1a18      	subs	r0, r3, r0
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <dynalib_user>:
   d5df0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5e00:	0000 0000                                   ....

000d5e04 <_ZL7myColor>:
   d5e04:	0000 00ff 5043 4355 6e6f 656e 7463 3700     ....CPUConnect.7
   d5e14:	3831 3133 6462 2d39 3335 6530 342d 3735     1831bd9-530e-457
   d5e24:	2d61 3162 3664 322d 3032 6466 3130 6264     a-b1d6-220fd01db
   d5e34:	6363 0036                                   cc6.

000d5e38 <_ZTVN5spark13EthernetClassE>:
	...
   d5e40:	465b 000d 4651 000d 4647 000d 463d 000d     [F..QF..GF..=F..
   d5e50:	4631 000d 4625 000d 4619 000d 4611 000d     1F..%F...F...F..
   d5e60:	4607 000d 45fd 000d 5961 000d               .F...E..aY..

000d5e6c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5e74:	4767 000d 476d 000d 510d 000d 4789 000d     gG..mG...Q...G..
   d5e84:	4769 000d                                   iG..

000d5e88 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5e90:	4761 000d 477b 000d 4dab 000d 478d 000d     aG..{G...M...G..
   d5ea0:	4763 000d 6977 6972 676e 622e 656c 5300     cG..wiring.ble.S
   d5eb0:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d5ec0:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d5ed0:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d5ee0:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d5ef0:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d5f00:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d5f10:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d5f20:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d5f30:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d5f40:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d5f50:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d5f60:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d5f70:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d5f80:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d5f90:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d5fa0:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d5fb0:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d5fc0:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d5fd0:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d5fe0:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d5ff0:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d6000:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d6010:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d6020:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d6030:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d6040:	6465 002e                                   ed..

000d6044 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d6044:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d6054:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6064:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6074:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6084:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6094:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d60a4:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d60b4:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d60c4:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d60d4:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d60e4:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d60f4:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d6104:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d6114:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d6124:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d6134:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d6144:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d6154:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d6160 <_ZTV9IPAddress>:
	...
   d6168:	5429 000d 5419 000d 541b 000d               )T...T...T..

000d6174 <_ZTV9USBSerial>:
	...
   d617c:	5501 000d 5551 000d 555f 000d 51d1 000d     .U..QU.._U...Q..
   d618c:	553d 000d 5503 000d 5519 000d 554b 000d     =U...U...U..KU..
   d619c:	552f 000d 54fd 000d                         /U...T..

000d61a4 <_ZTV11USARTSerial>:
	...
   d61ac:	5605 000d 5655 000d 5663 000d 51d1 000d     .V..UV..cV...Q..
   d61bc:	5619 000d 563b 000d 5627 000d 564f 000d     .V..;V..'V..OV..
   d61cc:	5607 000d 560b 000d                         .V...V..

000d61d4 <_ZTVN5spark9MeshClassE>:
	...
   d61dc:	575f 000d 5755 000d 574b 000d 5741 000d     _W..UW..KW..AW..
   d61ec:	5735 000d 5729 000d 571d 000d 5715 000d     5W..)W...W...W..
   d61fc:	570b 000d 5701 000d 5961 000d               .W...W..aY..

000d6208 <_ZTVN5spark9WiFiClassE>:
	...
   d6210:	58db 000d 58d1 000d 58c7 000d 587d 000d     .X...X...X..}X..
   d6220:	58bb 000d 58af 000d 58a3 000d 589b 000d     .X...X...X...X..
   d6230:	5891 000d 5887 000d 5961 000d               .X...X..aY..

000d623c <_ZTVN5spark12NetworkClassE>:
	...
   d6244:	58f9 000d 5903 000d 590d 000d 5917 000d     .X...Y...Y...Y..
   d6254:	5921 000d 592d 000d 5939 000d 5945 000d     !Y..-Y..9Y..EY..
   d6264:	594d 000d 5957 000d 5961 000d               MY..WY..aY..

000d6270 <__sf_fake_stdin>:
	...

000d6290 <__sf_fake_stdout>:
	...

000d62b0 <__sf_fake_stderr>:
	...
   d62d0:	0043                                        C.

000d62d2 <link_const_variable_data_end>:
	...

000d62d4 <link_constructors_location>:
   d62d4:	000d4199 	.word	0x000d4199
   d62d8:	000d4665 	.word	0x000d4665
   d62dc:	000d4679 	.word	0x000d4679
   d62e0:	000d51a9 	.word	0x000d51a9
   d62e4:	000d5265 	.word	0x000d5265
   d62e8:	000d5275 	.word	0x000d5275
   d62ec:	000d52ed 	.word	0x000d52ed
   d62f0:	000d582d 	.word	0x000d582d
   d62f4:	000d58e5 	.word	0x000d58e5
   d62f8:	000d5a2d 	.word	0x000d5a2d
   d62fc:	000d5a51 	.word	0x000d5a51
   d6300:	000d5ad5 	.word	0x000d5ad5
   d6304:	000d5b99 	.word	0x000d5b99
   d6308:	000d5c5d 	.word	0x000d5c5d

000d630c <link_constructors_end>:
   d630c:	00000000 	.word	0x00000000
